{
  "errors": [
    "./packages/render-core/src/pointer/src/Pointer.ts\n\u001b[37m(\u001b[39m\u001b[36m24\u001b[39m,\u001b[36m43\u001b[39m): \u001b[31merror TS2304: Cannot find name 'SharedArrayBuffer'.\u001b[39m",
    "./packages/render-core/src/pointer/src/DirectMemory.ts\n\u001b[37m(\u001b[39m\u001b[36m883\u001b[39m,\u001b[36m53\u001b[39m): \u001b[31merror TS2304: Cannot find name 'SharedArrayBuffer'.\u001b[39m",
    "./packages/render-core/src/pointer/src/DirectMemory.ts\n\u001b[37m(\u001b[39m\u001b[36m885\u001b[39m,\u001b[36m23\u001b[39m): \u001b[31merror TS2540: Cannot assign to 'buffer' because it is a constant or a read-only property.\u001b[39m",
    "./packages/render-core/src/pointer/src/ByteArrayBase.ts\n\u001b[37m(\u001b[39m\u001b[36m815\u001b[39m,\u001b[36m21\u001b[39m): \u001b[31merror TS2322: Type 'Int32Array' is not assignable to type 'Float32Array'.\u001b[39m\r\n\u001b[31m  Types of property '[Symbol.toStringTag]' are incompatible.\u001b[39m\r\n\u001b[31m    Type '\"Int32Array\"' is not assignable to type '\"Float32Array\"'.\u001b[39m",
    "./packages/render-core/src/pointer/src/ByteArrayBase.ts\n\u001b[37m(\u001b[39m\u001b[36m823\u001b[39m,\u001b[36m17\u001b[39m): \u001b[31merror TS2322: Type 'Int32Array' is not assignable to type 'Float32Array'.\u001b[39m",
    "./packages/render-core/src/pointer/src/ByteArrayBase.ts\n\u001b[37m(\u001b[39m\u001b[36m827\u001b[39m,\u001b[36m13\u001b[39m): \u001b[31merror TS2322: Type 'Int32Array' is not assignable to type 'Float32Array'.\u001b[39m",
    "./packages/render-core/src/pointer/src/ByteArrayBase.ts\n\u001b[37m(\u001b[39m\u001b[36m833\u001b[39m,\u001b[36m9\u001b[39m): \u001b[31merror TS2322: Type 'Float32Array' is not assignable to type 'Int32Array'.\u001b[39m\r\n\u001b[31m  Types of property '[Symbol.toStringTag]' are incompatible.\u001b[39m\r\n\u001b[31m    Type '\"Float32Array\"' is not assignable to type '\"Int32Array\"'.\u001b[39m",
    "./packages/render-core/src/pointer/src/ByteArrayBase.ts\n\u001b[37m(\u001b[39m\u001b[36m904\u001b[39m,\u001b[36m23\u001b[39m): \u001b[31merror TS2540: Cannot assign to 'buffer' because it is a constant or a read-only property.\u001b[39m",
    "./packages/render-client/src/views/ThreeJSView.ts\n\u001b[37m(\u001b[39m\u001b[36m17\u001b[39m,\u001b[36m27\u001b[39m): \u001b[31merror TS2686: 'THREE' refers to a UMD global, but the current file is a module. Consider adding an import instead.\u001b[39m",
    "./packages/render-client/src/views/ThreeJSView.ts\n\u001b[37m(\u001b[39m\u001b[36m18\u001b[39m,\u001b[36m30\u001b[39m): \u001b[31merror TS2686: 'THREE' refers to a UMD global, but the current file is a module. Consider adding an import instead.\u001b[39m",
    "./packages/render-client/src/views/ThreeJSView.ts\n\u001b[37m(\u001b[39m\u001b[36m22\u001b[39m,\u001b[36m32\u001b[39m): \u001b[31merror TS2686: 'THREE' refers to a UMD global, but the current file is a module. Consider adding an import instead.\u001b[39m",
    "./packages/render-client/src/views/ThreeJSView.ts\n\u001b[37m(\u001b[39m\u001b[36m25\u001b[39m,\u001b[36m26\u001b[39m): \u001b[31merror TS2686: 'THREE' refers to a UMD global, but the current file is a module. Consider adding an import instead.\u001b[39m",
    "./packages/render-client/src/views/ThreeJSView.ts\n\u001b[37m(\u001b[39m\u001b[36m29\u001b[39m,\u001b[36m29\u001b[39m): \u001b[31merror TS2686: 'THREE' refers to a UMD global, but the current file is a module. Consider adding an import instead.\u001b[39m",
    "./packages/render-client/src/views/ThreeJSView.ts\n\u001b[37m(\u001b[39m\u001b[36m33\u001b[39m,\u001b[36m40\u001b[39m): \u001b[31merror TS2686: 'THREE' refers to a UMD global, but the current file is a module. Consider adding an import instead.\u001b[39m",
    "./packages/render-client/src/views/ThreeJSView.ts\n\u001b[37m(\u001b[39m\u001b[36m37\u001b[39m,\u001b[36m29\u001b[39m): \u001b[31merror TS2686: 'THREE' refers to a UMD global, but the current file is a module. Consider adding an import instead.\u001b[39m",
    "./packages/render-core/src/engine/scene/materials/Texture.ts\n\u001b[37m(\u001b[39m\u001b[36m56\u001b[39m,\u001b[36m17\u001b[39m): \u001b[31merror TS2304: Cannot find name 'importScripts'.\u001b[39m",
    "./packages/render-core/src/engine/scene/materials/Texture.ts\n\u001b[37m(\u001b[39m\u001b[36m200\u001b[39m,\u001b[36m13\u001b[39m): \u001b[31merror TS2322: Type 'Uint8ClampedArray' is not assignable to type 'Uint8Array | number[]'.\u001b[39m\r\n\u001b[31m  Type 'Uint8ClampedArray' is not assignable to type 'number[]'.\u001b[39m\r\n\u001b[31m    Types of property 'fill' are incompatible.\u001b[39m\r\n\u001b[31m      Type '(value: number, start?: number, end?: number) => Uint8ClampedArray' is not assignable to type '(value: number, start?: number, end?: number) => number[]'.\u001b[39m\r\n\u001b[31m        Type 'Uint8ClampedArray' is not assignable to type 'number[]'.\u001b[39m",
    "./packages/render-core/src/engine/scene/materials/Texture.ts\n\u001b[37m(\u001b[39m\u001b[36m226\u001b[39m,\u001b[36m9\u001b[39m): \u001b[31merror TS2322: Type 'Uint8Array | number[]' is not assignable to type 'number[] | Uint8ClampedArray'.\u001b[39m\r\n\u001b[31m  Type 'Uint8Array' is not assignable to type 'number[] | Uint8ClampedArray'.\u001b[39m\r\n\u001b[31m    Type 'Uint8Array' is not assignable to type 'Uint8ClampedArray'.\u001b[39m",
    "C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-core\\src\\engine\\math\\TMatrix4.ts\n\u001b[37m(\u001b[39m\u001b[36m66\u001b[39m,\u001b[36m27\u001b[39m): \u001b[31merror TS2686: 'THREE' refers to a UMD global, but the current file is a module. Consider adding an import instead.\u001b[39m",
    "C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-core\\src\\engine\\math\\TMatrix4.ts\n\u001b[37m(\u001b[39m\u001b[36m69\u001b[39m,\u001b[36m27\u001b[39m): \u001b[31merror TS2686: 'THREE' refers to a UMD global, but the current file is a module. Consider adding an import instead.\u001b[39m",
    "C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-core\\src\\engine\\math\\TMatrix4.ts\n\u001b[37m(\u001b[39m\u001b[36m246\u001b[39m,\u001b[36m17\u001b[39m): \u001b[31merror TS2339: Property 'makeFrustum' does not exist on type 'Matrix4'.\u001b[39m",
    "./packages/render-core/src/engine/scene/shapes/Sphere.ts\n\u001b[37m(\u001b[39m\u001b[36m16\u001b[39m,\u001b[36m14\u001b[39m): \u001b[31merror TS2420: Class 'Sphere' incorrectly implements interface 'Shape'.\u001b[39m\r\n\u001b[31m  Types of property 'directWrite' are incompatible.\u001b[39m\r\n\u001b[31m    Type '(memory: Float32Array, offset: number) => number' is not assignable to type '(memory: Uint8Array, offset: number) => number'.\u001b[39m",
    "./packages/render-core/src/engine/scene/shapes/Sphere.ts\n\u001b[37m(\u001b[39m\u001b[36m94\u001b[39m,\u001b[36m9\u001b[39m): \u001b[31merror TS2322: Type 'Sphere' is not assignable to type 'Shape'.\u001b[39m",
    "./packages/render-core/src/engine/scene/shapes/Sphere.ts\n\u001b[37m(\u001b[39m\u001b[36m110\u001b[39m,\u001b[36m32\u001b[39m): \u001b[31merror TS2345: Argument of type 'this' is not assignable to parameter of type 'Shape'.\u001b[39m\r\n\u001b[31m  Type 'Sphere' is not assignable to type 'Shape'.\u001b[39m",
    "./packages/render-core/src/engine/scene/shapes/Cube.ts\n\u001b[37m(\u001b[39m\u001b[36m17\u001b[39m,\u001b[36m14\u001b[39m): \u001b[31merror TS2420: Class 'Cube' incorrectly implements interface 'Shape'.\u001b[39m\r\n\u001b[31m  Types of property 'directWrite' are incompatible.\u001b[39m\r\n\u001b[31m    Type '(memory: Float32Array, offset: number) => number' is not assignable to type '(memory: Uint8Array, offset: number) => number'.\u001b[39m",
    "./packages/render-core/src/engine/scene/shapes/Cube.ts\n\u001b[37m(\u001b[39m\u001b[36m80\u001b[39m,\u001b[36m9\u001b[39m): \u001b[31merror TS2322: Type 'Cube' is not assignable to type 'Shape'.\u001b[39m",
    "./packages/render-core/src/engine/scene/shapes/Cube.ts\n\u001b[37m(\u001b[39m\u001b[36m97\u001b[39m,\u001b[36m28\u001b[39m): \u001b[31merror TS2345: Argument of type 'this' is not assignable to parameter of type 'Shape'.\u001b[39m\r\n\u001b[31m  Type 'Cube' is not assignable to type 'Shape'.\u001b[39m",
    "./packages/render-core/src/engine/scene/shapes/TransformedShape.ts\n\u001b[37m(\u001b[39m\u001b[36m15\u001b[39m,\u001b[36m14\u001b[39m): \u001b[31merror TS2420: Class 'TransformedShape' incorrectly implements interface 'Shape'.\u001b[39m\r\n\u001b[31m  Types of property 'directWrite' are incompatible.\u001b[39m\r\n\u001b[31m    Type '(memory: Float32Array, offset: number) => number' is not assignable to type '(memory: Uint8Array, offset: number) => number'.\u001b[39m",
    "./packages/render-core/src/engine/scene/shapes/TransformedShape.ts\n\u001b[37m(\u001b[39m\u001b[36m47\u001b[39m,\u001b[36m41\u001b[39m): \u001b[31merror TS2345: Argument of type 'Float32Array' is not assignable to parameter of type 'Uint8Array'.\u001b[39m\r\n\u001b[31m  Types of property '[Symbol.toStringTag]' are incompatible.\u001b[39m\r\n\u001b[31m    Type '\"Float32Array\"' is not assignable to type '\"UInt8Array\"'.\u001b[39m",
    "./packages/render-core/src/engine/scene/shapes/TransformedShape.ts\n\u001b[37m(\u001b[39m\u001b[36m77\u001b[39m,\u001b[36m9\u001b[39m): \u001b[31merror TS2322: Type 'TransformedShape' is not assignable to type 'Shape'.\u001b[39m",
    "./packages/render-core/src/engine/scene/Scene.ts\n\u001b[37m(\u001b[39m\u001b[36m47\u001b[39m,\u001b[36m32\u001b[39m): \u001b[31merror TS2345: Argument of type 'Cube' is not assignable to parameter of type 'Shape'.\u001b[39m",
    "./packages/render-core/src/engine/scene/Scene.ts\n\u001b[37m(\u001b[39m\u001b[36m47\u001b[39m,\u001b[36m46\u001b[39m): \u001b[31merror TS2352: Type 'Shape' cannot be converted to type 'Cube'.\u001b[39m",
    "./packages/render-core/src/engine/scene/Scene.ts\n\u001b[37m(\u001b[39m\u001b[36m50\u001b[39m,\u001b[36m32\u001b[39m): \u001b[31merror TS2345: Argument of type 'Sphere' is not assignable to parameter of type 'Shape'.\u001b[39m",
    "./packages/render-core/src/engine/scene/Scene.ts\n\u001b[37m(\u001b[39m\u001b[36m50\u001b[39m,\u001b[36m48\u001b[39m): \u001b[31merror TS2352: Type 'Shape' cannot be converted to type 'Sphere'.\u001b[39m",
    "./packages/render-core/src/engine/scene/Scene.ts\n\u001b[37m(\u001b[39m\u001b[36m53\u001b[39m,\u001b[36m32\u001b[39m): \u001b[31merror TS2345: Argument of type 'Mesh' is not assignable to parameter of type 'Shape'.\u001b[39m",
    "./packages/render-core/src/engine/scene/Scene.ts\n\u001b[37m(\u001b[39m\u001b[36m53\u001b[39m,\u001b[36m46\u001b[39m): \u001b[31merror TS2352: Type 'Shape' cannot be converted to type 'Mesh'.\u001b[39m",
    "./packages/render-core/src/engine/scene/Scene.ts\n\u001b[37m(\u001b[39m\u001b[36m56\u001b[39m,\u001b[36m32\u001b[39m): \u001b[31merror TS2345: Argument of type 'TransformedShape' is not assignable to parameter of type 'Shape'.\u001b[39m",
    "./packages/render-core/src/engine/scene/Scene.ts\n\u001b[37m(\u001b[39m\u001b[36m56\u001b[39m,\u001b[36m58\u001b[39m): \u001b[31merror TS2352: Type 'Shape' cannot be converted to type 'TransformedShape'.\u001b[39m",
    "./packages/render-core/src/engine/scene/Scene.ts\n\u001b[37m(\u001b[39m\u001b[36m59\u001b[39m,\u001b[36m32\u001b[39m): \u001b[31merror TS2345: Argument of type 'Triangle' is not assignable to parameter of type 'Shape'.\u001b[39m",
    "./packages/render-core/src/engine/scene/Scene.ts\n\u001b[37m(\u001b[39m\u001b[36m59\u001b[39m,\u001b[36m60\u001b[39m): \u001b[31merror TS2352: Type 'Shape' cannot be converted to type 'Triangle'.\u001b[39m",
    "./packages/render-core/src/engine/renderer/worker/TraceJobManager.ts\n\u001b[37m(\u001b[39m\u001b[36m83\u001b[39m,\u001b[36m47\u001b[39m): \u001b[31merror TS2304: Cannot find name 'SharedArrayBuffer'.\u001b[39m",
    "./packages/render-core/src/engine/renderer/worker/TraceJobManager.ts\n\u001b[37m(\u001b[39m\u001b[36m84\u001b[39m,\u001b[36m50\u001b[39m): \u001b[31merror TS2304: Cannot find name 'SharedArrayBuffer'.\u001b[39m",
    "./packages/render-core/src/engine/scene/shapes/Mesh.ts\n\u001b[37m(\u001b[39m\u001b[36m19\u001b[39m,\u001b[36m14\u001b[39m): \u001b[31merror TS2420: Class 'Mesh' incorrectly implements interface 'Shape'.\u001b[39m\r\n\u001b[31m  Types of property 'directWrite' are incompatible.\u001b[39m\r\n\u001b[31m    Type '(memory: Float32Array, offset: number) => number' is not assignable to type '(memory: Uint8Array, offset: number) => number'.\u001b[39m",
    "./packages/render-core/src/engine/scene/shapes/Mesh.ts\n\u001b[37m(\u001b[39m\u001b[36m61\u001b[39m,\u001b[36m40\u001b[39m): \u001b[31merror TS2345: Argument of type 'Triangle[]' is not assignable to parameter of type 'Shape[]'.\u001b[39m\r\n\u001b[31m  Type 'Triangle' is not assignable to type 'Shape'.\u001b[39m",
    "./packages/render-core/src/engine/scene/shapes/Mesh.ts\n\u001b[37m(\u001b[39m\u001b[36m80\u001b[39m,\u001b[36m55\u001b[39m): \u001b[31merror TS2345: Argument of type 'Triangle[]' is not assignable to parameter of type 'Shape[]'.\u001b[39m",
    "./packages/render-core/src/engine/scene/shapes/Mesh.ts\n\u001b[37m(\u001b[39m\u001b[36m95\u001b[39m,\u001b[36m42\u001b[39m): \u001b[31merror TS2345: Argument of type 'Triangle[]' is not assignable to parameter of type 'Shape[]'.\u001b[39m",
    "./packages/render-core/src/engine/scene/shapes/Mesh.ts\n\u001b[37m(\u001b[39m\u001b[36m119\u001b[39m,\u001b[36m35\u001b[39m): \u001b[31merror TS2345: Argument of type 'Triangle[]' is not assignable to parameter of type 'Shape[]'.\u001b[39m",
    "./packages/render-core/src/engine/scene/shapes/Box.ts\n\u001b[37m(\u001b[39m\u001b[36m12\u001b[39m,\u001b[36m14\u001b[39m): \u001b[31merror TS2420: Class 'Box' incorrectly implements interface 'IPointer'.\u001b[39m\r\n\u001b[31m  Types of property 'directWrite' are incompatible.\u001b[39m\r\n\u001b[31m    Type '(memory: Float32Array, offset: number) => number' is not assignable to type '(memory: Uint8Array, offset: number) => number'.\u001b[39m\r\n\u001b[31m      Types of parameters 'memory' and 'memory' are incompatible.\u001b[39m\r\n\u001b[31m        Type 'Uint8Array' is not assignable to type 'Float32Array'.\u001b[39m\r\n\u001b[31m          Types of property '[Symbol.toStringTag]' are incompatible.\u001b[39m\r\n\u001b[31m            Type '\"UInt8Array\"' is not assignable to type '\"Float32Array\"'.\u001b[39m",
    "./packages/render-client/src/views/GIJSView.ts\n\u001b[37m(\u001b[39m\u001b[36m80\u001b[39m,\u001b[36m26\u001b[39m): \u001b[31merror TS2686: 'THREE' refers to a UMD global, but the current file is a module. Consider adding an import instead.\u001b[39m",
    "./packages/render-client/src/views/GIJSView.ts\n\u001b[37m(\u001b[39m\u001b[36m254\u001b[39m,\u001b[36m9\u001b[39m): \u001b[31merror TS2322: Type 'Mesh' is not assignable to type 'Shape'.\u001b[39m",
    "./packages/render-client/src/views/GIJSView.ts\n\u001b[37m(\u001b[39m\u001b[36m283\u001b[39m,\u001b[36m35\u001b[39m): \u001b[31merror TS2686: 'THREE' refers to a UMD global, but the current file is a module. Consider adding an import instead.\u001b[39m",
    "./packages/render-client/src/views/GIJSView.ts\n\u001b[37m(\u001b[39m\u001b[36m331\u001b[39m,\u001b[36m42\u001b[39m): \u001b[31merror TS2686: 'THREE' refers to a UMD global, but the current file is a module. Consider adding an import instead.\u001b[39m",
    "./packages/render-client/src/views/GIJSView.ts\n\u001b[37m(\u001b[39m\u001b[36m333\u001b[39m,\u001b[36m49\u001b[39m): \u001b[31merror TS2686: 'THREE' refers to a UMD global, but the current file is a module. Consider adding an import instead.\u001b[39m",
    "./packages/render-core/src/engine/renderer/SmartBucketRenderer.ts\n\u001b[37m(\u001b[39m\u001b[36m94\u001b[39m,\u001b[36m9\u001b[39m): \u001b[31merror TS2322: Type 'Uint8Array' is not assignable to type 'Uint8ClampedArray'.\u001b[39m\r\n\u001b[31m  Types of property '[Symbol.toStringTag]' are incompatible.\u001b[39m\r\n\u001b[31m    Type '\"UInt8Array\"' is not assignable to type '\"Uint8ClampedArray\"'.\u001b[39m",
    "./packages/render-client/src/render/HeadlessRenderBase.ts\n\u001b[37m(\u001b[39m\u001b[36m103\u001b[39m,\u001b[36m9\u001b[39m): \u001b[31merror TS2322: Type 'Uint8ClampedArray' is not assignable to type 'Uint8Array'.\u001b[39m\r\n\u001b[31m  Types of property '[Symbol.toStringTag]' are incompatible.\u001b[39m\r\n\u001b[31m    Type '\"Uint8ClampedArray\"' is not assignable to type '\"UInt8Array\"'.\u001b[39m",
    "./packages/render-core/src/engine/scene/shapes/Shape.ts\n\u001b[37m(\u001b[39m\u001b[36m45\u001b[39m,\u001b[36m30\u001b[39m): \u001b[31merror TS2345: Argument of type 'Cube' is not assignable to parameter of type 'Shape'.\u001b[39m",
    "./packages/render-core/src/engine/scene/shapes/Shape.ts\n\u001b[37m(\u001b[39m\u001b[36m45\u001b[39m,\u001b[36m44\u001b[39m): \u001b[31merror TS2352: Type 'Shape' cannot be converted to type 'Cube'.\u001b[39m",
    "./packages/render-core/src/engine/scene/shapes/Shape.ts\n\u001b[37m(\u001b[39m\u001b[36m48\u001b[39m,\u001b[36m30\u001b[39m): \u001b[31merror TS2345: Argument of type 'Sphere' is not assignable to parameter of type 'Shape'.\u001b[39m",
    "./packages/render-core/src/engine/scene/shapes/Shape.ts\n\u001b[37m(\u001b[39m\u001b[36m48\u001b[39m,\u001b[36m46\u001b[39m): \u001b[31merror TS2352: Type 'Shape' cannot be converted to type 'Sphere'.\u001b[39m",
    "./packages/render-core/src/engine/scene/shapes/Shape.ts\n\u001b[37m(\u001b[39m\u001b[36m51\u001b[39m,\u001b[36m30\u001b[39m): \u001b[31merror TS2345: Argument of type 'Mesh' is not assignable to parameter of type 'Shape'.\u001b[39m",
    "./packages/render-core/src/engine/scene/shapes/Shape.ts\n\u001b[37m(\u001b[39m\u001b[36m51\u001b[39m,\u001b[36m44\u001b[39m): \u001b[31merror TS2352: Type 'Shape' cannot be converted to type 'Mesh'.\u001b[39m",
    "./packages/render-core/src/engine/scene/shapes/Shape.ts\n\u001b[37m(\u001b[39m\u001b[36m54\u001b[39m,\u001b[36m30\u001b[39m): \u001b[31merror TS2345: Argument of type 'TransformedShape' is not assignable to parameter of type 'Shape'.\u001b[39m",
    "./packages/render-core/src/engine/scene/shapes/Shape.ts\n\u001b[37m(\u001b[39m\u001b[36m54\u001b[39m,\u001b[36m56\u001b[39m): \u001b[31merror TS2352: Type 'Shape' cannot be converted to type 'TransformedShape'.\u001b[39m",
    "./packages/render-core/src/engine/scene/shapes/Shape.ts\n\u001b[37m(\u001b[39m\u001b[36m57\u001b[39m,\u001b[36m30\u001b[39m): \u001b[31merror TS2345: Argument of type 'Triangle' is not assignable to parameter of type 'Shape'.\u001b[39m",
    "./packages/render-core/src/engine/scene/shapes/Shape.ts\n\u001b[37m(\u001b[39m\u001b[36m57\u001b[39m,\u001b[36m58\u001b[39m): \u001b[31merror TS2352: Type 'Shape' cannot be converted to type 'Triangle'.\u001b[39m",
    "./packages/render-core/src/engine/scene/shapes/Shape.ts\n\u001b[37m(\u001b[39m\u001b[36m67\u001b[39m,\u001b[36m13\u001b[39m): \u001b[31merror TS2322: Type 'Cube' is not assignable to type 'Shape'.\u001b[39m\r\n\u001b[31m  Types of property 'directWrite' are incompatible.\u001b[39m\r\n\u001b[31m    Type '(memory: Float32Array, offset: number) => number' is not assignable to type '(memory: Uint8Array, offset: number) => number'.\u001b[39m\r\n\u001b[31m      Types of parameters 'memory' and 'memory' are incompatible.\u001b[39m\r\n\u001b[31m        Type 'Uint8Array' is not assignable to type 'Float32Array'.\u001b[39m",
    "./packages/render-core/src/engine/scene/shapes/Shape.ts\n\u001b[37m(\u001b[39m\u001b[36m67\u001b[39m,\u001b[36m34\u001b[39m): \u001b[31merror TS2352: Type 'Shape' cannot be converted to type 'Cube'.\u001b[39m\r\n\u001b[31m  Property 'min' is missing in type 'Shape'.\u001b[39m",
    "./packages/render-core/src/engine/scene/shapes/Shape.ts\n\u001b[37m(\u001b[39m\u001b[36m69\u001b[39m,\u001b[36m13\u001b[39m): \u001b[31merror TS2322: Type 'Sphere' is not assignable to type 'Shape'.\u001b[39m\r\n\u001b[31m  Types of property 'directWrite' are incompatible.\u001b[39m\r\n\u001b[31m    Type '(memory: Float32Array, offset: number) => number' is not assignable to type '(memory: Uint8Array, offset: number) => number'.\u001b[39m\r\n\u001b[31m      Types of parameters 'memory' and 'memory' are incompatible.\u001b[39m\r\n\u001b[31m        Type 'Uint8Array' is not assignable to type 'Float32Array'.\u001b[39m",
    "./packages/render-core/src/engine/scene/shapes/Shape.ts\n\u001b[37m(\u001b[39m\u001b[36m69\u001b[39m,\u001b[36m36\u001b[39m): \u001b[31merror TS2352: Type 'Shape' cannot be converted to type 'Sphere'.\u001b[39m\r\n\u001b[31m  Property 'center' is missing in type 'Shape'.\u001b[39m",
    "./packages/render-core/src/engine/scene/shapes/Shape.ts\n\u001b[37m(\u001b[39m\u001b[36m71\u001b[39m,\u001b[36m13\u001b[39m): \u001b[31merror TS2322: Type 'Mesh' is not assignable to type 'Shape'.\u001b[39m\r\n\u001b[31m  Types of property 'directWrite' are incompatible.\u001b[39m\r\n\u001b[31m    Type '(memory: Float32Array, offset: number) => number' is not assignable to type '(memory: Uint8Array, offset: number) => number'.\u001b[39m\r\n\u001b[31m      Types of parameters 'memory' and 'memory' are incompatible.\u001b[39m\r\n\u001b[31m        Type 'Uint8Array' is not assignable to type 'Float32Array'.\u001b[39m",
    "./packages/render-core/src/engine/scene/shapes/Shape.ts\n\u001b[37m(\u001b[39m\u001b[36m71\u001b[39m,\u001b[36m34\u001b[39m): \u001b[31merror TS2352: Type 'Shape' cannot be converted to type 'Mesh'.\u001b[39m\r\n\u001b[31m  Property 'material' is missing in type 'Shape'.\u001b[39m",
    "./packages/render-core/src/engine/scene/shapes/Shape.ts\n\u001b[37m(\u001b[39m\u001b[36m73\u001b[39m,\u001b[36m13\u001b[39m): \u001b[31merror TS2322: Type 'TransformedShape' is not assignable to type 'Shape'.\u001b[39m\r\n\u001b[31m  Types of property 'directWrite' are incompatible.\u001b[39m\r\n\u001b[31m    Type '(memory: Float32Array, offset: number) => number' is not assignable to type '(memory: Uint8Array, offset: number) => number'.\u001b[39m\r\n\u001b[31m      Types of parameters 'memory' and 'memory' are incompatible.\u001b[39m\r\n\u001b[31m        Type 'Uint8Array' is not assignable to type 'Float32Array'.\u001b[39m",
    "./packages/render-core/src/engine/scene/shapes/Shape.ts\n\u001b[37m(\u001b[39m\u001b[36m73\u001b[39m,\u001b[36m46\u001b[39m): \u001b[31merror TS2352: Type 'Shape' cannot be converted to type 'TransformedShape'.\u001b[39m\r\n\u001b[31m  Property 'shape' is missing in type 'Shape'.\u001b[39m",
    "./packages/render-core/src/engine/scene/shapes/Shape.ts\n\u001b[37m(\u001b[39m\u001b[36m75\u001b[39m,\u001b[36m13\u001b[39m): \u001b[31merror TS2322: Type 'Triangle' is not assignable to type 'Shape'.\u001b[39m\r\n\u001b[31m  Types of property 'directWrite' are incompatible.\u001b[39m\r\n\u001b[31m    Type '(memory: Float32Array, offset: number) => number' is not assignable to type '(memory: Uint8Array, offset: number) => number'.\u001b[39m\r\n\u001b[31m      Types of parameters 'memory' and 'memory' are incompatible.\u001b[39m\r\n\u001b[31m        Type 'Uint8Array' is not assignable to type 'Float32Array'.\u001b[39m",
    "./packages/render-core/src/engine/scene/shapes/Shape.ts\n\u001b[37m(\u001b[39m\u001b[36m75\u001b[39m,\u001b[36m48\u001b[39m): \u001b[31merror TS2352: Type 'Shape' cannot be converted to type 'Triangle'.\u001b[39m\r\n\u001b[31m  Property 'data' is missing in type 'Shape'.\u001b[39m",
    "./packages/render-core/src/engine/scene/shapes/Shape.ts\n\u001b[37m(\u001b[39m\u001b[36m83\u001b[39m,\u001b[36m28\u001b[39m): \u001b[31merror TS2345: Argument of type 'Cube' is not assignable to parameter of type 'Shape'.\u001b[39m",
    "./packages/render-core/src/engine/scene/shapes/Shape.ts\n\u001b[37m(\u001b[39m\u001b[36m87\u001b[39m,\u001b[36m28\u001b[39m): \u001b[31merror TS2345: Argument of type 'Sphere' is not assignable to parameter of type 'Shape'.\u001b[39m",
    "./packages/render-core/src/engine/scene/shapes/Shape.ts\n\u001b[37m(\u001b[39m\u001b[36m91\u001b[39m,\u001b[36m28\u001b[39m): \u001b[31merror TS2345: Argument of type 'Mesh' is not assignable to parameter of type 'Shape'.\u001b[39m",
    "./packages/render-core/src/engine/scene/shapes/Shape.ts\n\u001b[37m(\u001b[39m\u001b[36m95\u001b[39m,\u001b[36m28\u001b[39m): \u001b[31merror TS2345: Argument of type 'TransformedShape' is not assignable to parameter of type 'Shape'.\u001b[39m",
    "./packages/render-core/src/engine/scene/shapes/Shape.ts\n\u001b[37m(\u001b[39m\u001b[36m108\u001b[39m,\u001b[36m28\u001b[39m): \u001b[31merror TS2345: Argument of type 'Cube' is not assignable to parameter of type 'Shape'.\u001b[39m",
    "./packages/render-core/src/engine/scene/shapes/Shape.ts\n\u001b[37m(\u001b[39m\u001b[36m112\u001b[39m,\u001b[36m28\u001b[39m): \u001b[31merror TS2345: Argument of type 'Sphere' is not assignable to parameter of type 'Shape'.\u001b[39m",
    "./packages/render-core/src/engine/scene/shapes/Shape.ts\n\u001b[37m(\u001b[39m\u001b[36m116\u001b[39m,\u001b[36m28\u001b[39m): \u001b[31merror TS2345: Argument of type 'Mesh' is not assignable to parameter of type 'Shape'.\u001b[39m",
    "./packages/render-core/src/engine/scene/shapes/Shape.ts\n\u001b[37m(\u001b[39m\u001b[36m120\u001b[39m,\u001b[36m28\u001b[39m): \u001b[31merror TS2345: Argument of type 'TransformedShape' is not assignable to parameter of type 'Shape'.\u001b[39m",
    "./packages/render-core/src/engine/scene/shapes/Triangle.ts\n\u001b[37m(\u001b[39m\u001b[36m18\u001b[39m,\u001b[36m14\u001b[39m): \u001b[31merror TS2420: Class 'Triangle' incorrectly implements interface 'Shape'.\u001b[39m\r\n\u001b[31m  Types of property 'directWrite' are incompatible.\u001b[39m\r\n\u001b[31m    Type '(memory: Float32Array, offset: number) => number' is not assignable to type '(memory: Uint8Array, offset: number) => number'.\u001b[39m",
    "./packages/render-core/src/engine/scene/shapes/Triangle.ts\n\u001b[37m(\u001b[39m\u001b[36m270\u001b[39m,\u001b[36m19\u001b[39m): \u001b[31merror TS2304: Cannot find name 'SIMD'.\u001b[39m",
    "./packages/render-core/src/engine/scene/shapes/Triangle.ts\n\u001b[37m(\u001b[39m\u001b[36m271\u001b[39m,\u001b[36m19\u001b[39m): \u001b[31merror TS2304: Cannot find name 'SIMD'.\u001b[39m",
    "./packages/render-core/src/engine/scene/shapes/Triangle.ts\n\u001b[37m(\u001b[39m\u001b[36m272\u001b[39m,\u001b[36m19\u001b[39m): \u001b[31merror TS2304: Cannot find name 'SIMD'.\u001b[39m",
    "./packages/render-core/src/engine/scene/shapes/Triangle.ts\n\u001b[37m(\u001b[39m\u001b[36m275\u001b[39m,\u001b[36m19\u001b[39m): \u001b[31merror TS2304: Cannot find name 'SIMD'.\u001b[39m",
    "./packages/render-core/src/engine/scene/shapes/Triangle.ts\n\u001b[37m(\u001b[39m\u001b[36m278\u001b[39m,\u001b[36m19\u001b[39m): \u001b[31merror TS2304: Cannot find name 'SIMD'.\u001b[39m",
    "./packages/render-core/src/engine/scene/shapes/Triangle.ts\n\u001b[37m(\u001b[39m\u001b[36m282\u001b[39m,\u001b[36m30\u001b[39m): \u001b[31merror TS2339: Property 'SIMD_cross' does not exist on type 'Vector3'.\u001b[39m",
    "./packages/render-core/src/engine/scene/shapes/Triangle.ts\n\u001b[37m(\u001b[39m\u001b[36m289\u001b[39m,\u001b[36m34\u001b[39m): \u001b[31merror TS2339: Property 'SIMD' does not exist on type 'typeof Vector3'.\u001b[39m",
    "./packages/render-core/src/engine/scene/shapes/Triangle.ts\n\u001b[37m(\u001b[39m\u001b[36m298\u001b[39m,\u001b[36m27\u001b[39m): \u001b[31merror TS2339: Property 'SIMD_sub' does not exist on type 'Vector3'.\u001b[39m",
    "./packages/render-core/src/engine/scene/shapes/Triangle.ts\n\u001b[37m(\u001b[39m\u001b[36m306\u001b[39m,\u001b[36m32\u001b[39m): \u001b[31merror TS2339: Property 'SIMD' does not exist on type 'typeof Vector3'.\u001b[39m",
    "./packages/render-core/src/engine/scene/shapes/Triangle.ts\n\u001b[37m(\u001b[39m\u001b[36m317\u001b[39m,\u001b[36m26\u001b[39m): \u001b[31merror TS2339: Property 'SIMD' does not exist on type 'typeof Vector3'.\u001b[39m",
    "./packages/render-core/src/engine/scene/shapes/Triangle.ts\n\u001b[37m(\u001b[39m\u001b[36m322\u001b[39m,\u001b[36m36\u001b[39m): \u001b[31merror TS2339: Property 'SIMD_dot' does not exist on type 'Vector3'.\u001b[39m",
    "./packages/render-core/src/engine/scene/shapes/Triangle.ts\n\u001b[37m(\u001b[39m\u001b[36m330\u001b[39m,\u001b[36m32\u001b[39m): \u001b[31merror TS2339: Property 'SIMD' does not exist on type 'typeof Vector3'.\u001b[39m",
    "./packages/render-core/src/engine/scene/shapes/Triangle.ts\n\u001b[37m(\u001b[39m\u001b[36m336\u001b[39m,\u001b[36m24\u001b[39m): \u001b[31merror TS2345: Argument of type 'this' is not assignable to parameter of type 'Shape'.\u001b[39m\r\n\u001b[31m  Type 'Triangle' is not assignable to type 'Shape'.\u001b[39m",
    "./packages/render-core/src/engine/scene/shapes/Triangle.ts\n\u001b[37m(\u001b[39m\u001b[36m384\u001b[39m,\u001b[36m24\u001b[39m): \u001b[31merror TS2345: Argument of type 'this' is not assignable to parameter of type 'Shape'.\u001b[39m"
  ],
  "warnings": [],
  "version": "3.4.1",
  "hash": "8acd33410961a9e276f2",
  "time": 930,
  "publicPath": "",
  "assetsByChunkName": {
    "xray": [
      "xray.js",
      "xray.js.map"
    ]
  },
  "assets": [
    {
      "name": "xray.js",
      "size": 238170,
      "chunks": [
        0
      ],
      "chunkNames": [
        "xray"
      ],
      "emitted": true
    },
    {
      "name": "xray.js.map",
      "size": 588260,
      "chunks": [
        0
      ],
      "chunkNames": [
        "xray"
      ],
      "emitted": true
    }
  ],
  "entrypoints": {
    "xray": {
      "chunks": [
        0
      ],
      "assets": [
        "xray.js",
        "xray.js.map"
      ]
    }
  },
  "chunks": [
    {
      "id": 0,
      "rendered": true,
      "initial": true,
      "entry": true,
      "extraAsync": false,
      "size": 232593,
      "names": [
        "xray"
      ],
      "files": [
        "xray.js",
        "xray.js.map"
      ],
      "hash": "46a3f8e222cbbb143a8e",
      "parents": [],
      "modules": [
        {
          "id": 0,
          "identifier": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-core\\src\\engine\\scene\\materials\\Material.ts",
          "name": "./packages/render-core/src/engine/scene/materials/Material.ts",
          "index": 25,
          "index2": 23,
          "size": 5391,
          "cacheable": true,
          "built": false,
          "optional": false,
          "prefetched": false,
          "chunks": [
            0
          ],
          "assets": [],
          "issuer": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-core\\src\\engine\\scene\\SharedScene.ts",
          "issuerId": 25,
          "issuerName": "./packages/render-core/src/engine/scene/SharedScene.ts",
          "failed": false,
          "errors": 0,
          "warnings": 0,
          "reasons": [
            {
              "moduleId": 11,
              "moduleIdentifier": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-core\\src\\engine\\scene\\shapes\\Triangle.ts",
              "module": "./packages/render-core/src/engine/scene/shapes/Triangle.ts",
              "moduleName": "./packages/render-core/src/engine/scene/shapes/Triangle.ts",
              "type": "cjs require",
              "userRequest": "../materials/Material",
              "loc": "3:19-51"
            },
            {
              "moduleId": 16,
              "moduleIdentifier": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-core\\src\\engine\\scene\\shapes\\Cube.ts",
              "module": "./packages/render-core/src/engine/scene/shapes/Cube.ts",
              "moduleName": "./packages/render-core/src/engine/scene/shapes/Cube.ts",
              "type": "cjs require",
              "userRequest": "../materials/Material",
              "loc": "4:19-51"
            },
            {
              "moduleId": 17,
              "moduleIdentifier": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-core\\src\\engine\\scene\\materials\\MaterialUtils.ts",
              "module": "./packages/render-core/src/engine/scene/materials/MaterialUtils.ts",
              "moduleName": "./packages/render-core/src/engine/scene/materials/MaterialUtils.ts",
              "type": "cjs require",
              "userRequest": "./Material",
              "loc": "3:19-40"
            },
            {
              "moduleId": 17,
              "moduleIdentifier": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-core\\src\\engine\\scene\\materials\\MaterialUtils.ts",
              "module": "./packages/render-core/src/engine/scene/materials/MaterialUtils.ts",
              "moduleName": "./packages/render-core/src/engine/scene/materials/MaterialUtils.ts",
              "type": "cjs require",
              "userRequest": "./Material",
              "loc": "4:19-40"
            },
            {
              "moduleId": 18,
              "moduleIdentifier": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-core\\src\\engine\\scene\\shapes\\Sphere.ts",
              "module": "./packages/render-core/src/engine/scene/shapes/Sphere.ts",
              "moduleName": "./packages/render-core/src/engine/scene/shapes/Sphere.ts",
              "type": "cjs require",
              "userRequest": "../materials/Material",
              "loc": "4:19-51"
            },
            {
              "moduleId": 25,
              "moduleIdentifier": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-core\\src\\engine\\scene\\SharedScene.ts",
              "module": "./packages/render-core/src/engine/scene/SharedScene.ts",
              "moduleName": "./packages/render-core/src/engine/scene/SharedScene.ts",
              "type": "cjs require",
              "userRequest": "./materials/Material",
              "loc": "5:19-50"
            },
            {
              "moduleId": 28,
              "moduleIdentifier": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-core\\src\\engine\\scene\\materials\\LightMaterial.ts",
              "module": "./packages/render-core/src/engine/scene/materials/LightMaterial.ts",
              "moduleName": "./packages/render-core/src/engine/scene/materials/LightMaterial.ts",
              "type": "cjs require",
              "userRequest": "./Material",
              "loc": "4:19-40"
            },
            {
              "moduleId": 28,
              "moduleIdentifier": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-core\\src\\engine\\scene\\materials\\LightMaterial.ts",
              "module": "./packages/render-core/src/engine/scene/materials/LightMaterial.ts",
              "moduleName": "./packages/render-core/src/engine/scene/materials/LightMaterial.ts",
              "type": "cjs require",
              "userRequest": "./Material",
              "loc": "3:19-40"
            },
            {
              "moduleId": 45,
              "moduleIdentifier": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-core\\src\\engine\\scene\\materials\\DiffuseMaterial.ts",
              "module": "./packages/render-core/src/engine/scene/materials/DiffuseMaterial.ts",
              "moduleName": "./packages/render-core/src/engine/scene/materials/DiffuseMaterial.ts",
              "type": "cjs require",
              "userRequest": "./Material",
              "loc": "5:19-40"
            },
            {
              "moduleId": 45,
              "moduleIdentifier": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-core\\src\\engine\\scene\\materials\\DiffuseMaterial.ts",
              "module": "./packages/render-core/src/engine/scene/materials/DiffuseMaterial.ts",
              "moduleName": "./packages/render-core/src/engine/scene/materials/DiffuseMaterial.ts",
              "type": "cjs require",
              "userRequest": "./Material",
              "loc": "3:19-40"
            },
            {
              "moduleId": 46,
              "moduleIdentifier": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-core\\src\\engine\\scene\\materials\\SpecularMaterial.ts",
              "module": "./packages/render-core/src/engine/scene/materials/SpecularMaterial.ts",
              "moduleName": "./packages/render-core/src/engine/scene/materials/SpecularMaterial.ts",
              "type": "cjs require",
              "userRequest": "./Material",
              "loc": "5:19-40"
            },
            {
              "moduleId": 46,
              "moduleIdentifier": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-core\\src\\engine\\scene\\materials\\SpecularMaterial.ts",
              "module": "./packages/render-core/src/engine/scene/materials/SpecularMaterial.ts",
              "moduleName": "./packages/render-core/src/engine/scene/materials/SpecularMaterial.ts",
              "type": "cjs require",
              "userRequest": "./Material",
              "loc": "3:19-40"
            },
            {
              "moduleId": 47,
              "moduleIdentifier": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-core\\src\\engine\\scene\\materials\\ClearMaterial.ts",
              "module": "./packages/render-core/src/engine/scene/materials/ClearMaterial.ts",
              "moduleName": "./packages/render-core/src/engine/scene/materials/ClearMaterial.ts",
              "type": "cjs require",
              "userRequest": "./Material",
              "loc": "6:19-40"
            },
            {
              "moduleId": 47,
              "moduleIdentifier": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-core\\src\\engine\\scene\\materials\\ClearMaterial.ts",
              "module": "./packages/render-core/src/engine/scene/materials/ClearMaterial.ts",
              "moduleName": "./packages/render-core/src/engine/scene/materials/ClearMaterial.ts",
              "type": "cjs require",
              "userRequest": "./Material",
              "loc": "3:19-40"
            },
            {
              "moduleId": 48,
              "moduleIdentifier": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-core\\src\\engine\\scene\\materials\\GlossyMaterial.ts",
              "module": "./packages/render-core/src/engine/scene/materials/GlossyMaterial.ts",
              "moduleName": "./packages/render-core/src/engine/scene/materials/GlossyMaterial.ts",
              "type": "cjs require",
              "userRequest": "./Material",
              "loc": "5:19-40"
            },
            {
              "moduleId": 48,
              "moduleIdentifier": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-core\\src\\engine\\scene\\materials\\GlossyMaterial.ts",
              "module": "./packages/render-core/src/engine/scene/materials/GlossyMaterial.ts",
              "moduleName": "./packages/render-core/src/engine/scene/materials/GlossyMaterial.ts",
              "type": "cjs require",
              "userRequest": "./Material",
              "loc": "3:19-40"
            },
            {
              "moduleId": 52,
              "moduleIdentifier": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-client\\src\\views\\GIJSView.ts",
              "module": "./packages/render-client/src/views/GIJSView.ts",
              "moduleName": "./packages/render-client/src/views/GIJSView.ts",
              "type": "cjs require",
              "userRequest": "../../../render-core/src/engine/scene/materials/Material",
              "loc": "14:19-86"
            }
          ],
          "usedExports": true,
          "providedExports": null,
          "optimizationBailout": [],
          "depth": 2,
          "source": "\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst Color_1 = require(\"../../math/Color\");\r\nconst Texture_1 = require(\"./Texture\");\r\nconst Attenuation_1 = require(\"./Attenuation\");\r\nconst Attenuation_2 = require(\"./Attenuation\");\r\nvar MaterialType;\r\n(function (MaterialType) {\r\n    MaterialType[MaterialType[\"GENERIC\"] = 0] = \"GENERIC\";\r\n    MaterialType[MaterialType[\"DIFFUSE\"] = 1] = \"DIFFUSE\";\r\n    MaterialType[MaterialType[\"SPECULAR\"] = 2] = \"SPECULAR\";\r\n    MaterialType[MaterialType[\"CLEAR\"] = 3] = \"CLEAR\";\r\n    MaterialType[MaterialType[\"GLOSSY\"] = 4] = \"GLOSSY\";\r\n    MaterialType[MaterialType[\"EMISSIVE\"] = 5] = \"EMISSIVE\";\r\n})(MaterialType = exports.MaterialType || (exports.MaterialType = {}));\r\nclass Material {\r\n    constructor(color = new Color_1.Color(), texture, normalTexture, bumpTexture, bumpMultiplier, emittance, attenuation = Attenuation_2.NoAttenuation, ior, gloss, tint, transparent) {\r\n        this.color = color;\r\n        this.texture = texture;\r\n        this.normalTexture = normalTexture;\r\n        this.bumpTexture = bumpTexture;\r\n        this.bumpMultiplier = bumpMultiplier;\r\n        this.emittance = emittance;\r\n        this.attenuation = attenuation;\r\n        this.ior = ior;\r\n        this.gloss = gloss;\r\n        this.tint = tint;\r\n        this.transparent = transparent;\r\n        this.type = MaterialType.GENERIC;\r\n        this.index = Material.map.push(this) - 1;\r\n    }\r\n    clone() {\r\n        var material = new Material(this.color.clone(), this.texture, this.normalTexture, this.bumpTexture, this.bumpMultiplier, this.emittance, this.attenuation.clone(), this.ior, this.gloss, this.tint, this.transparent);\r\n        material.type = this.type;\r\n        return material;\r\n    }\r\n    directRead(memory, offset) {\r\n        offset = this.color.directRead(memory, offset);\r\n        this.bumpMultiplier = memory[offset++];\r\n        this.emittance = memory[offset++];\r\n        offset = this.attenuation.directRead(memory, offset);\r\n        this.ior = memory[offset++];\r\n        this.gloss = memory[offset++];\r\n        this.tint = memory[offset++];\r\n        this.transparent = memory[offset++] == 1;\r\n        return offset;\r\n    }\r\n    directWrite(memory, offset) {\r\n        offset = this.color.directWrite(memory, offset);\r\n        memory[offset++] = this.bumpMultiplier;\r\n        memory[offset++] = this.emittance;\r\n        offset = this.attenuation.directWrite(memory, offset);\r\n        memory[offset++] = this.ior;\r\n        memory[offset++] = this.gloss;\r\n        memory[offset++] = this.tint;\r\n        memory[offset++] = this.transparent ? 1 : 0;\r\n        return offset;\r\n    }\r\n    read(memory) {\r\n        this.color.read(memory);\r\n        this.bumpMultiplier = memory.readFloat();\r\n        this.emittance = memory.readFloat();\r\n        this.attenuation.read(memory);\r\n        this.ior = memory.readFloat();\r\n        this.gloss = memory.readFloat();\r\n        this.tint = memory.readFloat();\r\n        this.transparent = memory.readBoolean();\r\n        var hasTexture = memory.readBoolean();\r\n        if (hasTexture) {\r\n            this.texture = Texture_1.Texture.getTexture(memory.readUTF());\r\n        }\r\n        var hasNormalTexture = memory.readBoolean();\r\n        if (hasNormalTexture) {\r\n            this.normalTexture = Texture_1.Texture.getTexture(memory.readUTF());\r\n        }\r\n        return memory.position;\r\n    }\r\n    write(memory) {\r\n        this.color.write(memory);\r\n        memory.writeFloat(this.bumpMultiplier);\r\n        memory.writeFloat(this.emittance);\r\n        this.attenuation.write(memory);\r\n        memory.writeFloat(this.ior);\r\n        memory.writeFloat(this.gloss);\r\n        memory.writeFloat(this.tint);\r\n        memory.writeBoolean(this.transparent);\r\n        if (this.texture) {\r\n            memory.writeBoolean(true);\r\n            memory.writeUTF(this.texture.sourceFile);\r\n        }\r\n        else {\r\n            memory.writeBoolean(false);\r\n        }\r\n        if (this.normalTexture) {\r\n            memory.writeBoolean(true);\r\n            memory.writeUTF(this.normalTexture.sourceFile);\r\n        }\r\n        else {\r\n            memory.writeBoolean(false);\r\n        }\r\n        return memory.position;\r\n    }\r\n    static get estimatedMemory() {\r\n        return Material.SIZE * Material.map.length + 1;\r\n    }\r\n    ;\r\n    static directWrite(memory, offset) {\r\n        memory[offset++] = Material.map.length;\r\n        Material.map.forEach(function (material) {\r\n            offset = material.directWrite(memory, offset);\r\n        });\r\n        return offset;\r\n    }\r\n    static directRestore(memory, offset = 0) {\r\n        var numMaterials = memory[offset++];\r\n        for (var i = 0; i < numMaterials; i++) {\r\n            offset = new Material().directRead(memory, offset);\r\n        }\r\n        return offset;\r\n    }\r\n    static write(memory) {\r\n        memory.writeUnsignedInt(Material.map.length);\r\n        Material.map.forEach(function (material) {\r\n            material.write(memory);\r\n        });\r\n        return memory.position;\r\n    }\r\n    static restore(memory) {\r\n        var numMaterials = memory.readUnsignedInt();\r\n        for (var i = 0; i < numMaterials; i++) {\r\n            new Material().read(memory);\r\n        }\r\n        return memory.position;\r\n    }\r\n}\r\nMaterial.SIZE = Color_1.Color.SIZE + Attenuation_1.Attenuation.SIZE + 6;\r\nMaterial.map = [];\r\nexports.Material = Material;\r\n"
        },
        {
          "id": 1,
          "identifier": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-core\\src\\engine\\math\\Vector3.ts",
          "name": "./packages/render-core/src/engine/math/Vector3.ts",
          "index": 7,
          "index2": 7,
          "size": 5069,
          "cacheable": true,
          "built": false,
          "optional": false,
          "prefetched": false,
          "chunks": [
            0
          ],
          "assets": [],
          "issuer": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-client\\src\\render\\HeadlessRenderBase.ts",
          "issuerId": 38,
          "issuerName": "./packages/render-client/src/render/HeadlessRenderBase.ts",
          "failed": false,
          "errors": 0,
          "warnings": 0,
          "reasons": [
            {
              "moduleId": 5,
              "moduleIdentifier": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-core\\src\\engine\\scene\\shapes\\Box.ts",
              "module": "./packages/render-core/src/engine/scene/shapes/Box.ts",
              "moduleName": "./packages/render-core/src/engine/scene/shapes/Box.ts",
              "type": "cjs require",
              "userRequest": "../../math/Vector3",
              "loc": "3:18-47"
            },
            {
              "moduleId": 8,
              "moduleIdentifier": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-core\\src\\engine\\math\\Ray.ts",
              "module": "./packages/render-core/src/engine/math/Ray.ts",
              "moduleName": "./packages/render-core/src/engine/math/Ray.ts",
              "type": "cjs require",
              "userRequest": "./Vector3",
              "loc": "3:18-38"
            },
            {
              "moduleId": 10,
              "moduleIdentifier": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-core\\src\\engine\\scene\\materials\\Texture.ts",
              "module": "./packages/render-core/src/engine/scene/materials/Texture.ts",
              "moduleName": "./packages/render-core/src/engine/scene/materials/Texture.ts",
              "type": "cjs require",
              "userRequest": "../../math/Vector3",
              "loc": "4:18-47"
            },
            {
              "moduleId": 11,
              "moduleIdentifier": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-core\\src\\engine\\scene\\shapes\\Triangle.ts",
              "module": "./packages/render-core/src/engine/scene/shapes/Triangle.ts",
              "moduleName": "./packages/render-core/src/engine/scene/shapes/Triangle.ts",
              "type": "cjs require",
              "userRequest": "../../math/Vector3",
              "loc": "5:18-47"
            },
            {
              "moduleId": 12,
              "moduleIdentifier": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-core\\src\\engine\\math\\Matrix4.ts",
              "module": "./packages/render-core/src/engine/math/Matrix4.ts",
              "moduleName": "./packages/render-core/src/engine/math/Matrix4.ts",
              "type": "cjs require",
              "userRequest": "./Vector3",
              "loc": "3:18-38"
            },
            {
              "moduleId": 16,
              "moduleIdentifier": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-core\\src\\engine\\scene\\shapes\\Cube.ts",
              "module": "./packages/render-core/src/engine/scene/shapes/Cube.ts",
              "moduleName": "./packages/render-core/src/engine/scene/shapes/Cube.ts",
              "type": "cjs require",
              "userRequest": "../../math/Vector3",
              "loc": "3:18-47"
            },
            {
              "moduleId": 18,
              "moduleIdentifier": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-core\\src\\engine\\scene\\shapes\\Sphere.ts",
              "module": "./packages/render-core/src/engine/scene/shapes/Sphere.ts",
              "moduleName": "./packages/render-core/src/engine/scene/shapes/Sphere.ts",
              "type": "cjs require",
              "userRequest": "../../math/Vector3",
              "loc": "3:18-47"
            },
            {
              "moduleId": 19,
              "moduleIdentifier": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-core\\src\\engine\\scene\\shapes\\Mesh.ts",
              "module": "./packages/render-core/src/engine/scene/shapes/Mesh.ts",
              "moduleName": "./packages/render-core/src/engine/scene/shapes/Mesh.ts",
              "type": "cjs require",
              "userRequest": "../../math/Vector3",
              "loc": "5:18-47"
            },
            {
              "moduleId": 24,
              "moduleIdentifier": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-core\\src\\engine\\scene\\Camera.ts",
              "module": "./packages/render-core/src/engine/scene/Camera.ts",
              "moduleName": "./packages/render-core/src/engine/scene/Camera.ts",
              "type": "cjs require",
              "userRequest": "../math/Vector3",
              "loc": "3:18-44"
            },
            {
              "moduleId": 38,
              "moduleIdentifier": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-client\\src\\render\\HeadlessRenderBase.ts",
              "module": "./packages/render-client/src/render/HeadlessRenderBase.ts",
              "moduleName": "./packages/render-client/src/render/HeadlessRenderBase.ts",
              "type": "cjs require",
              "userRequest": "../../../render-core/src/engine/math/Vector3",
              "loc": "6:18-73"
            },
            {
              "moduleId": 41,
              "moduleIdentifier": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-core\\src\\engine\\scene\\Scene.ts",
              "module": "./packages/render-core/src/engine/scene/Scene.ts",
              "moduleName": "./packages/render-core/src/engine/scene/Scene.ts",
              "type": "cjs require",
              "userRequest": "../math/Vector3",
              "loc": "6:18-44"
            },
            {
              "moduleId": 52,
              "moduleIdentifier": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-client\\src\\views\\GIJSView.ts",
              "module": "./packages/render-client/src/views/GIJSView.ts",
              "moduleName": "./packages/render-client/src/views/GIJSView.ts",
              "type": "cjs require",
              "userRequest": "../../../render-core/src/engine/math/Vector3",
              "loc": "8:18-73"
            }
          ],
          "usedExports": true,
          "providedExports": null,
          "optimizationBailout": [],
          "depth": 2,
          "source": "\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst DirectMemory_1 = require(\"../../pointer/src/DirectMemory\");\r\nclass Vector3 {\r\n    constructor(x = 0, y = 0, z = 0) {\r\n        this.x = x;\r\n        this.y = y;\r\n        this.z = z;\r\n        this.memorySize = Vector3.SIZE;\r\n        this.data = new Float32Array(4);\r\n        this.update();\r\n    }\r\n    update() {\r\n        this.data[0] = this.x;\r\n        this.data[1] = this.y;\r\n        this.data[2] = this.z;\r\n    }\r\n    sync() {\r\n        this.x = this.data[0];\r\n        this.y = this.data[1];\r\n        this.z = this.data[2];\r\n    }\r\n    static fromJson(v) {\r\n        if (v) {\r\n            return new Vector3(v.x, v.y, v.z);\r\n        }\r\n        else {\r\n            return null;\r\n        }\r\n    }\r\n    setFromArray(a, offset = 0) {\r\n        this.x = a[offset];\r\n        this.y = a[offset + 1];\r\n        this.z = a[offset + 2];\r\n        this.update();\r\n    }\r\n    setFromJson(a) {\r\n        this.x = a.x;\r\n        this.y = a.y;\r\n        this.z = a.z;\r\n        this.update();\r\n    }\r\n    length() {\r\n        return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z);\r\n    }\r\n    dot(b) {\r\n        return this.x * b.x + this.y * b.y + this.z * b.z;\r\n    }\r\n    cross(b) {\r\n        let x = this.y * b.z - this.z * b.y;\r\n        let y = this.z * b.x - this.x * b.z;\r\n        let z = this.x * b.y - this.y * b.x;\r\n        return new Vector3(x, y, z);\r\n    }\r\n    normalize() {\r\n        let d = this.length();\r\n        return new Vector3(this.x / d, this.y / d, this.z / d);\r\n    }\r\n    add(b) {\r\n        return new Vector3(this.x + b.x, this.y + b.y, this.z + b.z);\r\n    }\r\n    sub(b) {\r\n        return new Vector3(this.x - b.x, this.y - b.y, this.z - b.z);\r\n    }\r\n    mul(b) {\r\n        return new Vector3(this.x * b.x, this.y * b.y, this.z * b.z);\r\n    }\r\n    div(b) {\r\n        return new Vector3(this.x / b.x, this.y / b.y, this.z / b.z);\r\n    }\r\n    mulScalar(b) {\r\n        return new Vector3(this.x * b, this.y * b, this.z * b);\r\n    }\r\n    divScalar(b) {\r\n        return new Vector3(this.x / b, this.y / b, this.z / b);\r\n    }\r\n    min(b) {\r\n        return new Vector3(Math.min(this.x, b.x), Math.min(this.y, b.y), Math.min(this.z, b.z));\r\n    }\r\n    max(b) {\r\n        return new Vector3(Math.max(this.x, b.x), Math.max(this.y, b.y), Math.max(this.z, b.z));\r\n    }\r\n    minAxis() {\r\n        let x = Math.abs(this.x);\r\n        let y = Math.abs(this.y);\r\n        let z = Math.abs(this.z);\r\n        if (x <= y && x <= z) {\r\n            return new Vector3(1, 0, 0);\r\n        }\r\n        else if (y <= x && y <= z) {\r\n            return new Vector3(0, 1, 0);\r\n        }\r\n        return new Vector3(0, 0, 1);\r\n    }\r\n    minComponent() {\r\n        return Math.min(Math.min(this.x, this.y), this.z);\r\n    }\r\n    reflect(i) {\r\n        return i.sub(this.mulScalar(2 * this.dot(i)));\r\n    }\r\n    refract(i, n1, n2) {\r\n        let nr = n1 / n2;\r\n        let cosI = -this.dot(i);\r\n        let sinT2 = nr * nr * (1 - cosI * cosI);\r\n        if (sinT2 > 1) {\r\n            return new Vector3();\r\n        }\r\n        let cosT = Math.sqrt(1 - sinT2);\r\n        return i.mulScalar(nr).add(this.mulScalar(nr * cosI - cosT));\r\n    }\r\n    reflectance(i, n1, n2) {\r\n        let nr = n1 / n2;\r\n        let cosI = -this.dot(i);\r\n        let sinT2 = nr * nr * (1 - cosI * cosI);\r\n        if (sinT2 > 1) {\r\n            return 1;\r\n        }\r\n        let cosT = Math.sqrt(1 - sinT2);\r\n        let rOrth = (n1 * cosI - n2 * cosT) / (n1 * cosI + n2 * cosT);\r\n        let rPar = (n2 * cosI - n1 * cosT) / (n2 * cosI + n1 * cosT);\r\n        return (rOrth * rOrth + rPar * rPar) / 2;\r\n    }\r\n    toString() {\r\n        return \"(\" + this.x + \",\" + this.y + \",\" + this.z + \")\";\r\n    }\r\n    equals(v) {\r\n        return this.x == v.x && this.y == v.y && this.z == v.z;\r\n    }\r\n    isZero() {\r\n        return this.x == 0 && this.y == 0 && this.z == 0;\r\n    }\r\n    directWrite(memory, offset) {\r\n        memory[offset++] = this.x;\r\n        memory[offset++] = this.y;\r\n        memory[offset++] = this.z;\r\n        return offset;\r\n    }\r\n    directRead(memory, offset) {\r\n        this.x = memory[offset++];\r\n        this.y = memory[offset++];\r\n        this.z = memory[offset++];\r\n        return offset;\r\n    }\r\n    read(memory) {\r\n        this.x = memory.readFloat();\r\n        this.y = memory.readFloat();\r\n        this.z = memory.readFloat();\r\n        return memory.position;\r\n    }\r\n    write(memory) {\r\n        memory.writeFloat(this.x);\r\n        memory.writeFloat(this.y);\r\n        memory.writeFloat(this.z);\r\n        return memory.position;\r\n    }\r\n    isNullVector() {\r\n        return this.x == DirectMemory_1.DirectMemory.MIN_FLOAT32_VALUE &&\r\n            this.y == DirectMemory_1.DirectMemory.MIN_FLOAT32_VALUE &&\r\n            this.z == DirectMemory_1.DirectMemory.MIN_FLOAT32_VALUE;\r\n    }\r\n}\r\nVector3.SIZE = 3;\r\nVector3.NullVector = new Vector3(DirectMemory_1.DirectMemory.MIN_FLOAT32_VALUE, DirectMemory_1.DirectMemory.MIN_FLOAT32_VALUE, DirectMemory_1.DirectMemory.MIN_FLOAT32_VALUE);\r\nexports.Vector3 = Vector3;\r\n"
        },
        {
          "id": 2,
          "identifier": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-core\\src\\engine\\math\\Color.ts",
          "name": "./packages/render-core/src/engine/math/Color.ts",
          "index": 4,
          "index2": 2,
          "size": 3497,
          "cacheable": true,
          "built": false,
          "optional": false,
          "prefetched": false,
          "chunks": [
            0
          ],
          "assets": [],
          "issuer": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-client\\src\\display\\CanvasDisplay.ts",
          "issuerId": 23,
          "issuerName": "./packages/render-client/src/display/CanvasDisplay.ts",
          "failed": false,
          "errors": 0,
          "warnings": 0,
          "reasons": [
            {
              "moduleId": 0,
              "moduleIdentifier": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-core\\src\\engine\\scene\\materials\\Material.ts",
              "module": "./packages/render-core/src/engine/scene/materials/Material.ts",
              "moduleName": "./packages/render-core/src/engine/scene/materials/Material.ts",
              "type": "cjs require",
              "userRequest": "../../math/Color",
              "loc": "3:16-43"
            },
            {
              "moduleId": 10,
              "moduleIdentifier": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-core\\src\\engine\\scene\\materials\\Texture.ts",
              "module": "./packages/render-core/src/engine/scene/materials/Texture.ts",
              "moduleName": "./packages/render-core/src/engine/scene/materials/Texture.ts",
              "type": "cjs require",
              "userRequest": "../../math/Color",
              "loc": "3:16-43"
            },
            {
              "moduleId": 17,
              "moduleIdentifier": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-core\\src\\engine\\scene\\materials\\MaterialUtils.ts",
              "module": "./packages/render-core/src/engine/scene/materials/MaterialUtils.ts",
              "moduleName": "./packages/render-core/src/engine/scene/materials/MaterialUtils.ts",
              "type": "cjs require",
              "userRequest": "../../math/Color",
              "loc": "5:16-43"
            },
            {
              "moduleId": 19,
              "moduleIdentifier": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-core\\src\\engine\\scene\\shapes\\Mesh.ts",
              "module": "./packages/render-core/src/engine/scene/shapes/Mesh.ts",
              "moduleName": "./packages/render-core/src/engine/scene/shapes/Mesh.ts",
              "type": "cjs require",
              "userRequest": "../../math/Color",
              "loc": "6:16-43"
            },
            {
              "moduleId": 23,
              "moduleIdentifier": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-client\\src\\display\\CanvasDisplay.ts",
              "module": "./packages/render-client/src/display/CanvasDisplay.ts",
              "moduleName": "./packages/render-client/src/display/CanvasDisplay.ts",
              "type": "cjs require",
              "userRequest": "../../../render-core/src/engine/math/Color",
              "loc": "3:16-69"
            },
            {
              "moduleId": 25,
              "moduleIdentifier": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-core\\src\\engine\\scene\\SharedScene.ts",
              "module": "./packages/render-core/src/engine/scene/SharedScene.ts",
              "moduleName": "./packages/render-core/src/engine/scene/SharedScene.ts",
              "type": "cjs require",
              "userRequest": "../math/Color",
              "loc": "3:16-40"
            },
            {
              "moduleId": 38,
              "moduleIdentifier": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-client\\src\\render\\HeadlessRenderBase.ts",
              "module": "./packages/render-client/src/render/HeadlessRenderBase.ts",
              "moduleName": "./packages/render-client/src/render/HeadlessRenderBase.ts",
              "type": "cjs require",
              "userRequest": "../../../render-core/src/engine/math/Color",
              "loc": "3:16-69"
            },
            {
              "moduleId": 41,
              "moduleIdentifier": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-core\\src\\engine\\scene\\Scene.ts",
              "module": "./packages/render-core/src/engine/scene/Scene.ts",
              "moduleName": "./packages/render-core/src/engine/scene/Scene.ts",
              "type": "cjs require",
              "userRequest": "../math/Color",
              "loc": "3:16-40"
            },
            {
              "moduleId": 47,
              "moduleIdentifier": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-core\\src\\engine\\scene\\materials\\ClearMaterial.ts",
              "module": "./packages/render-core/src/engine/scene/materials/ClearMaterial.ts",
              "moduleName": "./packages/render-core/src/engine/scene/materials/ClearMaterial.ts",
              "type": "cjs require",
              "userRequest": "../../math/Color",
              "loc": "4:16-43"
            },
            {
              "moduleId": 52,
              "moduleIdentifier": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-client\\src\\views\\GIJSView.ts",
              "module": "./packages/render-client/src/views/GIJSView.ts",
              "moduleName": "./packages/render-client/src/views/GIJSView.ts",
              "type": "cjs require",
              "userRequest": "../../../render-core/src/engine/math/Color",
              "loc": "4:16-69"
            }
          ],
          "usedExports": true,
          "providedExports": null,
          "optimizationBailout": [],
          "depth": 2,
          "source": "\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nclass Color {\r\n    constructor(r = 0, g = 0, b = 0) {\r\n        this.r = r;\r\n        this.g = g;\r\n        this.b = b;\r\n    }\r\n    directWrite(mem, offset) {\r\n        mem[offset++] = this.r;\r\n        mem[offset++] = this.g;\r\n        mem[offset++] = this.b;\r\n        return offset;\r\n    }\r\n    directRead(mem, offset) {\r\n        this.r = mem[offset++];\r\n        this.g = mem[offset++];\r\n        this.b = mem[offset++];\r\n        return offset;\r\n    }\r\n    read(memory) {\r\n        this.r = memory.readFloat();\r\n        this.g = memory.readFloat();\r\n        this.b = memory.readFloat();\r\n        return memory.position;\r\n    }\r\n    write(memory) {\r\n        memory.writeFloat(this.r);\r\n        memory.writeFloat(this.g);\r\n        memory.writeFloat(this.b);\r\n        return memory.position;\r\n    }\r\n    static fromJson(color) {\r\n        if (color) {\r\n            return new Color(color.r, color.g, color.b);\r\n        }\r\n        else {\r\n            return null;\r\n        }\r\n    }\r\n    static hexColor(hex) {\r\n        var red = ((hex >> 16) & 255) / 255;\r\n        var green = ((hex >> 8) & 255) / 255;\r\n        var blue = (hex & 255) / 255;\r\n        return new Color(red, green, blue).pow(2.2);\r\n    }\r\n    static newColor(c) {\r\n        return new Color(c.r / 65535, c.g / 65535, c.b / 65535);\r\n    }\r\n    RGBA() {\r\n        let a = this;\r\n        let _c = new Uint8Array(3);\r\n        _c[0] = Math.max(0, Math.min(255, a.r * 255));\r\n        _c[1] = Math.max(0, Math.min(255, a.g * 255));\r\n        _c[2] = Math.max(0, Math.min(255, a.b * 255));\r\n        return { r: _c[0], g: _c[1], b: _c[2], a: 255 };\r\n    }\r\n    isBlack() {\r\n        return this.r === 0 && this.g === 0 && this.b === 0;\r\n    }\r\n    isWhite() {\r\n        return this.r === 1 && this.g === 1 && this.b === 1;\r\n    }\r\n    add(b) {\r\n        return new Color(this.r + b.r, this.g + b.g, this.b + b.b);\r\n    }\r\n    sub(b) {\r\n        return new Color(this.r - b.r, this.g - b.g, this.b - b.b);\r\n    }\r\n    mul(b) {\r\n        return new Color(this.r * b.r, this.g * b.g, this.b * b.b);\r\n    }\r\n    mulScalar(b) {\r\n        return new Color(this.r * b, this.g * b, this.b * b);\r\n    }\r\n    divScalar(b) {\r\n        return new Color(this.r / b, this.g / b, this.b / b);\r\n    }\r\n    min(b) {\r\n        return new Color(Math.min(this.r, b.r), Math.min(this.g, b.g), Math.min(this.b, b.b));\r\n    }\r\n    max(b) {\r\n        return new Color(Math.max(this.r, b.r), Math.max(this.g, b.g), Math.max(this.b, b.b));\r\n    }\r\n    pow(b) {\r\n        return new Color(Math.pow(this.r, b), Math.pow(this.g, b), Math.pow(this.b, b));\r\n    }\r\n    mix(b, pct) {\r\n        let a = this.mulScalar(1 - pct);\r\n        b = b.mulScalar(pct);\r\n        return a.add(b);\r\n    }\r\n    set(r, g, b) {\r\n        this.r = r;\r\n        this.g = g;\r\n        this.b = b;\r\n        return this;\r\n    }\r\n    clone() {\r\n        return new Color(this.r, this.g, this.b);\r\n    }\r\n    static random() {\r\n        return new Color(Math.random(), Math.random(), Math.random());\r\n    }\r\n    static randomBrightColor() {\r\n        var i = Math.round(Math.random() * Color.brightColors.length);\r\n        return Color.brightColors[i];\r\n    }\r\n}\r\nColor.SIZE = 3;\r\nColor.brightColors = [\r\n    Color.hexColor(0xFF00FF),\r\n    Color.hexColor(0x84FF00),\r\n    Color.hexColor(0xFF0084),\r\n    Color.hexColor(0x00FFFF),\r\n    Color.hexColor(0x00FF84),\r\n    Color.hexColor(0xDD40FF),\r\n    Color.hexColor(0xFFFF00)\r\n];\r\nexports.Color = Color;\r\n"
        },
        {
          "id": 3,
          "identifier": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-core\\src\\engine\\math\\Hit.ts",
          "name": "./packages/render-core/src/engine/math/Hit.ts",
          "index": 19,
          "index2": 14,
          "size": 1118,
          "cacheable": true,
          "built": false,
          "optional": false,
          "prefetched": false,
          "chunks": [
            0
          ],
          "assets": [],
          "issuer": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-core\\src\\engine\\scene\\shapes\\Cube.ts",
          "issuerId": 16,
          "issuerName": "./packages/render-core/src/engine/scene/shapes/Cube.ts",
          "failed": false,
          "errors": 0,
          "warnings": 0,
          "reasons": [
            {
              "moduleId": 11,
              "moduleIdentifier": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-core\\src\\engine\\scene\\shapes\\Triangle.ts",
              "module": "./packages/render-core/src/engine/scene/shapes/Triangle.ts",
              "moduleName": "./packages/render-core/src/engine/scene/shapes/Triangle.ts",
              "type": "cjs require",
              "userRequest": "../../math/Hit",
              "loc": "6:14-39"
            },
            {
              "moduleId": 11,
              "moduleIdentifier": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-core\\src\\engine\\scene\\shapes\\Triangle.ts",
              "module": "./packages/render-core/src/engine/scene/shapes/Triangle.ts",
              "moduleName": "./packages/render-core/src/engine/scene/shapes/Triangle.ts",
              "type": "cjs require",
              "userRequest": "../../math/Hit",
              "loc": "8:14-39"
            },
            {
              "moduleId": 16,
              "moduleIdentifier": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-core\\src\\engine\\scene\\shapes\\Cube.ts",
              "module": "./packages/render-core/src/engine/scene/shapes/Cube.ts",
              "moduleName": "./packages/render-core/src/engine/scene/shapes/Cube.ts",
              "type": "cjs require",
              "userRequest": "../../math/Hit",
              "loc": "7:14-39"
            },
            {
              "moduleId": 16,
              "moduleIdentifier": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-core\\src\\engine\\scene\\shapes\\Cube.ts",
              "module": "./packages/render-core/src/engine/scene/shapes/Cube.ts",
              "moduleName": "./packages/render-core/src/engine/scene/shapes/Cube.ts",
              "type": "cjs require",
              "userRequest": "../../math/Hit",
              "loc": "8:14-39"
            },
            {
              "moduleId": 18,
              "moduleIdentifier": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-core\\src\\engine\\scene\\shapes\\Sphere.ts",
              "module": "./packages/render-core/src/engine/scene/shapes/Sphere.ts",
              "moduleName": "./packages/render-core/src/engine/scene/shapes/Sphere.ts",
              "type": "cjs require",
              "userRequest": "../../math/Hit",
              "loc": "6:14-39"
            },
            {
              "moduleId": 18,
              "moduleIdentifier": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-core\\src\\engine\\scene\\shapes\\Sphere.ts",
              "module": "./packages/render-core/src/engine/scene/shapes/Sphere.ts",
              "moduleName": "./packages/render-core/src/engine/scene/shapes/Sphere.ts",
              "type": "cjs require",
              "userRequest": "../../math/Hit",
              "loc": "7:14-39"
            },
            {
              "moduleId": 26,
              "moduleIdentifier": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-core\\src\\engine\\scene\\tree\\Tree.ts",
              "module": "./packages/render-core/src/engine/scene/tree/Tree.ts",
              "moduleName": "./packages/render-core/src/engine/scene/tree/Tree.ts",
              "type": "cjs require",
              "userRequest": "../../math/Hit",
              "loc": "5:14-39"
            },
            {
              "moduleId": 29,
              "moduleIdentifier": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-core\\src\\engine\\scene\\tree\\SharedTree.ts",
              "module": "./packages/render-core/src/engine/scene/tree/SharedTree.ts",
              "moduleName": "./packages/render-core/src/engine/scene/tree/SharedTree.ts",
              "type": "cjs require",
              "userRequest": "../../math/Hit",
              "loc": "4:14-39"
            },
            {
              "moduleId": 30,
              "moduleIdentifier": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-core\\src\\engine\\scene\\tree\\SharedNode.ts",
              "module": "./packages/render-core/src/engine/scene/tree/SharedNode.ts",
              "moduleName": "./packages/render-core/src/engine/scene/tree/SharedNode.ts",
              "type": "cjs require",
              "userRequest": "../../math/Hit",
              "loc": "4:14-39"
            },
            {
              "moduleId": 42,
              "moduleIdentifier": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-core\\src\\engine\\scene\\tree\\Node.ts",
              "module": "./packages/render-core/src/engine/scene/tree/Node.ts",
              "moduleName": "./packages/render-core/src/engine/scene/tree/Node.ts",
              "type": "cjs require",
              "userRequest": "../../math/Hit",
              "loc": "4:14-39"
            }
          ],
          "usedExports": true,
          "providedExports": null,
          "optimizationBailout": [],
          "depth": 3,
          "source": "\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst Constants_1 = require(\"./Constants\");\r\nconst HitInfo_1 = require(\"./HitInfo\");\r\nconst Ray_1 = require(\"./Ray\");\r\nclass Hit {\r\n    constructor(shape, T, info) {\r\n        this.shape = shape;\r\n        this.T = T;\r\n        this.info = info;\r\n    }\r\n    ok() {\r\n        return this.T < Constants_1.INF;\r\n    }\r\n    getInfo(ray) {\r\n        if (this.info) {\r\n            return this.info;\r\n        }\r\n        let shape = this.shape;\r\n        let position = ray.position(this.T);\r\n        let normal = shape.getNormal(position);\r\n        let color = shape.getColor(position);\r\n        let material = shape.getMaterial(position);\r\n        let inside = false;\r\n        if (normal.dot(ray.direction) > 0) {\r\n            normal = normal.mulScalar(-1);\r\n            inside = true;\r\n        }\r\n        ray = new Ray_1.Ray(position, normal);\r\n        this.info = new HitInfo_1.HitInfo(shape, position, normal, ray, color, material, inside);\r\n        return this.info;\r\n    }\r\n}\r\nexports.Hit = Hit;\r\nexports.NoHit = new Hit(null, Constants_1.INF);\r\n"
        },
        {
          "id": 4,
          "identifier": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-core\\src\\engine\\scene\\materials\\Attenuation.ts",
          "name": "./packages/render-core/src/engine/scene/materials/Attenuation.ts",
          "index": 29,
          "index2": 22,
          "size": 2105,
          "cacheable": true,
          "built": false,
          "optional": false,
          "prefetched": false,
          "chunks": [
            0
          ],
          "assets": [],
          "issuer": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-core\\src\\engine\\scene\\materials\\Material.ts",
          "issuerId": 0,
          "issuerName": "./packages/render-core/src/engine/scene/materials/Material.ts",
          "failed": false,
          "errors": 0,
          "warnings": 0,
          "reasons": [
            {
              "moduleId": 0,
              "moduleIdentifier": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-core\\src\\engine\\scene\\materials\\Material.ts",
              "module": "./packages/render-core/src/engine/scene/materials/Material.ts",
              "moduleName": "./packages/render-core/src/engine/scene/materials/Material.ts",
              "type": "cjs require",
              "userRequest": "./Attenuation",
              "loc": "5:22-46"
            },
            {
              "moduleId": 0,
              "moduleIdentifier": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-core\\src\\engine\\scene\\materials\\Material.ts",
              "module": "./packages/render-core/src/engine/scene/materials/Material.ts",
              "moduleName": "./packages/render-core/src/engine/scene/materials/Material.ts",
              "type": "cjs require",
              "userRequest": "./Attenuation",
              "loc": "6:22-46"
            },
            {
              "moduleId": 17,
              "moduleIdentifier": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-core\\src\\engine\\scene\\materials\\MaterialUtils.ts",
              "module": "./packages/render-core/src/engine/scene/materials/MaterialUtils.ts",
              "moduleName": "./packages/render-core/src/engine/scene/materials/MaterialUtils.ts",
              "type": "cjs require",
              "userRequest": "./Attenuation",
              "loc": "7:22-46"
            },
            {
              "moduleId": 45,
              "moduleIdentifier": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-core\\src\\engine\\scene\\materials\\DiffuseMaterial.ts",
              "module": "./packages/render-core/src/engine/scene/materials/DiffuseMaterial.ts",
              "moduleName": "./packages/render-core/src/engine/scene/materials/DiffuseMaterial.ts",
              "type": "cjs require",
              "userRequest": "./Attenuation",
              "loc": "4:22-46"
            },
            {
              "moduleId": 46,
              "moduleIdentifier": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-core\\src\\engine\\scene\\materials\\SpecularMaterial.ts",
              "module": "./packages/render-core/src/engine/scene/materials/SpecularMaterial.ts",
              "moduleName": "./packages/render-core/src/engine/scene/materials/SpecularMaterial.ts",
              "type": "cjs require",
              "userRequest": "./Attenuation",
              "loc": "4:22-46"
            },
            {
              "moduleId": 47,
              "moduleIdentifier": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-core\\src\\engine\\scene\\materials\\ClearMaterial.ts",
              "module": "./packages/render-core/src/engine/scene/materials/ClearMaterial.ts",
              "moduleName": "./packages/render-core/src/engine/scene/materials/ClearMaterial.ts",
              "type": "cjs require",
              "userRequest": "./Attenuation",
              "loc": "5:22-46"
            },
            {
              "moduleId": 48,
              "moduleIdentifier": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-core\\src\\engine\\scene\\materials\\GlossyMaterial.ts",
              "module": "./packages/render-core/src/engine/scene/materials/GlossyMaterial.ts",
              "moduleName": "./packages/render-core/src/engine/scene/materials/GlossyMaterial.ts",
              "type": "cjs require",
              "userRequest": "./Attenuation",
              "loc": "4:22-46"
            },
            {
              "moduleId": 52,
              "moduleIdentifier": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-client\\src\\views\\GIJSView.ts",
              "module": "./packages/render-client/src/views/GIJSView.ts",
              "moduleName": "./packages/render-client/src/views/GIJSView.ts",
              "type": "cjs require",
              "userRequest": "../../../render-core/src/engine/scene/materials/Attenuation",
              "loc": "16:22-92"
            },
            {
              "moduleId": 52,
              "moduleIdentifier": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-client\\src\\views\\GIJSView.ts",
              "module": "./packages/render-client/src/views/GIJSView.ts",
              "moduleName": "./packages/render-client/src/views/GIJSView.ts",
              "type": "cjs require",
              "userRequest": "../../../render-core/src/engine/scene/materials/Attenuation",
              "loc": "17:22-92"
            }
          ],
          "usedExports": true,
          "providedExports": null,
          "optimizationBailout": [],
          "depth": 2,
          "source": "\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nclass Attenuation {\r\n    constructor(constant = 1, linear = 0, quadratic = 0) {\r\n        this.constant = constant;\r\n        this.linear = linear;\r\n        this.quadratic = quadratic;\r\n    }\r\n    static fromJson(attenuation) {\r\n        if (!attenuation) {\r\n            return exports.NoAttenuation;\r\n        }\r\n        else {\r\n            return new Attenuation(attenuation.constant, attenuation.linear, attenuation.quadratic);\r\n        }\r\n    }\r\n    compute(d) {\r\n        return 1 / (this.constant + this.linear * d + this.quadratic * d * d);\r\n    }\r\n    set(attenation) {\r\n        this.constant = attenation.constant;\r\n        this.linear = attenation.linear;\r\n        this.quadratic = attenation.quadratic;\r\n        return this;\r\n    }\r\n    clone() {\r\n        return new Attenuation(this.constant, this.linear, this.quadratic);\r\n    }\r\n    directWrite(mem, offset) {\r\n        mem[offset++] = this.constant;\r\n        mem[offset++] = this.linear;\r\n        mem[offset++] = this.quadratic;\r\n        return offset;\r\n    }\r\n    directRead(mem, offset) {\r\n        this.constant = mem[offset++];\r\n        this.linear = mem[offset++];\r\n        this.quadratic = mem[offset++];\r\n        return offset;\r\n    }\r\n    read(memory) {\r\n        this.constant = memory.readFloat();\r\n        this.linear = memory.readFloat();\r\n        this.quadratic = memory.readFloat();\r\n        return memory.position;\r\n    }\r\n    write(memory) {\r\n        memory.writeFloat(this.constant);\r\n        memory.writeFloat(this.linear);\r\n        memory.writeFloat(this.quadratic);\r\n        return memory.position;\r\n    }\r\n}\r\nAttenuation.SIZE = 3;\r\nexports.Attenuation = Attenuation;\r\nexports.NoAttenuation = new Attenuation(1, 0, 0);\r\nclass LinearAttenuation extends Attenuation {\r\n    constructor(value) {\r\n        super(1, value, 0);\r\n    }\r\n}\r\nexports.LinearAttenuation = LinearAttenuation;\r\nclass QuadraticAttenuation extends Attenuation {\r\n    constructor(value) {\r\n        super(1, 0, value);\r\n    }\r\n}\r\nexports.QuadraticAttenuation = QuadraticAttenuation;\r\n"
        },
        {
          "id": 5,
          "identifier": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-core\\src\\engine\\scene\\shapes\\Box.ts",
          "name": "./packages/render-core/src/engine/scene/shapes/Box.ts",
          "index": 16,
          "index2": 12,
          "size": 3607,
          "cacheable": true,
          "built": true,
          "optional": false,
          "prefetched": false,
          "chunks": [
            0
          ],
          "assets": [],
          "issuer": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-core\\src\\engine\\scene\\SharedScene.ts",
          "issuerId": 25,
          "issuerName": "./packages/render-core/src/engine/scene/SharedScene.ts",
          "failed": false,
          "errors": 1,
          "warnings": 0,
          "reasons": [
            {
              "moduleId": 11,
              "moduleIdentifier": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-core\\src\\engine\\scene\\shapes\\Triangle.ts",
              "module": "./packages/render-core/src/engine/scene/shapes/Triangle.ts",
              "moduleName": "./packages/render-core/src/engine/scene/shapes/Triangle.ts",
              "type": "cjs require",
              "userRequest": "./Box",
              "loc": "4:14-30"
            },
            {
              "moduleId": 12,
              "moduleIdentifier": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-core\\src\\engine\\math\\Matrix4.ts",
              "module": "./packages/render-core/src/engine/math/Matrix4.ts",
              "moduleName": "./packages/render-core/src/engine/math/Matrix4.ts",
              "type": "cjs require",
              "userRequest": "../scene/shapes/Box",
              "loc": "4:14-44"
            },
            {
              "moduleId": 16,
              "moduleIdentifier": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-core\\src\\engine\\scene\\shapes\\Cube.ts",
              "module": "./packages/render-core/src/engine/scene/shapes/Cube.ts",
              "moduleName": "./packages/render-core/src/engine/scene/shapes/Cube.ts",
              "type": "cjs require",
              "userRequest": "./Box",
              "loc": "5:14-30"
            },
            {
              "moduleId": 18,
              "moduleIdentifier": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-core\\src\\engine\\scene\\shapes\\Sphere.ts",
              "module": "./packages/render-core/src/engine/scene/shapes/Sphere.ts",
              "moduleName": "./packages/render-core/src/engine/scene/shapes/Sphere.ts",
              "type": "cjs require",
              "userRequest": "./Box",
              "loc": "5:14-30"
            },
            {
              "moduleId": 19,
              "moduleIdentifier": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-core\\src\\engine\\scene\\shapes\\Mesh.ts",
              "module": "./packages/render-core/src/engine/scene/shapes/Mesh.ts",
              "moduleName": "./packages/render-core/src/engine/scene/shapes/Mesh.ts",
              "type": "cjs require",
              "userRequest": "./Box",
              "loc": "9:14-30"
            },
            {
              "moduleId": 25,
              "moduleIdentifier": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-core\\src\\engine\\scene\\SharedScene.ts",
              "module": "./packages/render-core/src/engine/scene/SharedScene.ts",
              "moduleName": "./packages/render-core/src/engine/scene/SharedScene.ts",
              "type": "cjs require",
              "userRequest": "./shapes/Box",
              "loc": "9:14-37"
            },
            {
              "moduleId": 26,
              "moduleIdentifier": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-core\\src\\engine\\scene\\tree\\Tree.ts",
              "module": "./packages/render-core/src/engine/scene/tree/Tree.ts",
              "moduleName": "./packages/render-core/src/engine/scene/tree/Tree.ts",
              "type": "cjs require",
              "userRequest": "../shapes/Box",
              "loc": "3:14-38"
            },
            {
              "moduleId": 29,
              "moduleIdentifier": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-core\\src\\engine\\scene\\tree\\SharedTree.ts",
              "module": "./packages/render-core/src/engine/scene/tree/SharedTree.ts",
              "moduleName": "./packages/render-core/src/engine/scene/tree/SharedTree.ts",
              "type": "cjs require",
              "userRequest": "../shapes/Box",
              "loc": "3:14-38"
            }
          ],
          "usedExports": true,
          "providedExports": null,
          "optimizationBailout": [],
          "depth": 3,
          "source": "\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst Vector3_1 = require(\"../../math/Vector3\");\r\nconst Axis_1 = require(\"../Axis\");\r\nclass Box {\r\n    constructor(min = new Vector3_1.Vector3(), max = new Vector3_1.Vector3()) {\r\n        this.min = min;\r\n        this.max = max;\r\n        this.memorySize = Box.SIZE;\r\n    }\r\n    directWrite(memory, offset) {\r\n        offset = this.min.directWrite(memory, offset);\r\n        offset = this.max.directWrite(memory, offset);\r\n        return offset;\r\n    }\r\n    directRead(memory, offset) {\r\n        offset = this.min.directRead(memory, offset);\r\n        offset = this.max.directRead(memory, offset);\r\n        return offset;\r\n    }\r\n    read(memory) {\r\n        this.min.read(memory);\r\n        this.max.read(memory);\r\n        return memory.position;\r\n    }\r\n    write(memory) {\r\n        this.min.write(memory);\r\n        this.max.write(memory);\r\n        return memory.position;\r\n    }\r\n    static fromJson(box) {\r\n        return new Box(Vector3_1.Vector3.fromJson(box.min), Vector3_1.Vector3.fromJson(box.max));\r\n    }\r\n    static boxForShapes(shapes) {\r\n        if (shapes.length == 0) {\r\n            return new Box();\r\n        }\r\n        var box = shapes[0].box;\r\n        shapes.forEach(function (shape) {\r\n            box = box.extend(shape.box);\r\n        });\r\n        return box;\r\n    }\r\n    static boxForTriangles(shapes) {\r\n        if (shapes.length == 0) {\r\n            return new Box();\r\n        }\r\n        var box = shapes[0].box;\r\n        shapes.forEach(function (shape) {\r\n            box = box.extend(shape.box);\r\n        });\r\n        return box;\r\n    }\r\n    anchor(anchor) {\r\n        return this.min.add(this.size().mul(anchor));\r\n    }\r\n    center() {\r\n        return this.anchor(new Vector3_1.Vector3(0.5, 0.5, 0.5));\r\n    }\r\n    size() {\r\n        return this.max.sub(this.min);\r\n    }\r\n    extend(b) {\r\n        return new Box(this.min.min(b.min), this.max.max(b.max));\r\n    }\r\n    intersect(r) {\r\n        var x1 = (this.min.x - r.origin.x) / r.direction.x;\r\n        var y1 = (this.min.y - r.origin.y) / r.direction.y;\r\n        var z1 = (this.min.z - r.origin.z) / r.direction.z;\r\n        var x2 = (this.max.x - r.origin.x) / r.direction.x;\r\n        var y2 = (this.max.y - r.origin.y) / r.direction.y;\r\n        var z2 = (this.max.z - r.origin.z) / r.direction.z;\r\n        if (x1 > x2) {\r\n            let _x1 = x1;\r\n            x1 = x2;\r\n            x2 = _x1;\r\n        }\r\n        if (y1 > y2) {\r\n            let _y1 = y1;\r\n            y1 = y2;\r\n            y2 = _y1;\r\n        }\r\n        if (z1 > z2) {\r\n            let _z1 = z1;\r\n            z1 = z2;\r\n            z2 = _z1;\r\n        }\r\n        var t1 = Math.max(Math.max(x1, y1), z1);\r\n        var t2 = Math.min(Math.min(x2, y2), z2);\r\n        return { min: t1, max: t2 };\r\n    }\r\n    partition(axis, point) {\r\n        var left;\r\n        var right;\r\n        switch (axis) {\r\n            case Axis_1.Axis.AxisX:\r\n                left = this.min.x <= point;\r\n                right = this.max.x >= point;\r\n                break;\r\n            case Axis_1.Axis.AxisY:\r\n                left = this.min.y <= point;\r\n                right = this.max.y >= point;\r\n                break;\r\n            case Axis_1.Axis.AxisZ:\r\n                left = this.min.z <= point;\r\n                right = this.max.z >= point;\r\n                break;\r\n        }\r\n        return { left: left, right: right };\r\n    }\r\n    toString() {\r\n        return \"Box(min:\" + this.min.toString() + \", max:\" + this.max.toString() + \")\";\r\n    }\r\n}\r\nBox.SIZE = Vector3_1.Vector3.SIZE * 2;\r\nexports.Box = Box;\r\n"
        },
        {
          "id": 6,
          "identifier": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-core\\src\\engine\\scene\\shapes\\Shape.ts",
          "name": "./packages/render-core/src/engine/scene/shapes/Shape.ts",
          "index": 23,
          "index2": 39,
          "size": 3749,
          "cacheable": true,
          "built": true,
          "optional": false,
          "prefetched": false,
          "chunks": [
            0
          ],
          "assets": [],
          "issuer": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-core\\src\\engine\\scene\\SharedScene.ts",
          "issuerId": 25,
          "issuerName": "./packages/render-core/src/engine/scene/SharedScene.ts",
          "failed": false,
          "errors": 28,
          "warnings": 0,
          "reasons": [
            {
              "moduleId": 11,
              "moduleIdentifier": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-core\\src\\engine\\scene\\shapes\\Triangle.ts",
              "module": "./packages/render-core/src/engine/scene/shapes/Triangle.ts",
              "moduleName": "./packages/render-core/src/engine/scene/shapes/Triangle.ts",
              "type": "cjs require",
              "userRequest": "./Shape",
              "loc": "10:16-34"
            },
            {
              "moduleId": 16,
              "moduleIdentifier": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-core\\src\\engine\\scene\\shapes\\Cube.ts",
              "module": "./packages/render-core/src/engine/scene/shapes/Cube.ts",
              "moduleName": "./packages/render-core/src/engine/scene/shapes/Cube.ts",
              "type": "cjs require",
              "userRequest": "./Shape",
              "loc": "9:16-34"
            },
            {
              "moduleId": 18,
              "moduleIdentifier": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-core\\src\\engine\\scene\\shapes\\Sphere.ts",
              "module": "./packages/render-core/src/engine/scene/shapes/Sphere.ts",
              "moduleName": "./packages/render-core/src/engine/scene/shapes/Sphere.ts",
              "type": "cjs require",
              "userRequest": "./Shape",
              "loc": "8:16-34"
            },
            {
              "moduleId": 19,
              "moduleIdentifier": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-core\\src\\engine\\scene\\shapes\\Mesh.ts",
              "module": "./packages/render-core/src/engine/scene/shapes/Mesh.ts",
              "moduleName": "./packages/render-core/src/engine/scene/shapes/Mesh.ts",
              "type": "cjs require",
              "userRequest": "./Shape",
              "loc": "10:16-34"
            },
            {
              "moduleId": 21,
              "moduleIdentifier": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-core\\src\\engine\\scene\\shapes\\TransformedShape.ts",
              "module": "./packages/render-core/src/engine/scene/shapes/TransformedShape.ts",
              "moduleName": "./packages/render-core/src/engine/scene/shapes/TransformedShape.ts",
              "type": "cjs require",
              "userRequest": "./Shape",
              "loc": "4:16-34"
            },
            {
              "moduleId": 25,
              "moduleIdentifier": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-core\\src\\engine\\scene\\SharedScene.ts",
              "module": "./packages/render-core/src/engine/scene/SharedScene.ts",
              "moduleName": "./packages/render-core/src/engine/scene/SharedScene.ts",
              "type": "cjs require",
              "userRequest": "./shapes/Shape",
              "loc": "6:16-41"
            },
            {
              "moduleId": 41,
              "moduleIdentifier": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-core\\src\\engine\\scene\\Scene.ts",
              "module": "./packages/render-core/src/engine/scene/Scene.ts",
              "moduleName": "./packages/render-core/src/engine/scene/Scene.ts",
              "type": "cjs require",
              "userRequest": "./shapes/Shape",
              "loc": "8:16-41"
            }
          ],
          "usedExports": true,
          "providedExports": null,
          "optimizationBailout": [],
          "depth": 3,
          "source": "\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst Cube_1 = require(\"./Cube\");\r\nconst Sphere_1 = require(\"./Sphere\");\r\nconst Mesh_1 = require(\"./Mesh\");\r\nconst Triangle_1 = require(\"./Triangle\");\r\nconst TransformedShape_1 = require(\"./TransformedShape\");\r\nvar ShapeType;\r\n(function (ShapeType) {\r\n    ShapeType[ShapeType[\"TRIANGLE\"] = 0] = \"TRIANGLE\";\r\n    ShapeType[ShapeType[\"CUBE\"] = 1] = \"CUBE\";\r\n    ShapeType[ShapeType[\"SPHERE\"] = 2] = \"SPHERE\";\r\n    ShapeType[ShapeType[\"MESH\"] = 3] = \"MESH\";\r\n    ShapeType[ShapeType[\"TRANSFORMED_SHAPE\"] = 4] = \"TRANSFORMED_SHAPE\";\r\n})(ShapeType = exports.ShapeType || (exports.ShapeType = {}));\r\nfunction ShapesfromJson(shapes) {\r\n    var _shapes = [];\r\n    shapes.forEach(function (shape) {\r\n        switch (shape.type) {\r\n            case ShapeType.CUBE:\r\n                _shapes.push(Cube_1.Cube.fromJson(shape));\r\n                break;\r\n            case ShapeType.SPHERE:\r\n                _shapes.push(Sphere_1.Sphere.fromJson(shape));\r\n                break;\r\n            case ShapeType.MESH:\r\n                _shapes.push(Mesh_1.Mesh.fromJson(shape));\r\n                break;\r\n            case ShapeType.TRANSFORMED_SHAPE:\r\n                _shapes.push(TransformedShape_1.TransformedShape.fromJson(shape));\r\n                break;\r\n            case ShapeType.TRIANGLE:\r\n                _shapes.push(Triangle_1.Triangle.fromJson(shape));\r\n                break;\r\n        }\r\n    });\r\n    return _shapes;\r\n}\r\nexports.ShapesfromJson = ShapesfromJson;\r\nfunction ShapefromJson(shape) {\r\n    switch (shape.type) {\r\n        case ShapeType.CUBE:\r\n            return Cube_1.Cube.fromJson(shape);\r\n        case ShapeType.SPHERE:\r\n            return Sphere_1.Sphere.fromJson(shape);\r\n        case ShapeType.MESH:\r\n            return Mesh_1.Mesh.fromJson(shape);\r\n        case ShapeType.TRANSFORMED_SHAPE:\r\n            return TransformedShape_1.TransformedShape.fromJson(shape);\r\n        case ShapeType.TRIANGLE:\r\n            return Triangle_1.Triangle.fromJson(shape);\r\n    }\r\n}\r\nexports.ShapefromJson = ShapefromJson;\r\nfunction directRestoreShape(memory, offset, container) {\r\n    var type = memory[offset++];\r\n    switch (type) {\r\n        case ShapeType.CUBE:\r\n            var cube = new Cube_1.Cube();\r\n            container.push(cube);\r\n            return cube.directRead(memory, offset);\r\n        case ShapeType.SPHERE:\r\n            var sphere = new Sphere_1.Sphere();\r\n            container.push(sphere);\r\n            return sphere.directRead(memory, offset);\r\n        case ShapeType.MESH:\r\n            var mesh = new Mesh_1.Mesh();\r\n            container.push(mesh);\r\n            return mesh.directRead(memory, offset);\r\n        case ShapeType.TRANSFORMED_SHAPE:\r\n            var shape = new TransformedShape_1.TransformedShape();\r\n            container.push(shape);\r\n            return shape.directRead(memory, offset);\r\n    }\r\n}\r\nexports.directRestoreShape = directRestoreShape;\r\nfunction restoreShape(memory, container) {\r\n    var type = memory.readByte();\r\n    switch (type) {\r\n        case ShapeType.CUBE:\r\n            var cube = new Cube_1.Cube();\r\n            container.push(cube);\r\n            return cube.read(memory);\r\n        case ShapeType.SPHERE:\r\n            var sphere = new Sphere_1.Sphere();\r\n            container.push(sphere);\r\n            return sphere.read(memory);\r\n        case ShapeType.MESH:\r\n            var mesh = new Mesh_1.Mesh();\r\n            container.push(mesh);\r\n            return mesh.read(memory);\r\n        case ShapeType.TRANSFORMED_SHAPE:\r\n            var shape = new TransformedShape_1.TransformedShape();\r\n            container.push(shape);\r\n            return shape.read(memory);\r\n    }\r\n}\r\nexports.restoreShape = restoreShape;\r\n"
        },
        {
          "id": 7,
          "identifier": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-core\\src\\engine\\utils\\MapUtils.ts",
          "name": "./packages/render-core/src/engine/utils/MapUtils.ts",
          "index": 21,
          "index2": 15,
          "size": 580,
          "cacheable": true,
          "built": false,
          "optional": false,
          "prefetched": false,
          "chunks": [
            0
          ],
          "assets": [],
          "issuer": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-core\\src\\engine\\scene\\Scene.ts",
          "issuerId": 41,
          "issuerName": "./packages/render-core/src/engine/scene/Scene.ts",
          "failed": false,
          "errors": 0,
          "warnings": 0,
          "reasons": [
            {
              "moduleId": 19,
              "moduleIdentifier": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-core\\src\\engine\\scene\\shapes\\Mesh.ts",
              "module": "./packages/render-core/src/engine/scene/shapes/Mesh.ts",
              "moduleName": "./packages/render-core/src/engine/scene/shapes/Mesh.ts",
              "type": "cjs require",
              "userRequest": "../../utils/MapUtils",
              "loc": "7:19-50"
            },
            {
              "moduleId": 30,
              "moduleIdentifier": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-core\\src\\engine\\scene\\tree\\SharedNode.ts",
              "module": "./packages/render-core/src/engine/scene/tree/SharedNode.ts",
              "moduleName": "./packages/render-core/src/engine/scene/tree/SharedNode.ts",
              "type": "cjs require",
              "userRequest": "../../utils/MapUtils",
              "loc": "5:19-50"
            },
            {
              "moduleId": 30,
              "moduleIdentifier": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-core\\src\\engine\\scene\\tree\\SharedNode.ts",
              "module": "./packages/render-core/src/engine/scene/tree/SharedNode.ts",
              "moduleName": "./packages/render-core/src/engine/scene/tree/SharedNode.ts",
              "type": "cjs require",
              "userRequest": "../../utils/MapUtils",
              "loc": "6:19-50"
            },
            {
              "moduleId": 41,
              "moduleIdentifier": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-core\\src\\engine\\scene\\Scene.ts",
              "module": "./packages/render-core/src/engine/scene/Scene.ts",
              "moduleName": "./packages/render-core/src/engine/scene/Scene.ts",
              "type": "cjs require",
              "userRequest": "../utils/MapUtils",
              "loc": "5:19-47"
            },
            {
              "moduleId": 42,
              "moduleIdentifier": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-core\\src\\engine\\scene\\tree\\Node.ts",
              "module": "./packages/render-core/src/engine/scene/tree/Node.ts",
              "moduleName": "./packages/render-core/src/engine/scene/tree/Node.ts",
              "type": "cjs require",
              "userRequest": "../../utils/MapUtils",
              "loc": "5:19-50"
            },
            {
              "moduleId": 42,
              "moduleIdentifier": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-core\\src\\engine\\scene\\tree\\Node.ts",
              "module": "./packages/render-core/src/engine/scene/tree/Node.ts",
              "moduleName": "./packages/render-core/src/engine/scene/tree/Node.ts",
              "type": "cjs require",
              "userRequest": "../../utils/MapUtils",
              "loc": "6:19-50"
            }
          ],
          "usedExports": true,
          "providedExports": null,
          "optimizationBailout": [],
          "depth": 3,
          "source": "\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nfunction append(slice, ...elements) {\r\n    if (slice == undefined) {\r\n        return elements;\r\n    }\r\n    else {\r\n        slice.push.apply(slice, elements);\r\n    }\r\n    return slice;\r\n}\r\nexports.append = append;\r\nfunction sortAscending(slice) {\r\n    slice.sort(function (a, b) {\r\n        return a - b;\r\n    });\r\n}\r\nexports.sortAscending = sortAscending;\r\nfunction sortDescending(slice) {\r\n    slice.sort(function (a, b) {\r\n        return b - a;\r\n    });\r\n}\r\nexports.sortDescending = sortDescending;\r\n"
        },
        {
          "id": 8,
          "identifier": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-core\\src\\engine\\math\\Ray.ts",
          "name": "./packages/render-core/src/engine/math/Ray.ts",
          "index": 11,
          "index2": 9,
          "size": 3012,
          "cacheable": true,
          "built": false,
          "optional": false,
          "prefetched": false,
          "chunks": [
            0
          ],
          "assets": [],
          "issuer": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-core\\src\\engine\\scene\\Camera.ts",
          "issuerId": 24,
          "issuerName": "./packages/render-core/src/engine/scene/Camera.ts",
          "failed": false,
          "errors": 0,
          "warnings": 0,
          "reasons": [
            {
              "moduleId": 3,
              "moduleIdentifier": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-core\\src\\engine\\math\\Hit.ts",
              "module": "./packages/render-core/src/engine/math/Hit.ts",
              "moduleName": "./packages/render-core/src/engine/math/Hit.ts",
              "type": "cjs require",
              "userRequest": "./Ray",
              "loc": "5:14-30"
            },
            {
              "moduleId": 12,
              "moduleIdentifier": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-core\\src\\engine\\math\\Matrix4.ts",
              "module": "./packages/render-core/src/engine/math/Matrix4.ts",
              "moduleName": "./packages/render-core/src/engine/math/Matrix4.ts",
              "type": "cjs require",
              "userRequest": "./Ray",
              "loc": "5:14-30"
            },
            {
              "moduleId": 21,
              "moduleIdentifier": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-core\\src\\engine\\scene\\shapes\\TransformedShape.ts",
              "module": "./packages/render-core/src/engine/scene/shapes/TransformedShape.ts",
              "moduleName": "./packages/render-core/src/engine/scene/shapes/TransformedShape.ts",
              "type": "cjs require",
              "userRequest": "../../math/Ray",
              "loc": "3:14-39"
            },
            {
              "moduleId": 24,
              "moduleIdentifier": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-core\\src\\engine\\scene\\Camera.ts",
              "module": "./packages/render-core/src/engine/scene/Camera.ts",
              "moduleName": "./packages/render-core/src/engine/scene/Camera.ts",
              "type": "cjs require",
              "userRequest": "../math/Ray",
              "loc": "4:14-36"
            },
            {
              "moduleId": 41,
              "moduleIdentifier": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-core\\src\\engine\\scene\\Scene.ts",
              "module": "./packages/render-core/src/engine/scene/Scene.ts",
              "moduleName": "./packages/render-core/src/engine/scene/Scene.ts",
              "type": "cjs require",
              "userRequest": "../math/Ray",
              "loc": "7:14-36"
            }
          ],
          "usedExports": true,
          "providedExports": null,
          "optimizationBailout": [],
          "depth": 3,
          "source": "\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst Vector3_1 = require(\"./Vector3\");\r\nconst Constants_1 = require(\"./Constants\");\r\nclass Ray {\r\n    constructor(origin = new Vector3_1.Vector3(), direction = new Vector3_1.Vector3()) {\r\n        this.origin = origin;\r\n        this.direction = direction;\r\n        this.data = new Float32Array([\r\n            origin.x, origin.y, origin.z,\r\n            direction.x, direction.y, direction.z\r\n        ]);\r\n    }\r\n    position(t) {\r\n        return this.origin.add(this.direction.mulScalar(t));\r\n    }\r\n    reflect(i) {\r\n        return new Ray(this.origin, this.direction.reflect(i.direction));\r\n    }\r\n    Refract(i, n1, n2) {\r\n        return new Ray(this.origin, this.direction.refract(i.direction, n1, n2));\r\n    }\r\n    reflectance(i, n1, n2) {\r\n        return this.direction.reflectance(i.direction, n1, n2);\r\n    }\r\n    weightedBounce(u, v) {\r\n        var m1 = Math.sqrt(u);\r\n        var m2 = Math.sqrt(1 - u);\r\n        var a = v * 2 * Math.PI;\r\n        var q = new Vector3_1.Vector3(u - 0.5, v - 0.5, u + v - 1);\r\n        var s = this.direction.cross(q.normalize());\r\n        var t = this.direction.cross(s);\r\n        var d = new Vector3_1.Vector3();\r\n        d = d.add(s.mulScalar(m1 * Math.cos(a)));\r\n        d = d.add(t.mulScalar(m1 * Math.sin(a)));\r\n        d = d.add(this.direction.mulScalar(m2));\r\n        return new Ray(this.origin, d);\r\n    }\r\n    coneBounce(theta, u, v) {\r\n        if (theta < Constants_1.EPS) {\r\n            return this;\r\n        }\r\n        theta = theta * (1 - (2 * Math.acos(u) / Math.PI));\r\n        var m1 = Math.sin(theta);\r\n        var m2 = Math.cos(theta);\r\n        var a = v * 2 * Math.PI;\r\n        var s = this.direction.cross(this.direction.minAxis());\r\n        var t = this.direction.cross(s);\r\n        var d = new Vector3_1.Vector3();\r\n        d = d.add(s.mulScalar(m1 * Math.cos(a)));\r\n        d = d.add(t.mulScalar(m1 * Math.sin(a)));\r\n        d = d.add(this.direction.mulScalar(m2));\r\n        return new Ray(this.origin, d);\r\n    }\r\n    bounce(info, p, u, v) {\r\n        var n = info.ray;\r\n        var n1 = 1.0;\r\n        var n2 = info.material.ior;\r\n        if (info.inside) {\r\n            var _n1 = n1;\r\n            n1 = n2;\r\n            n2 = _n1;\r\n        }\r\n        if (p < n.reflectance(this, n1, n2)) {\r\n            var reflected = n.reflect(this);\r\n            var ray = reflected.coneBounce(info.material.gloss, u, v);\r\n            return { ray: ray, reflected: true };\r\n        }\r\n        else if (info.material.transparent) {\r\n            var refracted = n.Refract(this, n1, n2);\r\n            var ray = refracted.coneBounce(info.material.gloss, u, v);\r\n            return { ray: ray, reflected: true };\r\n        }\r\n        else {\r\n            var ray = n.weightedBounce(u, v);\r\n            return { ray: ray, reflected: false };\r\n        }\r\n    }\r\n    toString() {\r\n        return \"Ray:\" + this.origin.toString() + \" -> \" + this.direction.toString();\r\n    }\r\n}\r\nexports.Ray = Ray;\r\n"
        },
        {
          "id": 9,
          "identifier": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-core\\src\\engine\\math\\Constants.ts",
          "name": "./packages/render-core/src/engine/math/Constants.ts",
          "index": 12,
          "index2": 8,
          "size": 309,
          "cacheable": true,
          "built": false,
          "optional": false,
          "prefetched": false,
          "chunks": [
            0
          ],
          "assets": [],
          "issuer": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-core\\src\\engine\\math\\Ray.ts",
          "issuerId": 8,
          "issuerName": "./packages/render-core/src/engine/math/Ray.ts",
          "failed": false,
          "errors": 0,
          "warnings": 0,
          "reasons": [
            {
              "moduleId": 3,
              "moduleIdentifier": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-core\\src\\engine\\math\\Hit.ts",
              "module": "./packages/render-core/src/engine/math/Hit.ts",
              "moduleName": "./packages/render-core/src/engine/math/Hit.ts",
              "type": "cjs require",
              "userRequest": "./Constants",
              "loc": "3:20-42"
            },
            {
              "moduleId": 8,
              "moduleIdentifier": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-core\\src\\engine\\math\\Ray.ts",
              "module": "./packages/render-core/src/engine/math/Ray.ts",
              "moduleName": "./packages/render-core/src/engine/math/Ray.ts",
              "type": "cjs require",
              "userRequest": "./Constants",
              "loc": "4:20-42"
            },
            {
              "moduleId": 11,
              "moduleIdentifier": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-core\\src\\engine\\scene\\shapes\\Triangle.ts",
              "module": "./packages/render-core/src/engine/scene/shapes/Triangle.ts",
              "moduleName": "./packages/render-core/src/engine/scene/shapes/Triangle.ts",
              "type": "cjs require",
              "userRequest": "../../math/Constants",
              "loc": "7:20-51"
            },
            {
              "moduleId": 16,
              "moduleIdentifier": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-core\\src\\engine\\scene\\shapes\\Cube.ts",
              "module": "./packages/render-core/src/engine/scene/shapes/Cube.ts",
              "moduleName": "./packages/render-core/src/engine/scene/shapes/Cube.ts",
              "type": "cjs require",
              "userRequest": "../../math/Constants",
              "loc": "6:20-51"
            }
          ],
          "usedExports": true,
          "providedExports": null,
          "optimizationBailout": [],
          "depth": 3,
          "source": "\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.INF = 1e9;\r\nexports.EPS = 1e-9;\r\nexports.shift = 64 - 11 - 1;\r\nexports.uvnan = 0x7FF8000000000001;\r\nexports.uvinf = 0x7FF0000000000000;\r\nexports.uvneginf = 0xFFF0000000000000;\r\nexports.mask = 0x7FF;\r\nexports.bias = 1023;\r\n"
        },
        {
          "id": 10,
          "identifier": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-core\\src\\engine\\scene\\materials\\Texture.ts",
          "name": "./packages/render-core/src/engine/scene/materials/Texture.ts",
          "index": 26,
          "index2": 21,
          "size": 7199,
          "cacheable": true,
          "built": false,
          "optional": false,
          "prefetched": false,
          "chunks": [
            0
          ],
          "assets": [],
          "issuer": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-core\\src\\engine\\scene\\SharedScene.ts",
          "issuerId": 25,
          "issuerName": "./packages/render-core/src/engine/scene/SharedScene.ts",
          "failed": false,
          "errors": 3,
          "warnings": 0,
          "reasons": [
            {
              "moduleId": 0,
              "moduleIdentifier": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-core\\src\\engine\\scene\\materials\\Material.ts",
              "module": "./packages/render-core/src/engine/scene/materials/Material.ts",
              "moduleName": "./packages/render-core/src/engine/scene/materials/Material.ts",
              "type": "cjs require",
              "userRequest": "./Texture",
              "loc": "4:18-38"
            },
            {
              "moduleId": 17,
              "moduleIdentifier": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-core\\src\\engine\\scene\\materials\\MaterialUtils.ts",
              "module": "./packages/render-core/src/engine/scene/materials/MaterialUtils.ts",
              "moduleName": "./packages/render-core/src/engine/scene/materials/MaterialUtils.ts",
              "type": "cjs require",
              "userRequest": "./Texture",
              "loc": "6:18-38"
            },
            {
              "moduleId": 25,
              "moduleIdentifier": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-core\\src\\engine\\scene\\SharedScene.ts",
              "module": "./packages/render-core/src/engine/scene/SharedScene.ts",
              "moduleName": "./packages/render-core/src/engine/scene/SharedScene.ts",
              "type": "cjs require",
              "userRequest": "./materials/Texture",
              "loc": "11:18-48"
            },
            {
              "moduleId": 52,
              "moduleIdentifier": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-client\\src\\views\\GIJSView.ts",
              "module": "./packages/render-client/src/views/GIJSView.ts",
              "moduleName": "./packages/render-client/src/views/GIJSView.ts",
              "type": "cjs require",
              "userRequest": "../../../render-core/src/engine/scene/materials/Texture",
              "loc": "19:18-84"
            }
          ],
          "usedExports": true,
          "providedExports": null,
          "optimizationBailout": [],
          "depth": 2,
          "source": "\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst Color_1 = require(\"../../math/Color\");\r\nconst Vector3_1 = require(\"../../math/Vector3\");\r\nconst ImageLoader_1 = require(\"../../data/ImageLoader\");\r\nconst MathUtils_1 = require(\"../../utils/MathUtils\");\r\nclass Texture extends ImageLoader_1.ImageLoader {\r\n    constructor(arg) {\r\n        super();\r\n        try {\r\n            if (importScripts) {\r\n                return;\r\n            }\r\n        }\r\n        catch (e) {\r\n        }\r\n        if (!Texture.ctx) {\r\n            var canvas = document.createElement(\"canvas\");\r\n            canvas.width = 4096;\r\n            canvas.height = 4096;\r\n            Texture.ctx = canvas.getContext(\"2d\");\r\n        }\r\n        if (arg) {\r\n            if (typeof arg === \"string\") {\r\n                this.load(arg);\r\n            }\r\n            else if (arg instanceof HTMLImageElement) {\r\n                this.setImage(arg);\r\n            }\r\n        }\r\n    }\r\n    static getTexture(url) {\r\n        var texture = Texture.list[Texture.map.get(url)];\r\n        if (texture) {\r\n            return texture;\r\n        }\r\n        else {\r\n            return new Texture(url);\r\n        }\r\n    }\r\n    static setTexture(url, texture) {\r\n        texture.index = Texture.list.push(texture) - 1;\r\n        Texture.map.set(url, texture.index);\r\n        return texture;\r\n    }\r\n    static fromJson(texture) {\r\n        if (texture) {\r\n            var _texture = new Texture();\r\n            _texture.data = texture.data;\r\n            _texture.pixels = texture.pixels;\r\n            return _texture;\r\n        }\r\n        else {\r\n            return null;\r\n        }\r\n    }\r\n    read(memory) {\r\n        this.sourceFile = memory.readUTF();\r\n        this.width = memory.readUnsignedInt();\r\n        this.height = memory.readUnsignedInt();\r\n        this.data = [];\r\n        for (var i = 0; i < this.width * this.height; i++) {\r\n            var color = new Color_1.Color();\r\n            color.read(memory);\r\n            this.data.push(color);\r\n        }\r\n        Texture.setTexture(this.sourceFile, this);\r\n        return memory.position;\r\n    }\r\n    write(memory) {\r\n        memory.writeUTF(this.sourceFile);\r\n        memory.writeUnsignedInt(this.width);\r\n        memory.writeUnsignedInt(this.height);\r\n        for (var i = 0; i < this.width * this.height; i++) {\r\n            this.data[i].write(memory);\r\n        }\r\n        return memory.position;\r\n    }\r\n    bilinearSample(u, v) {\r\n        let w = this.width - 1;\r\n        let h = this.height - 1;\r\n        let Xx = MathUtils_1.MathUtils.Modf(u * w);\r\n        let Yy = MathUtils_1.MathUtils.Modf(v * h);\r\n        let X = Xx.int;\r\n        let x = Xx.frac;\r\n        let Y = Yy.int;\r\n        let y = Yy.frac;\r\n        let x0 = X;\r\n        let y0 = Y;\r\n        let x1 = x0 + 1;\r\n        let y1 = y0 + 1;\r\n        let i00 = y0 * this.width + x0;\r\n        let i01 = y1 * this.width + x0;\r\n        let i10 = y0 * this.width + x1;\r\n        let i11 = y1 * this.width + x1;\r\n        let c00 = this.data[i00 >= this.data.length ? this.data.length - 1 : i00];\r\n        let c01 = this.data[i01 >= this.data.length ? this.data.length - 1 : i01];\r\n        let c10 = this.data[i10 >= this.data.length ? this.data.length - 1 : i10];\r\n        let c11 = this.data[i11 >= this.data.length ? this.data.length - 1 : i11];\r\n        let c = new Color_1.Color();\r\n        c = c.add(c00.mulScalar((1 - x) * (1 - y)));\r\n        c = c.add(c10.mulScalar(x * (1 - y)));\r\n        c = c.add(c01.mulScalar((1 - x) * y));\r\n        c = c.add(c11.mulScalar(x * y));\r\n        if (c.isBlack()) {\r\n        }\r\n        return c;\r\n    }\r\n    sample(u, v) {\r\n        u = MathUtils_1.MathUtils.fract(MathUtils_1.MathUtils.fract(u) + 1);\r\n        v = MathUtils_1.MathUtils.fract(MathUtils_1.MathUtils.fract(v) + 1);\r\n        return this.bilinearSample(u, 1 - v);\r\n    }\r\n    normalSample(u, v) {\r\n        let c = this.sample(u, v);\r\n        return new Vector3_1.Vector3(c.r * 2 - 1, c.g * 2 - 1, c.b * 2 - 1).normalize();\r\n    }\r\n    bumpSample(u, v) {\r\n        u = MathUtils_1.MathUtils.fract(MathUtils_1.MathUtils.fract(u) + 1);\r\n        v = MathUtils_1.MathUtils.fract(MathUtils_1.MathUtils.fract(v) + 1);\r\n        v = 1 - v;\r\n        let x = Math.round(u * this.width);\r\n        let y = Math.round(v * this.height);\r\n        let x1 = MathUtils_1.MathUtils.clampInt(x - 1, 0, this.width - 1);\r\n        let x2 = MathUtils_1.MathUtils.clampInt(x + 1, 0, this.width - 1);\r\n        let y1 = MathUtils_1.MathUtils.clampInt(y - 1, 0, this.height - 1);\r\n        let y2 = MathUtils_1.MathUtils.clampInt(y + 1, 0, this.height - 1);\r\n        let cx = this.data[y * this.width + x1].sub(this.data[y * this.width + x2]);\r\n        let cy = this.data[y1 * this.width + x].sub(this.data[y2 * this.width + x]);\r\n        return new Vector3_1.Vector3(cx.r, cy.r, 0);\r\n    }\r\n    load(url, onLoad, onProgress, onError) {\r\n        this.sourceFile = url;\r\n        let texture = Texture.getTexture(url);\r\n        if (texture) {\r\n            this.index = texture.index;\r\n            this.data = texture.data;\r\n            this.image = texture.image;\r\n            this.pixels = texture.pixels;\r\n            this.sourceFile = texture.sourceFile;\r\n            if (onLoad) {\r\n                onLoad(this.data);\r\n            }\r\n            return this.image;\r\n        }\r\n        return super.load(url, function (image) {\r\n            this.setImage(image);\r\n            if (onLoad) {\r\n                onLoad(this.pixels);\r\n            }\r\n        }.bind(this), onProgress, onError);\r\n    }\r\n    setImage(image) {\r\n        this.sourceFile = image.currentSrc;\r\n        Texture.setTexture(this.sourceFile, this);\r\n        Texture.ctx.drawImage(image, 0, 0);\r\n        let pixels = Texture.ctx.getImageData(0, 0, image.width, image.height).data;\r\n        this.setImageData(image.width, image.height, pixels);\r\n        this.image = image;\r\n    }\r\n    setImageData(width, height, pixels) {\r\n        this.data = [];\r\n        for (var y = 0; y < height; y++) {\r\n            for (var x = 0; x < width; x++) {\r\n                var pi = y * (width * 4) + (x * 4);\r\n                var index = y * width + x;\r\n                var rgba = {\r\n                    r: pixels[pi],\r\n                    g: pixels[pi + 1],\r\n                    b: pixels[pi + 2],\r\n                    a: pixels[pi + 3],\r\n                };\r\n                this.data[index] = new Color_1.Color(rgba.r / 255, rgba.g / 255, rgba.b / 255);\r\n            }\r\n        }\r\n        this.width = width;\r\n        this.height = height;\r\n        this.pixels = pixels;\r\n    }\r\n    static write(memory) {\r\n        memory.writeUnsignedInt(Texture.list.length);\r\n        Texture.list.forEach(function (texture) {\r\n            texture.write(memory);\r\n        });\r\n        return memory.position;\r\n    }\r\n    static restore(memory) {\r\n        var numTextures = memory.readUnsignedInt();\r\n        for (var i = 0; i < numTextures; i++) {\r\n            var tex = new Texture();\r\n            tex.read(memory);\r\n        }\r\n        console.info(numTextures + \" Textures restored\");\r\n        return memory.position;\r\n    }\r\n}\r\nTexture.list = [];\r\nTexture.map = new Map();\r\nexports.Texture = Texture;\r\n"
        },
        {
          "id": 11,
          "identifier": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-core\\src\\engine\\scene\\shapes\\Triangle.ts",
          "name": "./packages/render-core/src/engine/scene/shapes/Triangle.ts",
          "index": 38,
          "index2": 34,
          "size": 14370,
          "cacheable": true,
          "built": true,
          "optional": false,
          "prefetched": false,
          "chunks": [
            0
          ],
          "assets": [],
          "issuer": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-core\\src\\engine\\scene\\shapes\\Shape.ts",
          "issuerId": 6,
          "issuerName": "./packages/render-core/src/engine/scene/shapes/Shape.ts",
          "failed": false,
          "errors": 15,
          "warnings": 0,
          "reasons": [
            {
              "moduleId": 6,
              "moduleIdentifier": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-core\\src\\engine\\scene\\shapes\\Shape.ts",
              "module": "./packages/render-core/src/engine/scene/shapes/Shape.ts",
              "moduleName": "./packages/render-core/src/engine/scene/shapes/Shape.ts",
              "type": "cjs require",
              "userRequest": "./Triangle",
              "loc": "6:19-40"
            },
            {
              "moduleId": 19,
              "moduleIdentifier": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-core\\src\\engine\\scene\\shapes\\Mesh.ts",
              "module": "./packages/render-core/src/engine/scene/shapes/Mesh.ts",
              "moduleName": "./packages/render-core/src/engine/scene/shapes/Mesh.ts",
              "type": "cjs require",
              "userRequest": "./Triangle",
              "loc": "3:19-40"
            },
            {
              "moduleId": 41,
              "moduleIdentifier": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-core\\src\\engine\\scene\\Scene.ts",
              "module": "./packages/render-core/src/engine/scene/Scene.ts",
              "moduleName": "./packages/render-core/src/engine/scene/Scene.ts",
              "type": "cjs require",
              "userRequest": "./shapes/Triangle",
              "loc": "13:19-47"
            },
            {
              "moduleId": 52,
              "moduleIdentifier": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-client\\src\\views\\GIJSView.ts",
              "module": "./packages/render-client/src/views/GIJSView.ts",
              "moduleName": "./packages/render-client/src/views/GIJSView.ts",
              "type": "cjs require",
              "userRequest": "../../../render-core/src/engine/scene/shapes/Triangle",
              "loc": "13:19-83"
            }
          ],
          "usedExports": true,
          "providedExports": null,
          "optimizationBailout": [],
          "depth": 2,
          "source": "\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst Material_1 = require(\"../materials/Material\");\r\nconst Box_1 = require(\"./Box\");\r\nconst Vector3_1 = require(\"../../math/Vector3\");\r\nconst Hit_1 = require(\"../../math/Hit\");\r\nconst Constants_1 = require(\"../../math/Constants\");\r\nconst Hit_2 = require(\"../../math/Hit\");\r\nconst Matrix4_1 = require(\"../../math/Matrix4\");\r\nconst Shape_1 = require(\"./Shape\");\r\nconst MaterialUtils_1 = require(\"../materials/MaterialUtils\");\r\nconst ByteArrayBase_1 = require(\"../../../pointer/src/ByteArrayBase\");\r\nclass Triangle {\r\n    constructor(material = null, box = new Box_1.Box(), v1 = new Vector3_1.Vector3(), v2 = new Vector3_1.Vector3(), v3 = new Vector3_1.Vector3(), n1 = new Vector3_1.Vector3(), n2 = new Vector3_1.Vector3(), n3 = new Vector3_1.Vector3(), t1 = new Vector3_1.Vector3(), t2 = new Vector3_1.Vector3(), t3 = new Vector3_1.Vector3()) {\r\n        this.material = material;\r\n        this.box = box;\r\n        this.v1 = v1;\r\n        this.v2 = v2;\r\n        this.v3 = v3;\r\n        this.n1 = n1;\r\n        this.n2 = n2;\r\n        this.n3 = n3;\r\n        this.t1 = t1;\r\n        this.t2 = t2;\r\n        this.t3 = t3;\r\n        this.type = Shape_1.ShapeType.TRIANGLE;\r\n        this.memorySize = Triangle.SIZE;\r\n        this.data = new Float32Array([\r\n            v1.x, v1.y, v1.z, 0,\r\n            v2.x, v2.y, v2.z, 0,\r\n            v3.x, v3.y, v3.z, 0,\r\n            n1.x, n1.y, n1.z, 0,\r\n            n2.x, n2.y, n2.z, 0,\r\n            n3.x, n3.y, n3.z, 0,\r\n            t1.x, t1.y, t1.z, 0,\r\n            t2.x, t2.y, t2.z, 0,\r\n            t3.x, t3.y, t3.z, 0\r\n        ]);\r\n    }\r\n    update() {\r\n        this.data[0] = this.v1.x;\r\n        this.data[1] = this.v1.y;\r\n        this.data[2] = this.v1.z;\r\n        this.data[3] = 0;\r\n        this.data[4] = this.v2.x;\r\n        this.data[5] = this.v2.y;\r\n        this.data[6] = this.v2.z;\r\n        this.data[7] = 0;\r\n        this.data[8] = this.v3.x;\r\n        this.data[9] = this.v3.y;\r\n        this.data[10] = this.v3.z;\r\n        this.data[11] = 0;\r\n        this.data[12] = this.n1.x;\r\n        this.data[13] = this.n1.y;\r\n        this.data[14] = this.n1.z;\r\n        this.data[15] = 0;\r\n        this.data[16] = this.n2.x;\r\n        this.data[17] = this.n2.y;\r\n        this.data[18] = this.n2.z;\r\n        this.data[19] = 0;\r\n        this.data[20] = this.n3.x;\r\n        this.data[21] = this.n3.y;\r\n        this.data[22] = this.n3.z;\r\n        this.data[23] = 0;\r\n        this.data[24] = this.t1.x;\r\n        this.data[25] = this.t1.y;\r\n        this.data[26] = this.t1.z;\r\n        this.data[27] = 0;\r\n        this.data[28] = this.t2.x;\r\n        this.data[29] = this.t2.y;\r\n        this.data[30] = this.t2.z;\r\n        this.data[31] = 0;\r\n        this.data[32] = this.t3.x;\r\n        this.data[33] = this.t3.y;\r\n        this.data[34] = this.t3.z;\r\n        this.data[35] = 0;\r\n    }\r\n    directRead(memory, offset) {\r\n        offset++;\r\n        var materialIndex = memory[offset++];\r\n        var material = Material_1.Material.map[materialIndex];\r\n        if (material) {\r\n            this.material = material;\r\n        }\r\n        this.index = memory[offset++];\r\n        offset = this.v1.directRead(memory, offset);\r\n        offset = this.v2.directRead(memory, offset);\r\n        offset = this.v3.directRead(memory, offset);\r\n        offset = this.n1.directRead(memory, offset);\r\n        offset = this.n2.directRead(memory, offset);\r\n        offset = this.n3.directRead(memory, offset);\r\n        if (this.t1) {\r\n            offset = this.t1.directRead(memory, offset);\r\n        }\r\n        else {\r\n            offset = offset + Vector3_1.Vector3.SIZE;\r\n        }\r\n        if (this.t2) {\r\n            offset = this.t2.directRead(memory, offset);\r\n        }\r\n        else {\r\n            offset = offset + Vector3_1.Vector3.SIZE;\r\n        }\r\n        if (this.t3) {\r\n            offset = this.t3.directRead(memory, offset);\r\n        }\r\n        else {\r\n            offset = offset + Vector3_1.Vector3.SIZE;\r\n        }\r\n        this.updateBox();\r\n        return offset;\r\n    }\r\n    directWrite(memory, offset) {\r\n        memory[offset++] = this.type;\r\n        memory[offset++] = this.material.index;\r\n        memory[offset++] = this.index;\r\n        offset = this.v1.directWrite(memory, offset);\r\n        offset = this.v2.directWrite(memory, offset);\r\n        offset = this.v3.directWrite(memory, offset);\r\n        offset = this.n1.directWrite(memory, offset);\r\n        offset = this.n2.directWrite(memory, offset);\r\n        offset = this.n3.directWrite(memory, offset);\r\n        if (this.t1) {\r\n            offset = this.t1.directWrite(memory, offset);\r\n        }\r\n        else {\r\n            offset = offset + Vector3_1.Vector3.SIZE;\r\n        }\r\n        if (this.t2) {\r\n            offset = this.t2.directWrite(memory, offset);\r\n        }\r\n        else {\r\n            offset = offset + Vector3_1.Vector3.SIZE;\r\n        }\r\n        if (this.t3) {\r\n            offset = this.t3.directWrite(memory, offset);\r\n        }\r\n        else {\r\n            offset = offset + Vector3_1.Vector3.SIZE;\r\n        }\r\n        return offset;\r\n    }\r\n    read(memory) {\r\n        memory.position += ByteArrayBase_1.ByteArrayBase.SIZE_OF_UINT8;\r\n        var materialIndex = memory.readInt();\r\n        var material = Material_1.Material.map[materialIndex];\r\n        if (material) {\r\n            this.material = material;\r\n        }\r\n        this.index = memory.readInt();\r\n        this.v1.read(memory);\r\n        this.v2.read(memory);\r\n        this.v3.read(memory);\r\n        this.n1.read(memory);\r\n        this.n2.read(memory);\r\n        this.n3.read(memory);\r\n        this.t1.read(memory);\r\n        this.t2.read(memory);\r\n        this.t3.read(memory);\r\n        if (this.t1.isNullVector()) {\r\n            this.t1 = null;\r\n        }\r\n        if (this.t2.isNullVector()) {\r\n            this.t2 = null;\r\n        }\r\n        if (this.t3.isNullVector()) {\r\n            this.t3 = null;\r\n        }\r\n        this.updateBox();\r\n        this.update();\r\n        return memory.position;\r\n    }\r\n    write(memory) {\r\n        memory.writeByte(this.type);\r\n        memory.writeInt(this.material.index);\r\n        memory.writeInt(this.index);\r\n        this.v1.write(memory);\r\n        this.v2.write(memory);\r\n        this.v3.write(memory);\r\n        this.n1.write(memory);\r\n        this.n2.write(memory);\r\n        this.n3.write(memory);\r\n        if (this.t1) {\r\n            this.t1.write(memory);\r\n        }\r\n        else {\r\n            Vector3_1.Vector3.NullVector.write(memory);\r\n        }\r\n        if (this.t2) {\r\n            this.t2.write(memory);\r\n        }\r\n        else {\r\n            Vector3_1.Vector3.NullVector.write(memory);\r\n        }\r\n        if (this.t3) {\r\n            this.t3.write(memory);\r\n        }\r\n        else {\r\n            Vector3_1.Vector3.NullVector.write(memory);\r\n        }\r\n        return memory.position;\r\n    }\r\n    static fromJson(triangles) {\r\n        if (triangles instanceof Triangle) {\r\n            var t = triangles;\r\n            return new Triangle(MaterialUtils_1.MaterialUtils.fromJson(t.material), Box_1.Box.fromJson(t.box), Vector3_1.Vector3.fromJson(t.v1), Vector3_1.Vector3.fromJson(t.v2), Vector3_1.Vector3.fromJson(t.v3), Vector3_1.Vector3.fromJson(t.n1), Vector3_1.Vector3.fromJson(t.n2), Vector3_1.Vector3.fromJson(t.n3), Vector3_1.Vector3.fromJson(t.t1), Vector3_1.Vector3.fromJson(t.t2), Vector3_1.Vector3.fromJson(t.t3));\r\n        }\r\n        else {\r\n            var _ts = [];\r\n            var ts = triangles;\r\n            ts.forEach(function (t) {\r\n                _ts.push(new Triangle(MaterialUtils_1.MaterialUtils.fromJson(t.material), Box_1.Box.fromJson(t.box), Vector3_1.Vector3.fromJson(t.v1), Vector3_1.Vector3.fromJson(t.v2), Vector3_1.Vector3.fromJson(t.v3), Vector3_1.Vector3.fromJson(t.n1), Vector3_1.Vector3.fromJson(t.n2), Vector3_1.Vector3.fromJson(t.n3), Vector3_1.Vector3.fromJson(t.t1), Vector3_1.Vector3.fromJson(t.t2), Vector3_1.Vector3.fromJson(t.t3)));\r\n            });\r\n            return _ts;\r\n        }\r\n    }\r\n    static newTriangle(v1, v2, v3, t1, t2, t3, material) {\r\n        var t = new Triangle();\r\n        t.v1 = v1;\r\n        t.v2 = v2;\r\n        t.v3 = v3;\r\n        t.t1 = t1;\r\n        t.t2 = t2;\r\n        t.t3 = t3;\r\n        t.material = material;\r\n        t.updateBox();\r\n        t.update();\r\n        t.fixNormals();\r\n        return t;\r\n    }\r\n    compile() {\r\n    }\r\n    get vertices() {\r\n        return [this.v1, this.v2, this.v3];\r\n    }\r\n    intersectSIMD(r) {\r\n        this.update();\r\n        var _v1 = SIMD.Float32x4.load(this.data, 0);\r\n        var _v2 = SIMD.Float32x4.load(this.data, 4);\r\n        var _v3 = SIMD.Float32x4.load(this.data, 8);\r\n        var _e1 = SIMD.Float32x4.sub(_v2, _v1);\r\n        var _e2 = SIMD.Float32x4.sub(_v3, _v1);\r\n        var _p = r.direction.SIMD_cross(_e2);\r\n        var det = Vector3_1.Vector3.SIMD.dot(_e1, _p);\r\n        if (det > -Constants_1.EPS && det < Constants_1.EPS) {\r\n            return Hit_2.NoHit;\r\n        }\r\n        var inv = 1 / det;\r\n        var _t = r.origin.SIMD_sub(_v1);\r\n        var u = Vector3_1.Vector3.SIMD.dot(_t, _p) * inv;\r\n        if (u < 0 || u > 1) {\r\n            return Hit_2.NoHit;\r\n        }\r\n        var _q = Vector3_1.Vector3.SIMD.cross(_t, _e1);\r\n        var v = r.direction.SIMD_dot(_q) * inv;\r\n        if (v < 0 || u + v > 1) {\r\n            return Hit_2.NoHit;\r\n        }\r\n        var d = Vector3_1.Vector3.SIMD.dot(_e2, _q) * inv;\r\n        if (d < Constants_1.EPS) {\r\n            return Hit_2.NoHit;\r\n        }\r\n        return new Hit_1.Hit(this, d);\r\n    }\r\n    intersect(r) {\r\n        var e1 = this.v2.sub(this.v1);\r\n        var e2 = this.v3.sub(this.v1);\r\n        var p = r.direction.cross(e2);\r\n        var det = e1.dot(p);\r\n        if (det > -Constants_1.EPS && det < Constants_1.EPS) {\r\n            return Hit_2.NoHit;\r\n        }\r\n        var inv = 1 / det;\r\n        var t = r.origin.sub(this.v1);\r\n        var u = t.dot(p) * inv;\r\n        if (u < 0 || u > 1) {\r\n            return Hit_2.NoHit;\r\n        }\r\n        var q = t.cross(e1);\r\n        var v = r.direction.dot(q) * inv;\r\n        if (v < 0 || u + v > 1) {\r\n            return Hit_2.NoHit;\r\n        }\r\n        var d = e2.dot(q) * inv;\r\n        if (d < Constants_1.EPS) {\r\n            return Hit_2.NoHit;\r\n        }\r\n        return new Hit_1.Hit(this, d);\r\n    }\r\n    getColor(p) {\r\n        var t = this;\r\n        if (t.material.texture == null) {\r\n            return t.material.color;\r\n        }\r\n        var _uvw = t.baryCentric(p);\r\n        var u = _uvw.u;\r\n        var v = _uvw.v;\r\n        var w = _uvw.w;\r\n        var n = new Vector3_1.Vector3();\r\n        n = n.add(t.t1.mulScalar(u));\r\n        n = n.add(t.t2.mulScalar(v));\r\n        n = n.add(t.t3.mulScalar(w));\r\n        return t.material.texture.sample(n.x, n.y);\r\n    }\r\n    getMaterial(p) {\r\n        return this.material;\r\n    }\r\n    getNormal(p) {\r\n        var t = this;\r\n        var _uvw = t.baryCentric(p);\r\n        var u = _uvw.u;\r\n        var v = _uvw.v;\r\n        var w = _uvw.w;\r\n        var n = new Vector3_1.Vector3();\r\n        n = n.add(t.n1.mulScalar(u));\r\n        n = n.add(t.n2.mulScalar(v));\r\n        n = n.add(t.n3.mulScalar(w));\r\n        n = n.normalize();\r\n        if (t.material.normalTexture != null) {\r\n            var b = new Vector3_1.Vector3();\r\n            b = b.add(t.t1.mulScalar(u));\r\n            b = b.add(t.t2.mulScalar(v));\r\n            b = b.add(t.t3.mulScalar(w));\r\n            var ns = t.material.normalTexture.normalSample(b.x, b.y);\r\n            var dv1 = t.v2.sub(t.v1);\r\n            var dv2 = t.v3.sub(t.v1);\r\n            var dt1 = t.t2.sub(t.t1);\r\n            var dt2 = t.t3.sub(t.t1);\r\n            var T = dv1.mulScalar(dt2.y).sub(dv2.mulScalar(dt1.y)).normalize();\r\n            var B = dv2.mulScalar(dt1.x).sub(dv1.mulScalar(dt2.x)).normalize();\r\n            var N = T.cross(B);\r\n            var matrix = new Matrix4_1.Matrix4(T.x, B.x, N.x, 0, T.y, B.y, N.y, 0, T.z, B.z, N.z, 0, 0, 0, 0, 1);\r\n            n = matrix.mulDirection(ns);\r\n        }\r\n        if (t.material.bumpTexture != null) {\r\n            var b = new Vector3_1.Vector3();\r\n            b = b.add(t.t1.mulScalar(u));\r\n            b = b.add(t.t2.mulScalar(v));\r\n            b = b.add(t.t3.mulScalar(w));\r\n            var bump = t.material.bumpTexture.bumpSample(b.x, b.y);\r\n            var dv1 = t.v2.sub(t.v1);\r\n            var dv2 = t.v3.sub(t.v1);\r\n            var dt1 = t.t2.sub(t.t1);\r\n            var dt2 = t.t3.sub(t.t1);\r\n            var tangent = dv1.mulScalar(dt2.y).sub(dv2.mulScalar(dt1.y)).normalize();\r\n            var biTangent = dv2.mulScalar(dt1.x).sub(dv1.mulScalar(dt2.x)).normalize();\r\n            n = n.add(tangent.mulScalar(bump.x * t.material.bumpMultiplier));\r\n            n = n.add(biTangent.mulScalar(bump.y * t.material.bumpMultiplier));\r\n        }\r\n        n = n.normalize();\r\n        return n;\r\n    }\r\n    getRandomPoint() {\r\n        return new Vector3_1.Vector3();\r\n    }\r\n    area() {\r\n        var t = this;\r\n        var e1 = t.v2.sub(t.v1);\r\n        var e2 = t.v3.sub(t.v1);\r\n        var n = e1.cross(e2);\r\n        return n.length() / 2;\r\n    }\r\n    baryCentric(p) {\r\n        var t = this;\r\n        var v0 = t.v2.sub(t.v1);\r\n        var v1 = t.v3.sub(t.v1);\r\n        var v2 = p.sub(t.v1);\r\n        var d00 = v0.dot(v0);\r\n        var d01 = v0.dot(v1);\r\n        var d11 = v1.dot(v1);\r\n        var d20 = v2.dot(v0);\r\n        var d21 = v2.dot(v1);\r\n        var d = d00 * d11 - d01 * d01;\r\n        var v = (d11 * d20 - d01 * d21) / d;\r\n        var w = (d00 * d21 - d01 * d20) / d;\r\n        var u = 1 - v - w;\r\n        return { u: u, v: v, w: w };\r\n    }\r\n    updateBox() {\r\n        var t = this;\r\n        var min = t.v1.min(t.v2).min(t.v3);\r\n        var max = t.v1.max(t.v2).max(t.v3);\r\n        t.box = new Box_1.Box(min, max);\r\n    }\r\n    fixNormals() {\r\n        var t = this;\r\n        var e1 = t.v2.sub(t.v1);\r\n        var e2 = t.v3.sub(t.v1);\r\n        var n = e1.cross(e2).normalize();\r\n        var zero = new Vector3_1.Vector3();\r\n        if (t.n1 == undefined || t.n1.equals(zero)) {\r\n            t.n1 = n;\r\n        }\r\n        if (t.n2 == undefined || t.n2.equals(zero)) {\r\n            t.n2 = n;\r\n        }\r\n        if (t.n3 == undefined || t.n3.equals(zero)) {\r\n            t.n3 = n;\r\n        }\r\n    }\r\n}\r\nTriangle.SIZE = Box_1.Box.SIZE + (Vector3_1.Vector3.SIZE * 9) + 2;\r\nexports.Triangle = Triangle;\r\n"
        },
        {
          "id": 12,
          "identifier": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-core\\src\\engine\\math\\Matrix4.ts",
          "name": "./packages/render-core/src/engine/math/Matrix4.ts",
          "index": 39,
          "index2": 32,
          "size": 13067,
          "cacheable": true,
          "built": false,
          "optional": false,
          "prefetched": false,
          "chunks": [
            0
          ],
          "assets": [],
          "issuer": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-core\\src\\engine\\scene\\shapes\\TransformedShape.ts",
          "issuerId": 21,
          "issuerName": "./packages/render-core/src/engine/scene/shapes/TransformedShape.ts",
          "failed": false,
          "errors": 0,
          "warnings": 0,
          "reasons": [
            {
              "moduleId": 11,
              "moduleIdentifier": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-core\\src\\engine\\scene\\shapes\\Triangle.ts",
              "module": "./packages/render-core/src/engine/scene/shapes/Triangle.ts",
              "moduleName": "./packages/render-core/src/engine/scene/shapes/Triangle.ts",
              "type": "cjs require",
              "userRequest": "../../math/Matrix4",
              "loc": "9:18-47"
            },
            {
              "moduleId": 19,
              "moduleIdentifier": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-core\\src\\engine\\scene\\shapes\\Mesh.ts",
              "module": "./packages/render-core/src/engine/scene/shapes/Mesh.ts",
              "moduleName": "./packages/render-core/src/engine/scene/shapes/Mesh.ts",
              "type": "cjs require",
              "userRequest": "../../math/Matrix4",
              "loc": "4:18-47"
            },
            {
              "moduleId": 21,
              "moduleIdentifier": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-core\\src\\engine\\scene\\shapes\\TransformedShape.ts",
              "module": "./packages/render-core/src/engine/scene/shapes/TransformedShape.ts",
              "moduleName": "./packages/render-core/src/engine/scene/shapes/TransformedShape.ts",
              "type": "cjs require",
              "userRequest": "../../math/Matrix4",
              "loc": "5:18-47"
            },
            {
              "moduleId": 52,
              "moduleIdentifier": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-client\\src\\views\\GIJSView.ts",
              "module": "./packages/render-client/src/views/GIJSView.ts",
              "moduleName": "./packages/render-client/src/views/GIJSView.ts",
              "type": "cjs require",
              "userRequest": "../../../render-core/src/engine/math/Matrix4",
              "loc": "18:18-73"
            }
          ],
          "usedExports": true,
          "providedExports": null,
          "optimizationBailout": [],
          "depth": 2,
          "source": "\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst Vector3_1 = require(\"./Vector3\");\r\nconst Box_1 = require(\"../scene/shapes/Box\");\r\nconst Ray_1 = require(\"./Ray\");\r\nclass Matrix4 {\r\n    constructor(x00 = 0, x01 = 0, x02 = 0, x03 = 0, x10 = 0, x11 = 0, x12 = 0, x13 = 0, x20 = 0, x21 = 0, x22 = 0, x23 = 0, x30 = 0, x31 = 0, x32 = 0, x33 = 0) {\r\n        this.x00 = x00;\r\n        this.x01 = x01;\r\n        this.x02 = x02;\r\n        this.x03 = x03;\r\n        this.x10 = x10;\r\n        this.x11 = x11;\r\n        this.x12 = x12;\r\n        this.x13 = x13;\r\n        this.x20 = x20;\r\n        this.x21 = x21;\r\n        this.x22 = x22;\r\n        this.x23 = x23;\r\n        this.x30 = x30;\r\n        this.x31 = x31;\r\n        this.x32 = x32;\r\n        this.x33 = x33;\r\n    }\r\n    directRead(memory, offset) {\r\n        var m = this;\r\n        m.x00 = memory[offset++];\r\n        m.x01 = memory[offset++];\r\n        m.x02 = memory[offset++];\r\n        m.x03 = memory[offset++];\r\n        m.x10 = memory[offset++];\r\n        m.x11 = memory[offset++];\r\n        m.x12 = memory[offset++];\r\n        m.x13 = memory[offset++];\r\n        m.x20 = memory[offset++];\r\n        m.x21 = memory[offset++];\r\n        m.x22 = memory[offset++];\r\n        m.x23 = memory[offset++];\r\n        m.x30 = memory[offset++];\r\n        m.x31 = memory[offset++];\r\n        m.x32 = memory[offset++];\r\n        m.x33 = memory[offset++];\r\n        return offset;\r\n    }\r\n    directWrite(memory, offset) {\r\n        var m = this;\r\n        memory[offset++] = m.x00;\r\n        memory[offset++] = m.x01;\r\n        memory[offset++] = m.x02;\r\n        memory[offset++] = m.x03;\r\n        memory[offset++] = m.x10;\r\n        memory[offset++] = m.x11;\r\n        memory[offset++] = m.x12;\r\n        memory[offset++] = m.x13;\r\n        memory[offset++] = m.x20;\r\n        memory[offset++] = m.x21;\r\n        memory[offset++] = m.x22;\r\n        memory[offset++] = m.x23;\r\n        memory[offset++] = m.x30;\r\n        memory[offset++] = m.x31;\r\n        memory[offset++] = m.x32;\r\n        memory[offset++] = m.x33;\r\n        return offset;\r\n    }\r\n    read(memory) {\r\n        this.x00 = memory.readFloat();\r\n        this.x01 = memory.readFloat();\r\n        this.x02 = memory.readFloat();\r\n        this.x03 = memory.readFloat();\r\n        this.x10 = memory.readFloat();\r\n        this.x11 = memory.readFloat();\r\n        this.x12 = memory.readFloat();\r\n        this.x13 = memory.readFloat();\r\n        this.x20 = memory.readFloat();\r\n        this.x21 = memory.readFloat();\r\n        this.x22 = memory.readFloat();\r\n        this.x23 = memory.readFloat();\r\n        this.x30 = memory.readFloat();\r\n        this.x31 = memory.readFloat();\r\n        this.x32 = memory.readFloat();\r\n        this.x33 = memory.readFloat();\r\n        return memory.position;\r\n    }\r\n    write(memory) {\r\n        memory.writeFloat(this.x00);\r\n        memory.writeFloat(this.x01);\r\n        memory.writeFloat(this.x02);\r\n        memory.writeFloat(this.x03);\r\n        memory.writeFloat(this.x10);\r\n        memory.writeFloat(this.x11);\r\n        memory.writeFloat(this.x12);\r\n        memory.writeFloat(this.x13);\r\n        memory.writeFloat(this.x20);\r\n        memory.writeFloat(this.x21);\r\n        memory.writeFloat(this.x22);\r\n        memory.writeFloat(this.x23);\r\n        memory.writeFloat(this.x30);\r\n        memory.writeFloat(this.x31);\r\n        memory.writeFloat(this.x32);\r\n        memory.writeFloat(this.x33);\r\n        return memory.position;\r\n    }\r\n    static fromJson(m) {\r\n        return new Matrix4(m.x00, m.x01, m.x02, m.x03, m.x10, m.x11, m.x12, m.x13, m.x20, m.x21, m.x22, m.x23, m.x30, m.x31, m.x32, m.x33);\r\n    }\r\n    static fromTHREEJS(e) {\r\n        return new Matrix4(e[0], e[4], e[8], e[12], e[1], e[5], e[9], e[13], e[2], e[6], e[10], e[14], e[3], e[7], e[11], e[15]);\r\n    }\r\n    static identity() {\r\n        return new Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);\r\n    }\r\n    static translate(v) {\r\n        return new Matrix4(1, 0, 0, v.x, 0, 1, 0, v.y, 0, 0, 1, v.z, 0, 0, 0, 1);\r\n    }\r\n    static scale(v) {\r\n        return new Matrix4(v.x, 0, 0, 0, 0, v.y, 0, 0, 0, 0, v.z, 0, 0, 0, 0, 1);\r\n    }\r\n    static rotate(v, a) {\r\n        v = v.normalize();\r\n        var s = Math.sin(a);\r\n        var c = Math.cos(a);\r\n        var m = 1 - c;\r\n        return new Matrix4(m * v.x * v.x + c, m * v.x * v.y + v.z * s, m * v.z * v.x - v.y * s, 0, m * v.x * v.y - v.z * s, m * v.y * v.y + c, m * v.y * v.z + v.x * s, 0, m * v.z * v.x + v.y * s, m * v.y * v.z - v.x * s, m * v.z * v.z + c, 0, 0, 0, 0, 1);\r\n    }\r\n    static frustum(l, r, b, t, n, f) {\r\n        var t1 = 2 * n;\r\n        var t2 = r - l;\r\n        var t3 = t - b;\r\n        var t4 = f - n;\r\n        return new Matrix4(t1 / t2, 0, (r + l) / t2, 0, 0, t1 / t3, (t + b) / t3, 0, 0, 0, (-f - n) / t4, (-t1 * f) / t4, 0, 0, -1, 0);\r\n    }\r\n    static orthographic(l, r, b, t, n, f) {\r\n        return new Matrix4(2 / (r - l), 0, 0, -(r + l) / (r - l), 0, 2 / (t - b), 0, -(t + b) / (t - b), 0, 0, -2 / (f - n), -(f + n) / (f - n), 0, 0, 0, 1);\r\n    }\r\n    static perspective(fov, aspect, near, far) {\r\n        var ymax = near * Math.tan(fov * Math.PI / 360);\r\n        var xmax = ymax * aspect;\r\n        return Matrix4.frustum(-xmax, xmax, -ymax, ymax, near, far);\r\n    }\r\n    static LookAtMatrix(eye, center, up, fovy) {\r\n        up = up.normalize();\r\n        var f = center.sub(eye).normalize();\r\n        var s = f.cross(up);\r\n        var u = s.cross(f);\r\n        var m = new Matrix4(s.x, u.x, -f.x, eye.x, s.y, u.y, -f.y, eye.y, s.z, u.z, -f.z, eye.z, 0, 0, 0, 1);\r\n        return m.inverse();\r\n    }\r\n    translate(v) {\r\n        return Matrix4.translate(v).mul(this);\r\n    }\r\n    scale(v) {\r\n        return Matrix4.scale(v).mul(this);\r\n    }\r\n    rotate(v, a) {\r\n        return Matrix4.rotate(v, a).mul(this);\r\n    }\r\n    frustum(l, r, b, t, n, f) {\r\n        return Matrix4.frustum(l, r, b, t, n, f).mul(this);\r\n    }\r\n    orthographic(l, r, b, t, n, f) {\r\n        return Matrix4.orthographic(l, r, b, t, n, f).mul(this);\r\n    }\r\n    perspective(fov, aspect, near, far) {\r\n        return Matrix4.perspective(fov, aspect, near, far).mul(this);\r\n    }\r\n    mul(b) {\r\n        var a = this;\r\n        var m = new Matrix4();\r\n        m.x00 = a.x00 * b.x00 + a.x01 * b.x10 + a.x02 * b.x20 + a.x03 * b.x30;\r\n        m.x10 = a.x10 * b.x00 + a.x11 * b.x10 + a.x12 * b.x20 + a.x13 * b.x30;\r\n        m.x20 = a.x20 * b.x00 + a.x21 * b.x10 + a.x22 * b.x20 + a.x23 * b.x30;\r\n        m.x30 = a.x30 * b.x00 + a.x31 * b.x10 + a.x32 * b.x20 + a.x33 * b.x30;\r\n        m.x01 = a.x00 * b.x01 + a.x01 * b.x11 + a.x02 * b.x21 + a.x03 * b.x31;\r\n        m.x11 = a.x10 * b.x01 + a.x11 * b.x11 + a.x12 * b.x21 + a.x13 * b.x31;\r\n        m.x21 = a.x20 * b.x01 + a.x21 * b.x11 + a.x22 * b.x21 + a.x23 * b.x31;\r\n        m.x31 = a.x30 * b.x01 + a.x31 * b.x11 + a.x32 * b.x21 + a.x33 * b.x31;\r\n        m.x02 = a.x00 * b.x02 + a.x01 * b.x12 + a.x02 * b.x22 + a.x03 * b.x32;\r\n        m.x12 = a.x10 * b.x02 + a.x11 * b.x12 + a.x12 * b.x22 + a.x13 * b.x32;\r\n        m.x22 = a.x20 * b.x02 + a.x21 * b.x12 + a.x22 * b.x22 + a.x23 * b.x32;\r\n        m.x32 = a.x30 * b.x02 + a.x31 * b.x12 + a.x32 * b.x22 + a.x33 * b.x32;\r\n        m.x03 = a.x00 * b.x03 + a.x01 * b.x13 + a.x02 * b.x23 + a.x03 * b.x33;\r\n        m.x13 = a.x10 * b.x03 + a.x11 * b.x13 + a.x12 * b.x23 + a.x13 * b.x33;\r\n        m.x23 = a.x20 * b.x03 + a.x21 * b.x13 + a.x22 * b.x23 + a.x23 * b.x33;\r\n        m.x33 = a.x30 * b.x03 + a.x31 * b.x13 + a.x32 * b.x23 + a.x33 * b.x33;\r\n        return m;\r\n    }\r\n    mulPosition(b) {\r\n        var a = this;\r\n        var x = a.x00 * b.x + a.x01 * b.y + a.x02 * b.z + a.x03;\r\n        var y = a.x10 * b.x + a.x11 * b.y + a.x12 * b.z + a.x13;\r\n        var z = a.x20 * b.x + a.x21 * b.y + a.x22 * b.z + a.x23;\r\n        return new Vector3_1.Vector3(x, y, z);\r\n    }\r\n    mulDirection(b) {\r\n        var a = this;\r\n        var x = a.x00 * b.x + a.x01 * b.y + a.x02 * b.z;\r\n        var y = a.x10 * b.x + a.x11 * b.y + a.x12 * b.z;\r\n        var z = a.x20 * b.x + a.x21 * b.y + a.x22 * b.z;\r\n        return new Vector3_1.Vector3(x, y, z).normalize();\r\n    }\r\n    mulRay(b) {\r\n        var a = this;\r\n        return new Ray_1.Ray(a.mulPosition(b.origin), a.mulDirection(b.direction));\r\n    }\r\n    mulBox(box) {\r\n        var a = this;\r\n        var r = new Vector3_1.Vector3(a.x00, a.x10, a.x20);\r\n        var u = new Vector3_1.Vector3(a.x01, a.x11, a.x21);\r\n        var b = new Vector3_1.Vector3(a.x02, a.x12, a.x22);\r\n        var t = new Vector3_1.Vector3(a.x03, a.x13, a.x23);\r\n        var xa = r.mulScalar(box.min.x);\r\n        var xb = r.mulScalar(box.max.x);\r\n        var ya = u.mulScalar(box.min.y);\r\n        var yb = u.mulScalar(box.max.y);\r\n        var za = b.mulScalar(box.min.z);\r\n        var zb = b.mulScalar(box.max.z);\r\n        xa = xa.min(xb);\r\n        xb = xa.max(xb);\r\n        ya = ya.min(yb);\r\n        yb = ya.max(yb);\r\n        za = za.min(zb);\r\n        zb = za.max(zb);\r\n        var min = xa.add(ya).add(za).add(t);\r\n        var max = xb.add(yb).add(zb).add(t);\r\n        return new Box_1.Box(min, max);\r\n    }\r\n    transpose() {\r\n        var a = this;\r\n        return new Matrix4(a.x00, a.x10, a.x20, a.x30, a.x01, a.x11, a.x21, a.x31, a.x02, a.x12, a.x22, a.x32, a.x03, a.x13, a.x23, a.x33);\r\n    }\r\n    determinant() {\r\n        var a = this;\r\n        return (a.x00 * a.x11 * a.x22 * a.x33 - a.x00 * a.x11 * a.x23 * a.x32 +\r\n            a.x00 * a.x12 * a.x23 * a.x31 - a.x00 * a.x12 * a.x21 * a.x33 +\r\n            a.x00 * a.x13 * a.x21 * a.x32 - a.x00 * a.x13 * a.x22 * a.x31 -\r\n            a.x01 * a.x12 * a.x23 * a.x30 + a.x01 * a.x12 * a.x20 * a.x33 -\r\n            a.x01 * a.x13 * a.x20 * a.x32 + a.x01 * a.x13 * a.x22 * a.x30 -\r\n            a.x01 * a.x10 * a.x22 * a.x33 + a.x01 * a.x10 * a.x23 * a.x32 +\r\n            a.x02 * a.x13 * a.x20 * a.x31 - a.x02 * a.x13 * a.x21 * a.x30 +\r\n            a.x02 * a.x10 * a.x21 * a.x33 - a.x02 * a.x10 * a.x23 * a.x31 +\r\n            a.x02 * a.x11 * a.x23 * a.x30 - a.x02 * a.x11 * a.x20 * a.x33 -\r\n            a.x03 * a.x10 * a.x21 * a.x32 + a.x03 * a.x10 * a.x22 * a.x31 -\r\n            a.x03 * a.x11 * a.x22 * a.x30 + a.x03 * a.x11 * a.x20 * a.x32 -\r\n            a.x03 * a.x12 * a.x20 * a.x31 + a.x03 * a.x12 * a.x21 * a.x30);\r\n    }\r\n    inverse() {\r\n        var a = this;\r\n        var m = new Matrix4();\r\n        var d = a.determinant();\r\n        m.x00 = (a.x12 * a.x23 * a.x31 - a.x13 * a.x22 * a.x31 + a.x13 * a.x21 * a.x32 - a.x11 * a.x23 * a.x32 - a.x12 * a.x21 * a.x33 + a.x11 * a.x22 * a.x33) / d;\r\n        m.x01 = (a.x03 * a.x22 * a.x31 - a.x02 * a.x23 * a.x31 - a.x03 * a.x21 * a.x32 + a.x01 * a.x23 * a.x32 + a.x02 * a.x21 * a.x33 - a.x01 * a.x22 * a.x33) / d;\r\n        m.x02 = (a.x02 * a.x13 * a.x31 - a.x03 * a.x12 * a.x31 + a.x03 * a.x11 * a.x32 - a.x01 * a.x13 * a.x32 - a.x02 * a.x11 * a.x33 + a.x01 * a.x12 * a.x33) / d;\r\n        m.x03 = (a.x03 * a.x12 * a.x21 - a.x02 * a.x13 * a.x21 - a.x03 * a.x11 * a.x22 + a.x01 * a.x13 * a.x22 + a.x02 * a.x11 * a.x23 - a.x01 * a.x12 * a.x23) / d;\r\n        m.x10 = (a.x13 * a.x22 * a.x30 - a.x12 * a.x23 * a.x30 - a.x13 * a.x20 * a.x32 + a.x10 * a.x23 * a.x32 + a.x12 * a.x20 * a.x33 - a.x10 * a.x22 * a.x33) / d;\r\n        m.x11 = (a.x02 * a.x23 * a.x30 - a.x03 * a.x22 * a.x30 + a.x03 * a.x20 * a.x32 - a.x00 * a.x23 * a.x32 - a.x02 * a.x20 * a.x33 + a.x00 * a.x22 * a.x33) / d;\r\n        m.x12 = (a.x03 * a.x12 * a.x30 - a.x02 * a.x13 * a.x30 - a.x03 * a.x10 * a.x32 + a.x00 * a.x13 * a.x32 + a.x02 * a.x10 * a.x33 - a.x00 * a.x12 * a.x33) / d;\r\n        m.x13 = (a.x02 * a.x13 * a.x20 - a.x03 * a.x12 * a.x20 + a.x03 * a.x10 * a.x22 - a.x00 * a.x13 * a.x22 - a.x02 * a.x10 * a.x23 + a.x00 * a.x12 * a.x23) / d;\r\n        m.x20 = (a.x11 * a.x23 * a.x30 - a.x13 * a.x21 * a.x30 + a.x13 * a.x20 * a.x31 - a.x10 * a.x23 * a.x31 - a.x11 * a.x20 * a.x33 + a.x10 * a.x21 * a.x33) / d;\r\n        m.x21 = (a.x03 * a.x21 * a.x30 - a.x01 * a.x23 * a.x30 - a.x03 * a.x20 * a.x31 + a.x00 * a.x23 * a.x31 + a.x01 * a.x20 * a.x33 - a.x00 * a.x21 * a.x33) / d;\r\n        m.x22 = (a.x01 * a.x13 * a.x30 - a.x03 * a.x11 * a.x30 + a.x03 * a.x10 * a.x31 - a.x00 * a.x13 * a.x31 - a.x01 * a.x10 * a.x33 + a.x00 * a.x11 * a.x33) / d;\r\n        m.x23 = (a.x03 * a.x11 * a.x20 - a.x01 * a.x13 * a.x20 - a.x03 * a.x10 * a.x21 + a.x00 * a.x13 * a.x21 + a.x01 * a.x10 * a.x23 - a.x00 * a.x11 * a.x23) / d;\r\n        m.x30 = (a.x12 * a.x21 * a.x30 - a.x11 * a.x22 * a.x30 - a.x12 * a.x20 * a.x31 + a.x10 * a.x22 * a.x31 + a.x11 * a.x20 * a.x32 - a.x10 * a.x21 * a.x32) / d;\r\n        m.x31 = (a.x01 * a.x22 * a.x30 - a.x02 * a.x21 * a.x30 + a.x02 * a.x20 * a.x31 - a.x00 * a.x22 * a.x31 - a.x01 * a.x20 * a.x32 + a.x00 * a.x21 * a.x32) / d;\r\n        m.x32 = (a.x02 * a.x11 * a.x30 - a.x01 * a.x12 * a.x30 - a.x02 * a.x10 * a.x31 + a.x00 * a.x12 * a.x31 + a.x01 * a.x10 * a.x32 - a.x00 * a.x11 * a.x32) / d;\r\n        m.x33 = (a.x01 * a.x12 * a.x20 - a.x02 * a.x11 * a.x20 + a.x02 * a.x10 * a.x21 - a.x00 * a.x12 * a.x21 - a.x01 * a.x10 * a.x22 + a.x00 * a.x11 * a.x22) / d;\r\n        return m;\r\n    }\r\n}\r\nMatrix4.SIZE = 16;\r\nexports.Matrix4 = Matrix4;\r\n"
        },
        {
          "id": 13,
          "identifier": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-core\\src\\pointer\\src\\DirectMemory.ts",
          "name": "./packages/render-core/src/pointer/src/DirectMemory.ts",
          "index": 8,
          "index2": 6,
          "size": 20683,
          "cacheable": true,
          "built": false,
          "optional": false,
          "prefetched": false,
          "chunks": [
            0
          ],
          "assets": [],
          "issuer": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-core\\src\\engine\\math\\Vector3.ts",
          "issuerId": 1,
          "issuerName": "./packages/render-core/src/engine/math/Vector3.ts",
          "failed": false,
          "errors": 2,
          "warnings": 0,
          "reasons": [
            {
              "moduleId": 1,
              "moduleIdentifier": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-core\\src\\engine\\math\\Vector3.ts",
              "module": "./packages/render-core/src/engine/math/Vector3.ts",
              "moduleName": "./packages/render-core/src/engine/math/Vector3.ts",
              "type": "cjs require",
              "userRequest": "../../pointer/src/DirectMemory",
              "loc": "3:23-64"
            },
            {
              "moduleId": 30,
              "moduleIdentifier": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-core\\src\\engine\\scene\\tree\\SharedNode.ts",
              "module": "./packages/render-core/src/engine/scene/tree/SharedNode.ts",
              "moduleName": "./packages/render-core/src/engine/scene/tree/SharedNode.ts",
              "type": "cjs require",
              "userRequest": "../../../pointer/src/DirectMemory",
              "loc": "9:23-67"
            },
            {
              "moduleId": 49,
              "moduleIdentifier": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-core\\src\\pointer\\src\\Pointer.ts",
              "module": "./packages/render-core/src/pointer/src/Pointer.ts",
              "moduleName": "./packages/render-core/src/pointer/src/Pointer.ts",
              "type": "cjs require",
              "userRequest": "./DirectMemory",
              "loc": "3:23-48"
            }
          ],
          "usedExports": true,
          "providedExports": null,
          "optimizationBailout": [],
          "depth": 3,
          "source": "\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst MemoryUtils_1 = require(\"./MemoryUtils\");\r\nconst UTF8_1 = require(\"./UTF8\");\r\nclass DirectMemory {\r\n    constructor(buffer, offset = 0, length = 0) {\r\n        this.buffer = buffer;\r\n        this.offset = offset;\r\n        this.BUFFER_EXT_SIZE = 32 * 1024 * 1024;\r\n        if (buffer == undefined) {\r\n            buffer = new ArrayBuffer(this.BUFFER_EXT_SIZE);\r\n            this.write_position = 0;\r\n        }\r\n        else if (buffer == null) {\r\n            this.write_position = 0;\r\n        }\r\n        else {\r\n            this.write_position = length > 0 ? length : buffer.byteLength;\r\n        }\r\n        if (buffer) {\r\n            this.data = new Uint8Array(buffer, offset, length > 0 ? length : buffer.byteLength);\r\n        }\r\n        this._position = 0;\r\n        this.endian = DirectMemory.BIG_ENDIAN;\r\n    }\r\n    get phyPosition() {\r\n        return this._position + this.data.byteOffset;\r\n    }\r\n    get bufferOffset() {\r\n        return this.data.byteOffset;\r\n    }\r\n    get position() {\r\n        return this._position;\r\n    }\r\n    set position(value) {\r\n        if (this._position < value) {\r\n            if (!this.validate(this._position - value)) {\r\n                return;\r\n            }\r\n        }\r\n        this._position = value;\r\n        this.write_position = value > this.write_position ? value : this.write_position;\r\n    }\r\n    get length() {\r\n        return this.write_position;\r\n    }\r\n    set length(value) {\r\n        this.validateBuffer(value);\r\n    }\r\n    get bytesAvailable() {\r\n        return this.data.byteLength - this._position;\r\n    }\r\n    clear() {\r\n        this._position = 0;\r\n    }\r\n    setBuffer(buffer, offset = 0, length = 0) {\r\n        if (buffer) {\r\n            this.data = new Uint8Array(buffer, offset, length > 0 ? length : buffer.byteLength);\r\n            this.write_position = length > 0 ? length : buffer.byteLength;\r\n        }\r\n        else {\r\n            this.write_position = 0;\r\n        }\r\n        this._position = 0;\r\n    }\r\n    readBoolean() {\r\n        if (!this.validate(DirectMemory.SIZE_OF_BOOLEAN))\r\n            return null;\r\n        return this.data[this.position++] != 0;\r\n    }\r\n    readByte() {\r\n        if (!this.validate(DirectMemory.SIZE_OF_INT8))\r\n            return null;\r\n        return this.data[this.position++];\r\n    }\r\n    readBytes(_bytes = null, offset = 0, length = 0, createNewBuffer = false) {\r\n        if (length == 0) {\r\n            length = this.bytesAvailable;\r\n        }\r\n        else if (!this.validate(length))\r\n            return null;\r\n        if (createNewBuffer) {\r\n            _bytes = _bytes == null ? new DirectMemory(new ArrayBuffer(length)) : _bytes;\r\n            for (var i = 0; i < length; i++) {\r\n                _bytes.data[i + offset] = this.data[this.position++];\r\n            }\r\n        }\r\n        else {\r\n            _bytes = _bytes == null ? new DirectMemory(null) : _bytes;\r\n            _bytes.setBuffer(this.data.buffer, this.bufferOffset + this.position, length);\r\n            this.position += length;\r\n        }\r\n        return _bytes;\r\n    }\r\n    readDouble() {\r\n        if (!this.validate(DirectMemory.SIZE_OF_FLOAT64))\r\n            return null;\r\n        var value = MemoryUtils_1.MemoryUtils.readFloat64(this.data, this.position, this.endian == DirectMemory.LITTLE_ENDIAN);\r\n        this.position += DirectMemory.SIZE_OF_FLOAT64;\r\n        return value;\r\n    }\r\n    readFloat() {\r\n        if (!this.validate(DirectMemory.SIZE_OF_FLOAT32))\r\n            return null;\r\n        var value = MemoryUtils_1.MemoryUtils.readFloat32(this.data, this.position, this.endian == DirectMemory.LITTLE_ENDIAN);\r\n        this.position += DirectMemory.SIZE_OF_FLOAT32;\r\n        return value;\r\n    }\r\n    readInt() {\r\n        if (!this.validate(DirectMemory.SIZE_OF_INT32))\r\n            return null;\r\n        var value = MemoryUtils_1.MemoryUtils.readInt32(this.data, this.position, this.endian == DirectMemory.LITTLE_ENDIAN);\r\n        this.position += DirectMemory.SIZE_OF_INT32;\r\n        return value;\r\n    }\r\n    readMultiByte(length, charSet) {\r\n        if (!this.validate(length))\r\n            return null;\r\n        throw \"readMultiByte: Not Implemented!\";\r\n    }\r\n    readShort() {\r\n        if (!this.validate(DirectMemory.SIZE_OF_INT16))\r\n            return null;\r\n        var value = MemoryUtils_1.MemoryUtils.readInt16(this.data, this.position, this.endian == DirectMemory.LITTLE_ENDIAN);\r\n        this.position += DirectMemory.SIZE_OF_INT16;\r\n        return value;\r\n    }\r\n    readUnsignedByte() {\r\n        if (!this.validate(DirectMemory.SIZE_OF_UINT8))\r\n            return null;\r\n        return this.data[this.position++];\r\n    }\r\n    readUnsignedInt() {\r\n        if (!this.validate(DirectMemory.SIZE_OF_UINT32))\r\n            return null;\r\n        var value = MemoryUtils_1.MemoryUtils.readUint32(this.data, this.position, this.endian == DirectMemory.LITTLE_ENDIAN);\r\n        this.position += DirectMemory.SIZE_OF_UINT32;\r\n        return value;\r\n    }\r\n    readVariableSizedUnsignedInt() {\r\n        var value;\r\n        var c = this.readUnsignedByte();\r\n        if (c != 0xFF) {\r\n            value = c << 8;\r\n            c = this.readUnsignedByte();\r\n            value |= c;\r\n        }\r\n        else {\r\n            c = this.readUnsignedByte();\r\n            value = c << 16;\r\n            c = this.readUnsignedByte();\r\n            value |= c << 8;\r\n            c = this.readUnsignedByte();\r\n            value |= c;\r\n        }\r\n        return value;\r\n    }\r\n    readU16VX() {\r\n        return (this.readUnsignedByte() << 8) | this.readUnsignedByte();\r\n    }\r\n    readUnsignedShort() {\r\n        if (!this.validate(DirectMemory.SIZE_OF_UINT16))\r\n            return null;\r\n        var value = MemoryUtils_1.MemoryUtils.readUint16(this.data, this.position, this.endian == DirectMemory.LITTLE_ENDIAN);\r\n        this.position += DirectMemory.SIZE_OF_UINT16;\r\n        return value;\r\n    }\r\n    readUTF() {\r\n        if (!this.validate(DirectMemory.SIZE_OF_UINT16))\r\n            return null;\r\n        var length = MemoryUtils_1.MemoryUtils.readUint16(this.data, this.position, this.endian == DirectMemory.LITTLE_ENDIAN);\r\n        this.position += DirectMemory.SIZE_OF_UINT16;\r\n        if (length > 0) {\r\n            return this.readUTFBytes(length);\r\n        }\r\n        else {\r\n            return \"\";\r\n        }\r\n    }\r\n    readUTFBytes(length) {\r\n        if (!this.validate(length))\r\n            return null;\r\n        var _bytes = new Uint8Array(this.buffer, this.bufferOffset + this.position, length);\r\n        this.position += length;\r\n        return UTF8_1.UTF8.decode(_bytes);\r\n    }\r\n    readStandardString(length) {\r\n        if (!this.validate(length))\r\n            return null;\r\n        var str = \"\";\r\n        for (var i = 0; i < length; i++) {\r\n            str += String.fromCharCode(this.data[this.position++]);\r\n        }\r\n        return str;\r\n    }\r\n    readStringTillNull(keepEvenByte = true) {\r\n        var str = \"\";\r\n        var num = 0;\r\n        while (this.bytesAvailable > 0) {\r\n            var _byte = this.data[this.position++];\r\n            num++;\r\n            if (_byte != 0) {\r\n                str += String.fromCharCode(_byte);\r\n            }\r\n            else {\r\n                if (keepEvenByte && num % 2 != 0) {\r\n                    this.position++;\r\n                }\r\n                break;\r\n            }\r\n        }\r\n        return str;\r\n    }\r\n    writeBoolean(value) {\r\n        this.validateBuffer(DirectMemory.SIZE_OF_BOOLEAN);\r\n        this.data[this.position++] = value ? 1 : 0;\r\n    }\r\n    writeByte(value) {\r\n        this.validateBuffer(DirectMemory.SIZE_OF_INT8);\r\n        this.data[this.position++] = value;\r\n    }\r\n    writeUnsignedByte(value) {\r\n        this.validateBuffer(DirectMemory.SIZE_OF_UINT8);\r\n        this.data[this.position++] = value;\r\n    }\r\n    writeBytes(_bytes, offset = 0, length = 0) {\r\n        this.validateBuffer(length);\r\n        length = length > 0 ? length : _bytes.length;\r\n        var tmp_data = new Uint8Array(_bytes.buffer, offset, length);\r\n        for (var i = 0; i < length; i++) {\r\n            this.data[offset + this.position++] = tmp_data[i];\r\n        }\r\n    }\r\n    writeDouble(value) {\r\n        this.validateBuffer(DirectMemory.SIZE_OF_FLOAT64);\r\n        MemoryUtils_1.MemoryUtils.writeFloat64(this.data, this.position, value, this.endian == DirectMemory.LITTLE_ENDIAN);\r\n        this.position += DirectMemory.SIZE_OF_FLOAT64;\r\n    }\r\n    writeFloat(value) {\r\n        this.validateBuffer(DirectMemory.SIZE_OF_FLOAT32);\r\n        MemoryUtils_1.MemoryUtils.writeFloat32(this.data, this.position, value, this.endian == DirectMemory.LITTLE_ENDIAN);\r\n        this.position += DirectMemory.SIZE_OF_FLOAT32;\r\n    }\r\n    writeInt(value) {\r\n        this.validateBuffer(DirectMemory.SIZE_OF_INT32);\r\n        MemoryUtils_1.MemoryUtils.writeInt32(this.data, this.position, value, this.endian == DirectMemory.LITTLE_ENDIAN);\r\n        this.position += DirectMemory.SIZE_OF_INT32;\r\n    }\r\n    writeMultiByte(value, charSet) {\r\n    }\r\n    writeShort(value) {\r\n        this.validateBuffer(DirectMemory.SIZE_OF_INT16);\r\n        MemoryUtils_1.MemoryUtils.writeInt16(this.data, this.position, value, this.endian == DirectMemory.LITTLE_ENDIAN);\r\n        this.position += DirectMemory.SIZE_OF_INT16;\r\n    }\r\n    writeUnsignedShort(value) {\r\n        this.validateBuffer(DirectMemory.SIZE_OF_UINT16);\r\n        MemoryUtils_1.MemoryUtils.writeUint16(this.data, this.position, value, this.endian == DirectMemory.LITTLE_ENDIAN);\r\n        this.position += DirectMemory.SIZE_OF_UINT16;\r\n    }\r\n    writeUnsignedInt(value) {\r\n        this.validateBuffer(DirectMemory.SIZE_OF_UINT32);\r\n        MemoryUtils_1.MemoryUtils.writeUint32(this.data, this.position, value, this.endian == DirectMemory.LITTLE_ENDIAN);\r\n        this.position += DirectMemory.SIZE_OF_UINT32;\r\n    }\r\n    writeUTF(value) {\r\n        var utf8bytes = UTF8_1.UTF8.encode(value);\r\n        var length = utf8bytes.length;\r\n        this.validateBuffer(DirectMemory.SIZE_OF_UINT16 + length);\r\n        MemoryUtils_1.MemoryUtils.writeUint16(this.data, this.position, length, this.endian === DirectMemory.LITTLE_ENDIAN);\r\n        this.position += DirectMemory.SIZE_OF_UINT16;\r\n        this.writeUint8Array(utf8bytes);\r\n    }\r\n    writeUTFBytes(value) {\r\n        this.writeUint8Array(UTF8_1.UTF8.encode(value));\r\n    }\r\n    toString() {\r\n        return \"[DirectMemory] length:\" + this.length + \", bytesAvailable:\" + this.bytesAvailable;\r\n    }\r\n    writeUint8Array(_bytes) {\r\n        this.validateBuffer(this.position + _bytes.length);\r\n        for (var i = 0; i < _bytes.length; i++) {\r\n            this.data[this.position++] = _bytes[i];\r\n        }\r\n    }\r\n    writeUint16Array(_bytes) {\r\n        this.validateBuffer(this.position + _bytes.length);\r\n        for (var i = 0; i < _bytes.length; i++) {\r\n            MemoryUtils_1.MemoryUtils.writeUint16(this.data, this.position, _bytes[i], this.endian === DirectMemory.LITTLE_ENDIAN);\r\n            this.position += DirectMemory.SIZE_OF_UINT16;\r\n        }\r\n    }\r\n    writeUint32Array(_bytes) {\r\n        this.validateBuffer(this.position + _bytes.length);\r\n        for (var i = 0; i < _bytes.length; i++) {\r\n            MemoryUtils_1.MemoryUtils.writeUint32(this.data, this.position, _bytes[i], this.endian === DirectMemory.LITTLE_ENDIAN);\r\n            this.position += DirectMemory.SIZE_OF_UINT32;\r\n        }\r\n    }\r\n    writeInt8Array(_bytes) {\r\n        this.validateBuffer(this.position + _bytes.length);\r\n        for (var i = 0; i < _bytes.length; i++) {\r\n            this.data[this.position++] = _bytes[i];\r\n        }\r\n    }\r\n    writeInt16Array(_bytes) {\r\n        this.validateBuffer(this.position + _bytes.length);\r\n        for (var i = 0; i < _bytes.length; i++) {\r\n            MemoryUtils_1.MemoryUtils.writeInt16(this.data, this.position, _bytes[i], this.endian === DirectMemory.LITTLE_ENDIAN);\r\n            this.position += DirectMemory.SIZE_OF_INT16;\r\n        }\r\n    }\r\n    writeInt32Array(_bytes) {\r\n        this.validateBuffer(this.position + _bytes.length);\r\n        for (var i = 0; i < _bytes.length; i++) {\r\n            MemoryUtils_1.MemoryUtils.writeInt32(this.data, this.position, _bytes[i], this.endian === DirectMemory.LITTLE_ENDIAN);\r\n            this.position += DirectMemory.SIZE_OF_INT32;\r\n        }\r\n    }\r\n    writeFloat32Array(_bytes) {\r\n        this.validateBuffer(this.position + _bytes.length);\r\n        for (var i = 0; i < _bytes.length; i++) {\r\n            MemoryUtils_1.MemoryUtils.writeFloat32(this.data, this.position, _bytes[i], this.endian === DirectMemory.LITTLE_ENDIAN);\r\n            this.position += DirectMemory.SIZE_OF_FLOAT32;\r\n        }\r\n    }\r\n    writeFloat64Array(_bytes) {\r\n        this.validateBuffer(this.position + _bytes.length);\r\n        for (var i = 0; i < _bytes.length; i++) {\r\n            MemoryUtils_1.MemoryUtils.writeFloat64(this.data, this.position, _bytes[i], this.endian === DirectMemory.LITTLE_ENDIAN);\r\n            this.position += DirectMemory.SIZE_OF_FLOAT64;\r\n        }\r\n    }\r\n    readUint8Array(length, createNewBuffer = true) {\r\n        if (!this.validate(length))\r\n            return null;\r\n        if (!createNewBuffer) {\r\n            var result = new Uint8Array(this.buffer, this.bufferOffset + this.position, length);\r\n            this.position += length;\r\n        }\r\n        else {\r\n            result = new Uint8Array(new ArrayBuffer(length));\r\n            for (var i = 0; i < length; i++) {\r\n                result[i] = this.data[this.position];\r\n                this.position += DirectMemory.SIZE_OF_UINT8;\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n    readUint16Array(length, createNewBuffer = true) {\r\n        var size = length * DirectMemory.SIZE_OF_UINT16;\r\n        if (!this.validate(size))\r\n            return null;\r\n        if (!createNewBuffer) {\r\n            var result = new Uint16Array(this.buffer, this.bufferOffset + this.position, length);\r\n            this.position += size;\r\n        }\r\n        else {\r\n            result = new Uint16Array(new ArrayBuffer(size));\r\n            for (var i = 0; i < length; i++) {\r\n                result[i] = MemoryUtils_1.MemoryUtils.readUint16(this.data, this.position, this.endian === DirectMemory.LITTLE_ENDIAN);\r\n                this.position += DirectMemory.SIZE_OF_UINT16;\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n    readUint32Array(length, createNewBuffer = true) {\r\n        var size = length * DirectMemory.SIZE_OF_UINT32;\r\n        if (!this.validate(size))\r\n            return null;\r\n        if (!createNewBuffer) {\r\n            var result = new Uint32Array(this.buffer, this.bufferOffset + this.position, length);\r\n            this.position += size;\r\n        }\r\n        else {\r\n            result = new Uint32Array(new ArrayBuffer(size));\r\n            for (var i = 0; i < length; i++) {\r\n                result[i] = MemoryUtils_1.MemoryUtils.readUint32(this.data, this.position, this.endian === DirectMemory.LITTLE_ENDIAN);\r\n                this.position += DirectMemory.SIZE_OF_UINT32;\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n    readInt8Array(length, createNewBuffer = true) {\r\n        if (!this.validate(length))\r\n            return null;\r\n        if (!createNewBuffer) {\r\n            var result = new Int8Array(this.buffer, this.bufferOffset + this.position, length);\r\n            this.position += length;\r\n        }\r\n        else {\r\n            result = new Int8Array(new ArrayBuffer(length));\r\n            for (var i = 0; i < length; i++) {\r\n                result[i] = this.data[this.position];\r\n                this.position += DirectMemory.SIZE_OF_INT8;\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n    readInt16Array(length, createNewBuffer = true) {\r\n        var size = length * DirectMemory.SIZE_OF_INT16;\r\n        if (!this.validate(size))\r\n            return null;\r\n        if (!createNewBuffer) {\r\n            var result = new Int16Array(this.buffer, this.bufferOffset + this.position, length);\r\n            this.position += size;\r\n        }\r\n        else {\r\n            result = new Int16Array(new ArrayBuffer(size));\r\n            for (var i = 0; i < length; i++) {\r\n                result[i] = MemoryUtils_1.MemoryUtils.readInt16(this.data, this.position, this.endian === DirectMemory.LITTLE_ENDIAN);\r\n                this.position += DirectMemory.SIZE_OF_INT16;\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n    readInt32Array(length, createNewBuffer = true) {\r\n        var size = length * DirectMemory.SIZE_OF_INT32;\r\n        if (!this.validate(size))\r\n            return null;\r\n        if (!createNewBuffer) {\r\n            if ((this.bufferOffset + this.position) % 4 == 0) {\r\n                var result = new Int32Array(this.buffer, this.bufferOffset + this.position, length);\r\n                this.position += size;\r\n            }\r\n            else {\r\n                var tmp = new Uint8Array(new ArrayBuffer(size));\r\n                for (var i = 0; i < size; i++) {\r\n                    tmp[i] = this.data[this.position];\r\n                    this.position += DirectMemory.SIZE_OF_UINT8;\r\n                }\r\n                result = new Int32Array(tmp.buffer);\r\n            }\r\n        }\r\n        else {\r\n            result = new Int32Array(new ArrayBuffer(size));\r\n            for (var i = 0; i < length; i++) {\r\n                result[i] = MemoryUtils_1.MemoryUtils.readInt32(this.data, this.position, this.endian === DirectMemory.LITTLE_ENDIAN);\r\n                this.position += DirectMemory.SIZE_OF_INT32;\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n    readFloat32Array(length, createNewBuffer = true) {\r\n        var size = length * DirectMemory.SIZE_OF_FLOAT32;\r\n        if (!this.validate(size))\r\n            return null;\r\n        if (!createNewBuffer) {\r\n            if ((this.bufferOffset + this.position) % 4 == 0) {\r\n                var result = new Float32Array(this.buffer, this.bufferOffset + this.position, length);\r\n                this.position += size;\r\n            }\r\n            else {\r\n                var tmp = new Uint8Array(new ArrayBuffer(size));\r\n                for (var i = 0; i < size; i++) {\r\n                    tmp[i] = this.data[this.position];\r\n                    this.position += DirectMemory.SIZE_OF_UINT8;\r\n                }\r\n                result = new Float32Array(tmp.buffer);\r\n            }\r\n        }\r\n        else {\r\n            result = new Float32Array(new ArrayBuffer(size));\r\n            for (var i = 0; i < length; i++) {\r\n                result[i] = MemoryUtils_1.MemoryUtils.readFloat32(this.data, this.position, this.endian === DirectMemory.LITTLE_ENDIAN);\r\n                this.position += DirectMemory.SIZE_OF_FLOAT32;\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n    readFloat64Array(length, createNewBuffer = true) {\r\n        var size = length * DirectMemory.SIZE_OF_FLOAT64;\r\n        if (!this.validate(size))\r\n            return null;\r\n        if (!createNewBuffer) {\r\n            var result = new Float64Array(this.buffer, this.position, length);\r\n            this.position += size;\r\n        }\r\n        else {\r\n            result = new Float64Array(new ArrayBuffer(size));\r\n            for (var i = 0; i < length; i++) {\r\n                result[i] = MemoryUtils_1.MemoryUtils.readFloat64(this.data, this.position, this.endian === DirectMemory.LITTLE_ENDIAN);\r\n                this.position += DirectMemory.SIZE_OF_FLOAT64;\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n    validate(len) {\r\n        if (this.data.byteLength > 0 && this._position + len <= this.data.byteLength) {\r\n            return true;\r\n        }\r\n        else {\r\n            throw \"Error #2030: End of file was encountered\";\r\n        }\r\n    }\r\n    validateBuffer(len) {\r\n        this.write_position = len > this.write_position ? len : this.write_position;\r\n        if (this.data.byteLength < len) {\r\n            var tmp = new Uint8Array(new SharedArrayBuffer(len + this.BUFFER_EXT_SIZE));\r\n            tmp.set(new Uint8Array(this.data.buffer));\r\n            this.data.buffer = tmp.buffer;\r\n        }\r\n    }\r\n}\r\nDirectMemory.BIG_ENDIAN = \"bigEndian\";\r\nDirectMemory.LITTLE_ENDIAN = \"littleEndian\";\r\nDirectMemory.MIN_FLOAT32_VALUE = 1.1754943508222875e-38;\r\nDirectMemory.SIZE_OF_BOOLEAN = 1;\r\nDirectMemory.SIZE_OF_INT8 = 1;\r\nDirectMemory.SIZE_OF_INT16 = 2;\r\nDirectMemory.SIZE_OF_INT32 = 4;\r\nDirectMemory.SIZE_OF_INT64 = 8;\r\nDirectMemory.SIZE_OF_UINT8 = 1;\r\nDirectMemory.SIZE_OF_UINT16 = 2;\r\nDirectMemory.SIZE_OF_UINT32 = 4;\r\nDirectMemory.SIZE_OF_UINT64 = 8;\r\nDirectMemory.SIZE_OF_FLOAT32 = 4;\r\nDirectMemory.SIZE_OF_FLOAT64 = 8;\r\nexports.DirectMemory = DirectMemory;\r\n"
        },
        {
          "id": 14,
          "identifier": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-core\\src\\engine\\scene\\Axis.ts",
          "name": "./packages/render-core/src/engine/scene/Axis.ts",
          "index": 17,
          "index2": 11,
          "size": 325,
          "cacheable": true,
          "built": false,
          "optional": false,
          "prefetched": false,
          "chunks": [
            0
          ],
          "assets": [],
          "issuer": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-core\\src\\engine\\scene\\shapes\\Box.ts",
          "issuerId": 5,
          "issuerName": "./packages/render-core/src/engine/scene/shapes/Box.ts",
          "failed": false,
          "errors": 0,
          "warnings": 0,
          "reasons": [
            {
              "moduleId": 5,
              "moduleIdentifier": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-core\\src\\engine\\scene\\shapes\\Box.ts",
              "module": "./packages/render-core/src/engine/scene/shapes/Box.ts",
              "moduleName": "./packages/render-core/src/engine/scene/shapes/Box.ts",
              "type": "cjs require",
              "userRequest": "../Axis",
              "loc": "4:15-33"
            },
            {
              "moduleId": 30,
              "moduleIdentifier": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-core\\src\\engine\\scene\\tree\\SharedNode.ts",
              "module": "./packages/render-core/src/engine/scene/tree/SharedNode.ts",
              "moduleName": "./packages/render-core/src/engine/scene/tree/SharedNode.ts",
              "type": "cjs require",
              "userRequest": "../Axis",
              "loc": "3:15-33"
            },
            {
              "moduleId": 42,
              "moduleIdentifier": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-core\\src\\engine\\scene\\tree\\Node.ts",
              "module": "./packages/render-core/src/engine/scene/tree/Node.ts",
              "moduleName": "./packages/render-core/src/engine/scene/tree/Node.ts",
              "type": "cjs require",
              "userRequest": "../Axis",
              "loc": "3:15-33"
            }
          ],
          "usedExports": true,
          "providedExports": null,
          "optimizationBailout": [],
          "depth": 4,
          "source": "\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar Axis;\r\n(function (Axis) {\r\n    Axis[Axis[\"AxisNone\"] = 0] = \"AxisNone\";\r\n    Axis[Axis[\"AxisX\"] = 1] = \"AxisX\";\r\n    Axis[Axis[\"AxisY\"] = 2] = \"AxisY\";\r\n    Axis[Axis[\"AxisZ\"] = 3] = \"AxisZ\";\r\n})(Axis = exports.Axis || (exports.Axis = {}));\r\n"
        },
        {
          "id": 15,
          "identifier": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-core\\src\\engine\\utils\\MathUtils.ts",
          "name": "./packages/render-core/src/engine/utils/MathUtils.ts",
          "index": 22,
          "index2": 16,
          "size": 1025,
          "cacheable": true,
          "built": false,
          "optional": false,
          "prefetched": false,
          "chunks": [
            0
          ],
          "assets": [],
          "issuer": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-core\\src\\engine\\scene\\materials\\Texture.ts",
          "issuerId": 10,
          "issuerName": "./packages/render-core/src/engine/scene/materials/Texture.ts",
          "failed": false,
          "errors": 0,
          "warnings": 0,
          "reasons": [
            {
              "moduleId": 10,
              "moduleIdentifier": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-core\\src\\engine\\scene\\materials\\Texture.ts",
              "module": "./packages/render-core/src/engine/scene/materials/Texture.ts",
              "moduleName": "./packages/render-core/src/engine/scene/materials/Texture.ts",
              "type": "cjs require",
              "userRequest": "../../utils/MathUtils",
              "loc": "6:20-52"
            },
            {
              "moduleId": 30,
              "moduleIdentifier": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-core\\src\\engine\\scene\\tree\\SharedNode.ts",
              "module": "./packages/render-core/src/engine/scene/tree/SharedNode.ts",
              "moduleName": "./packages/render-core/src/engine/scene/tree/SharedNode.ts",
              "type": "cjs require",
              "userRequest": "../../utils/MathUtils",
              "loc": "7:20-52"
            },
            {
              "moduleId": 42,
              "moduleIdentifier": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-core\\src\\engine\\scene\\tree\\Node.ts",
              "module": "./packages/render-core/src/engine/scene/tree/Node.ts",
              "moduleName": "./packages/render-core/src/engine/scene/tree/Node.ts",
              "type": "cjs require",
              "userRequest": "../../utils/MathUtils",
              "loc": "7:20-52"
            }
          ],
          "usedExports": true,
          "providedExports": null,
          "optimizationBailout": [],
          "depth": 3,
          "source": "\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nclass MathUtils {\r\n    static radians(degrees) {\r\n        return degrees * Math.PI / 180;\r\n    }\r\n    static degrees(radians) {\r\n        return radians * 180 / Math.PI;\r\n    }\r\n    static median(items) {\r\n        let n = items.length;\r\n        if (n == 0) {\r\n            return 0;\r\n        }\r\n        else if (n % 2 == 1) {\r\n            return items[n / 2];\r\n        }\r\n        else {\r\n            var a = items[n / 2 - 1];\r\n            var b = items[n / 2];\r\n            return (a + b) / 2;\r\n        }\r\n    }\r\n    static fract(x) {\r\n        let n = MathUtils.Modf(x);\r\n        return n.frac;\r\n    }\r\n    static Modf(f) {\r\n        var int = Math.floor(f);\r\n        var frac = f - int;\r\n        return { int: int, frac: frac };\r\n    }\r\n    static clampInt(x, lo, hi) {\r\n        if (x < lo) {\r\n            return lo;\r\n        }\r\n        if (x > hi) {\r\n            return hi;\r\n        }\r\n        return x;\r\n    }\r\n}\r\nexports.MathUtils = MathUtils;\r\n"
        },
        {
          "id": 16,
          "identifier": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-core\\src\\engine\\scene\\shapes\\Cube.ts",
          "name": "./packages/render-core/src/engine/scene/shapes/Cube.ts",
          "index": 24,
          "index2": 30,
          "size": 4135,
          "cacheable": true,
          "built": false,
          "optional": false,
          "prefetched": false,
          "chunks": [
            0
          ],
          "assets": [],
          "issuer": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-core\\src\\engine\\scene\\shapes\\Shape.ts",
          "issuerId": 6,
          "issuerName": "./packages/render-core/src/engine/scene/shapes/Shape.ts",
          "failed": false,
          "errors": 3,
          "warnings": 0,
          "reasons": [
            {
              "moduleId": 6,
              "moduleIdentifier": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-core\\src\\engine\\scene\\shapes\\Shape.ts",
              "module": "./packages/render-core/src/engine/scene/shapes/Shape.ts",
              "moduleName": "./packages/render-core/src/engine/scene/shapes/Shape.ts",
              "type": "cjs require",
              "userRequest": "./Cube",
              "loc": "3:15-32"
            },
            {
              "moduleId": 41,
              "moduleIdentifier": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-core\\src\\engine\\scene\\Scene.ts",
              "module": "./packages/render-core/src/engine/scene/Scene.ts",
              "moduleName": "./packages/render-core/src/engine/scene/Scene.ts",
              "type": "cjs require",
              "userRequest": "./shapes/Cube",
              "loc": "9:15-39"
            },
            {
              "moduleId": 52,
              "moduleIdentifier": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-client\\src\\views\\GIJSView.ts",
              "module": "./packages/render-client/src/views/GIJSView.ts",
              "moduleName": "./packages/render-client/src/views/GIJSView.ts",
              "type": "cjs require",
              "userRequest": "../../../render-core/src/engine/scene/shapes/Cube",
              "loc": "7:15-75"
            }
          ],
          "usedExports": true,
          "providedExports": null,
          "optimizationBailout": [],
          "depth": 2,
          "source": "\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst Vector3_1 = require(\"../../math/Vector3\");\r\nconst Material_1 = require(\"../materials/Material\");\r\nconst Box_1 = require(\"./Box\");\r\nconst Constants_1 = require(\"../../math/Constants\");\r\nconst Hit_1 = require(\"../../math/Hit\");\r\nconst Hit_2 = require(\"../../math/Hit\");\r\nconst Shape_1 = require(\"./Shape\");\r\nconst MaterialUtils_1 = require(\"../materials/MaterialUtils\");\r\nclass Cube {\r\n    constructor(min = new Vector3_1.Vector3(), max = new Vector3_1.Vector3(), material = null, box = null) {\r\n        this.min = min;\r\n        this.max = max;\r\n        this.material = material;\r\n        this.box = box;\r\n        this.type = Shape_1.ShapeType.CUBE;\r\n        this.memorySize = (Vector3_1.Vector3.SIZE * 2) + 2;\r\n    }\r\n    write(memory) {\r\n        memory.writeByte(this.type);\r\n        this.min.write(memory);\r\n        this.max.write(memory);\r\n        memory.writeInt(this.material.index);\r\n        return memory.position;\r\n    }\r\n    read(memory) {\r\n        this.min.read(memory);\r\n        this.max.read(memory);\r\n        var materialIndex = memory.readInt();\r\n        this.box = new Box_1.Box(this.min, this.max);\r\n        var material = Material_1.Material.map[materialIndex];\r\n        if (material) {\r\n            this.material = material;\r\n        }\r\n        return memory.position;\r\n    }\r\n    directWrite(memory, offset) {\r\n        memory[offset++] = this.type;\r\n        offset = this.min.directWrite(memory, offset);\r\n        offset = this.max.directWrite(memory, offset);\r\n        memory[offset++] = this.material.index;\r\n        return offset;\r\n    }\r\n    directRead(memory, offset) {\r\n        offset = this.min.directRead(memory, offset);\r\n        offset = this.max.directRead(memory, offset);\r\n        this.box = new Box_1.Box(this.min, this.max);\r\n        this.material.index = memory[offset++];\r\n        var material = Material_1.Material.map[this.material.index];\r\n        if (material) {\r\n            this.material = material;\r\n        }\r\n        return offset;\r\n    }\r\n    static fromJson(shape) {\r\n        return new Cube(Vector3_1.Vector3.fromJson(shape.min), Vector3_1.Vector3.fromJson(shape.max), MaterialUtils_1.MaterialUtils.fromJson(shape.material), Box_1.Box.fromJson(shape.box));\r\n    }\r\n    static newCube(min, max, material) {\r\n        var box = new Box_1.Box(min, max);\r\n        return new Cube(min, max, material, box);\r\n    }\r\n    compile() {\r\n    }\r\n    intersect(r) {\r\n        var n = this.min.sub(r.origin).div(r.direction);\r\n        var f = this.max.sub(r.origin).div(r.direction);\r\n        let _n = n;\r\n        n = _n.min(f);\r\n        f = _n.max(f);\r\n        var t0 = Math.max(Math.max(n.x, n.y), n.z);\r\n        var t1 = Math.min(Math.min(f.x, f.y), f.z);\r\n        if (t0 > 0 && t0 < t1) {\r\n            return new Hit_1.Hit(this, t0);\r\n        }\r\n        return Hit_2.NoHit;\r\n    }\r\n    getColor(p) {\r\n        return this.material.color;\r\n    }\r\n    getMaterial(p) {\r\n        return this.material;\r\n    }\r\n    getNormal(p) {\r\n        if (p.x < this.min.x + Constants_1.EPS) {\r\n            return new Vector3_1.Vector3(-1, 0, 0);\r\n        }\r\n        else if (p.x > this.max.x - Constants_1.EPS) {\r\n            return new Vector3_1.Vector3(1, 0, 0);\r\n        }\r\n        else if (p.y < this.min.y + Constants_1.EPS) {\r\n            return new Vector3_1.Vector3(0, -1, 0);\r\n        }\r\n        else if (p.y > this.max.y - Constants_1.EPS) {\r\n            return new Vector3_1.Vector3(0, 1, 0);\r\n        }\r\n        else if (p.z < this.min.z + Constants_1.EPS) {\r\n            return new Vector3_1.Vector3(0, 0, -1);\r\n        }\r\n        else if (p.z > this.max.z - Constants_1.EPS) {\r\n            return new Vector3_1.Vector3(0, 0, 1);\r\n        }\r\n        return new Vector3_1.Vector3(0, 1, 0);\r\n    }\r\n    getRandomPoint() {\r\n        var x = this.min.x + Math.random() * (this.max.x - this.min.x);\r\n        var y = this.min.y + Math.random() * (this.max.y - this.min.y);\r\n        var z = this.min.z + Math.random() * (this.max.z - this.min.z);\r\n        return new Vector3_1.Vector3(x, y, z);\r\n    }\r\n}\r\nexports.Cube = Cube;\r\n"
        },
        {
          "id": 17,
          "identifier": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-core\\src\\engine\\scene\\materials\\MaterialUtils.ts",
          "name": "./packages/render-core/src/engine/scene/materials/MaterialUtils.ts",
          "index": 30,
          "index2": 29,
          "size": 2147,
          "cacheable": true,
          "built": false,
          "optional": false,
          "prefetched": false,
          "chunks": [
            0
          ],
          "assets": [],
          "issuer": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-core\\src\\engine\\scene\\shapes\\Cube.ts",
          "issuerId": 16,
          "issuerName": "./packages/render-core/src/engine/scene/shapes/Cube.ts",
          "failed": false,
          "errors": 0,
          "warnings": 0,
          "reasons": [
            {
              "moduleId": 11,
              "moduleIdentifier": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-core\\src\\engine\\scene\\shapes\\Triangle.ts",
              "module": "./packages/render-core/src/engine/scene/shapes/Triangle.ts",
              "moduleName": "./packages/render-core/src/engine/scene/shapes/Triangle.ts",
              "type": "cjs require",
              "userRequest": "../materials/MaterialUtils",
              "loc": "11:24-61"
            },
            {
              "moduleId": 16,
              "moduleIdentifier": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-core\\src\\engine\\scene\\shapes\\Cube.ts",
              "module": "./packages/render-core/src/engine/scene/shapes/Cube.ts",
              "moduleName": "./packages/render-core/src/engine/scene/shapes/Cube.ts",
              "type": "cjs require",
              "userRequest": "../materials/MaterialUtils",
              "loc": "10:24-61"
            },
            {
              "moduleId": 18,
              "moduleIdentifier": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-core\\src\\engine\\scene\\shapes\\Sphere.ts",
              "module": "./packages/render-core/src/engine/scene/shapes/Sphere.ts",
              "moduleName": "./packages/render-core/src/engine/scene/shapes/Sphere.ts",
              "type": "cjs require",
              "userRequest": "../materials/MaterialUtils",
              "loc": "9:24-61"
            }
          ],
          "usedExports": true,
          "providedExports": null,
          "optimizationBailout": [],
          "depth": 3,
          "source": "\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst Material_1 = require(\"./Material\");\r\nconst Material_2 = require(\"./Material\");\r\nconst Color_1 = require(\"../../math/Color\");\r\nconst Texture_1 = require(\"./Texture\");\r\nconst Attenuation_1 = require(\"./Attenuation\");\r\nconst DiffuseMaterial_1 = require(\"./DiffuseMaterial\");\r\nconst SpecularMaterial_1 = require(\"./SpecularMaterial\");\r\nconst ClearMaterial_1 = require(\"./ClearMaterial\");\r\nconst GlossyMaterial_1 = require(\"./GlossyMaterial\");\r\nconst LightMaterial_1 = require(\"./LightMaterial\");\r\nclass MaterialUtils {\r\n    static fromJson(material) {\r\n        if (!material)\r\n            return null;\r\n        switch (material.type) {\r\n            case Material_2.MaterialType.GENERIC:\r\n                return new Material_1.Material(Color_1.Color.fromJson(material.color), Texture_1.Texture.fromJson(material.texture), Texture_1.Texture.fromJson(material.normalTexture), Texture_1.Texture.fromJson(material.bumpTexture), material.bumpMultiplier, material.emittance, Attenuation_1.Attenuation.fromJson(material.attenuation), material.index, material.gloss, material.tint, material.transparent);\r\n            case Material_2.MaterialType.DIFFUSE:\r\n                return new DiffuseMaterial_1.DiffuseMaterial(Color_1.Color.fromJson(material.color));\r\n            case Material_2.MaterialType.SPECULAR:\r\n                return new SpecularMaterial_1.SpecularMaterial(Color_1.Color.fromJson(material.color), material.index);\r\n            case Material_2.MaterialType.CLEAR:\r\n                return new ClearMaterial_1.ClearMaterial(material.index, material.gloss);\r\n            case Material_2.MaterialType.GLOSSY:\r\n                return new GlossyMaterial_1.GlossyMaterial(Color_1.Color.fromJson(material.color), material.index, material.gloss);\r\n            case Material_2.MaterialType.EMISSIVE:\r\n                return new LightMaterial_1.LightMaterial(Color_1.Color.fromJson(material.color), material.emittance, Attenuation_1.Attenuation.fromJson(material.attenuation));\r\n        }\r\n    }\r\n}\r\nMaterialUtils.debug = true;\r\nexports.MaterialUtils = MaterialUtils;\r\n"
        },
        {
          "id": 18,
          "identifier": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-core\\src\\engine\\scene\\shapes\\Sphere.ts",
          "name": "./packages/render-core/src/engine/scene/shapes/Sphere.ts",
          "index": 36,
          "index2": 31,
          "size": 4717,
          "cacheable": true,
          "built": false,
          "optional": false,
          "prefetched": false,
          "chunks": [
            0
          ],
          "assets": [],
          "issuer": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-core\\src\\engine\\scene\\shapes\\Shape.ts",
          "issuerId": 6,
          "issuerName": "./packages/render-core/src/engine/scene/shapes/Shape.ts",
          "failed": false,
          "errors": 3,
          "warnings": 0,
          "reasons": [
            {
              "moduleId": 6,
              "moduleIdentifier": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-core\\src\\engine\\scene\\shapes\\Shape.ts",
              "module": "./packages/render-core/src/engine/scene/shapes/Shape.ts",
              "moduleName": "./packages/render-core/src/engine/scene/shapes/Shape.ts",
              "type": "cjs require",
              "userRequest": "./Sphere",
              "loc": "4:17-36"
            },
            {
              "moduleId": 41,
              "moduleIdentifier": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-core\\src\\engine\\scene\\Scene.ts",
              "module": "./packages/render-core/src/engine/scene/Scene.ts",
              "moduleName": "./packages/render-core/src/engine/scene/Scene.ts",
              "type": "cjs require",
              "userRequest": "./shapes/Sphere",
              "loc": "10:17-43"
            },
            {
              "moduleId": 52,
              "moduleIdentifier": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-client\\src\\views\\GIJSView.ts",
              "module": "./packages/render-client/src/views/GIJSView.ts",
              "moduleName": "./packages/render-client/src/views/GIJSView.ts",
              "type": "cjs require",
              "userRequest": "../../../render-core/src/engine/scene/shapes/Sphere",
              "loc": "9:17-79"
            }
          ],
          "usedExports": true,
          "providedExports": null,
          "optimizationBailout": [],
          "depth": 2,
          "source": "\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst Vector3_1 = require(\"../../math/Vector3\");\r\nconst Material_1 = require(\"../materials/Material\");\r\nconst Box_1 = require(\"./Box\");\r\nconst Hit_1 = require(\"../../math/Hit\");\r\nconst Hit_2 = require(\"../../math/Hit\");\r\nconst Shape_1 = require(\"./Shape\");\r\nconst MaterialUtils_1 = require(\"../materials/MaterialUtils\");\r\nclass Sphere {\r\n    constructor(center = new Vector3_1.Vector3(), radius = 1, material = null, box = null) {\r\n        this.center = center;\r\n        this.radius = radius;\r\n        this.material = material;\r\n        this.box = box;\r\n        this.type = Shape_1.ShapeType.SPHERE;\r\n        this.memorySize = Vector3_1.Vector3.SIZE + 3;\r\n        if (!box && center) {\r\n            var min = new Vector3_1.Vector3(center.x - radius, center.y - radius, center.z - radius);\r\n            var max = new Vector3_1.Vector3(center.x + radius, center.y + radius, center.z + radius);\r\n            this.box = new Box_1.Box(min, max);\r\n        }\r\n    }\r\n    directRead(memory, offset) {\r\n        offset = this.center.directRead(memory, offset);\r\n        this.radius = memory[offset++];\r\n        var min = new Vector3_1.Vector3(this.center.x - this.radius, this.center.y - this.radius, this.center.z - this.radius);\r\n        var max = new Vector3_1.Vector3(this.center.x + this.radius, this.center.y + this.radius, this.center.z + this.radius);\r\n        this.box = new Box_1.Box(min, max);\r\n        var materialIndex = memory[offset++];\r\n        var material = Material_1.Material.map[materialIndex];\r\n        if (material) {\r\n            this.material = material;\r\n        }\r\n        return offset;\r\n    }\r\n    directWrite(memory, offset) {\r\n        memory[offset++] = this.type;\r\n        offset = this.center.directWrite(memory, offset);\r\n        memory[offset++] = this.radius;\r\n        memory[offset++] = this.material.index;\r\n        return offset;\r\n    }\r\n    read(memory) {\r\n        this.center.read(memory);\r\n        this.radius = memory.readFloat();\r\n        var min = new Vector3_1.Vector3(this.center.x - this.radius, this.center.y - this.radius, this.center.z - this.radius);\r\n        var max = new Vector3_1.Vector3(this.center.x + this.radius, this.center.y + this.radius, this.center.z + this.radius);\r\n        this.box = new Box_1.Box(min, max);\r\n        var materialIndex = memory.readInt();\r\n        var material = Material_1.Material.map[materialIndex];\r\n        if (material) {\r\n            this.material = material;\r\n        }\r\n        return memory.position;\r\n    }\r\n    write(memory) {\r\n        memory.writeByte(this.type);\r\n        this.center.write(memory);\r\n        memory.writeFloat(this.radius);\r\n        memory.writeInt(this.material.index);\r\n        return memory.position;\r\n    }\r\n    static fromJson(sphere) {\r\n        return new Sphere(Vector3_1.Vector3.fromJson(sphere.center), sphere.radius, MaterialUtils_1.MaterialUtils.fromJson(sphere.material), Box_1.Box.fromJson(sphere.box));\r\n    }\r\n    static newSphere(center, radius, material) {\r\n        var min = new Vector3_1.Vector3(center.x - radius, center.y - radius, center.z - radius);\r\n        var max = new Vector3_1.Vector3(center.x + radius, center.y + radius, center.z + radius);\r\n        var box = new Box_1.Box(min, max);\r\n        return new Sphere(center, radius, material, box);\r\n    }\r\n    compile() {\r\n    }\r\n    intersect(r) {\r\n        var to = r.origin.sub(this.center);\r\n        var b = to.dot(r.direction);\r\n        var c = to.dot(to) - this.radius * this.radius;\r\n        var d = b * b - c;\r\n        if (d > 0) {\r\n            d = Math.sqrt(d);\r\n            var t1 = -b - d;\r\n            if (t1 > 0) {\r\n                return new Hit_1.Hit(this, t1);\r\n            }\r\n        }\r\n        return Hit_2.NoHit;\r\n    }\r\n    getColor(p) {\r\n        if (this.material.texture == null) {\r\n            return this.material.color;\r\n        }\r\n        var u = Math.atan2(p.z, p.x);\r\n        var v = Math.atan2(p.y, new Vector3_1.Vector3(p.x, 0, p.z).length());\r\n        u = (u + Math.PI) / (2 * Math.PI);\r\n        v = 1 - (v + Math.PI / 2) / Math.PI;\r\n        return this.material.texture.sample(u, v);\r\n    }\r\n    getMaterial(p) {\r\n        return this.material;\r\n    }\r\n    getNormal(p) {\r\n        return p.sub(this.center).normalize();\r\n    }\r\n    getRandomPoint() {\r\n        while (true) {\r\n            var x = Math.random() * 2 - 1;\r\n            var y = Math.random() * 2 - 1;\r\n            var z = Math.random() * 2 - 1;\r\n            var v = new Vector3_1.Vector3(x, y, z);\r\n            if (v.length() <= 1) {\r\n                return v.mulScalar(this.radius).add(this.center);\r\n            }\r\n        }\r\n    }\r\n}\r\nexports.Sphere = Sphere;\r\n"
        },
        {
          "id": 19,
          "identifier": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-core\\src\\engine\\scene\\shapes\\Mesh.ts",
          "name": "./packages/render-core/src/engine/scene/shapes/Mesh.ts",
          "index": 37,
          "index2": 37,
          "size": 6425,
          "cacheable": true,
          "built": true,
          "optional": false,
          "prefetched": false,
          "chunks": [
            0
          ],
          "assets": [],
          "issuer": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-core\\src\\engine\\scene\\shapes\\Shape.ts",
          "issuerId": 6,
          "issuerName": "./packages/render-core/src/engine/scene/shapes/Shape.ts",
          "failed": false,
          "errors": 5,
          "warnings": 0,
          "reasons": [
            {
              "moduleId": 6,
              "moduleIdentifier": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-core\\src\\engine\\scene\\shapes\\Shape.ts",
              "module": "./packages/render-core/src/engine/scene/shapes/Shape.ts",
              "moduleName": "./packages/render-core/src/engine/scene/shapes/Shape.ts",
              "type": "cjs require",
              "userRequest": "./Mesh",
              "loc": "5:15-32"
            },
            {
              "moduleId": 41,
              "moduleIdentifier": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-core\\src\\engine\\scene\\Scene.ts",
              "module": "./packages/render-core/src/engine/scene/Scene.ts",
              "moduleName": "./packages/render-core/src/engine/scene/Scene.ts",
              "type": "cjs require",
              "userRequest": "./shapes/Mesh",
              "loc": "11:15-39"
            },
            {
              "moduleId": 52,
              "moduleIdentifier": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-client\\src\\views\\GIJSView.ts",
              "module": "./packages/render-client/src/views/GIJSView.ts",
              "moduleName": "./packages/render-client/src/views/GIJSView.ts",
              "type": "cjs require",
              "userRequest": "../../../render-core/src/engine/scene/shapes/Mesh",
              "loc": "12:15-75"
            }
          ],
          "usedExports": true,
          "providedExports": null,
          "optimizationBailout": [],
          "depth": 2,
          "source": "\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst Triangle_1 = require(\"./Triangle\");\r\nconst Matrix4_1 = require(\"../../math/Matrix4\");\r\nconst Vector3_1 = require(\"../../math/Vector3\");\r\nconst Color_1 = require(\"../../math/Color\");\r\nconst MapUtils_1 = require(\"../../utils/MapUtils\");\r\nconst Tree_1 = require(\"../tree/Tree\");\r\nconst Box_1 = require(\"./Box\");\r\nconst Shape_1 = require(\"./Shape\");\r\nconst SharedTree_1 = require(\"../tree/SharedTree\");\r\nclass Mesh {\r\n    constructor(box = null, triangles = [], tree = null) {\r\n        this.box = box;\r\n        this.triangles = triangles;\r\n        this.tree = tree;\r\n        this.type = Shape_1.ShapeType.MESH;\r\n    }\r\n    get memorySize() {\r\n        if (this.box && this.triangles) {\r\n            return Box_1.Box.SIZE + this.triangles.length * Triangle_1.Triangle.SIZE + 2;\r\n        }\r\n        else {\r\n            throw \"Box or Triangles are missing, box:\" + this.box + \", triangles:\" + this.triangles.length;\r\n        }\r\n    }\r\n    directRead(memory, offset) {\r\n        this.box = new Box_1.Box();\r\n        offset = this.box.directRead(memory, offset);\r\n        var numTriangles = memory[offset++];\r\n        for (var i = 0; i < numTriangles; i++) {\r\n            var triangle = new Triangle_1.Triangle();\r\n            offset = triangle.directRead(memory, offset);\r\n            this.triangles.push(triangle);\r\n        }\r\n        return offset;\r\n    }\r\n    directWrite(memory, offset) {\r\n        memory[offset++] = this.type;\r\n        offset = this.box.directWrite(memory, offset);\r\n        memory[offset++] = this.triangles.length;\r\n        this.triangles.forEach(function (t, index) {\r\n            t.index = index;\r\n            offset = t.directWrite(memory, offset);\r\n        });\r\n        this.tree = SharedTree_1.SharedTree.newTree(this.triangles, this.box);\r\n        return offset;\r\n    }\r\n    read(memory) {\r\n        if (!this.box) {\r\n            this.box = new Box_1.Box();\r\n        }\r\n        this.box.read(memory);\r\n        var numTriangles = memory.readUnsignedInt();\r\n        for (var i = 0; i < numTriangles; i++) {\r\n            var t = new Triangle_1.Triangle();\r\n            t.read(memory);\r\n            this.triangles.push(t);\r\n        }\r\n        this.tree = SharedTree_1.SharedTree.readFromMemory(memory, this.triangles);\r\n        this.tree.box = this.box;\r\n        return memory.position;\r\n    }\r\n    write(memory) {\r\n        memory.writeByte(this.type);\r\n        this.box.write(memory);\r\n        memory.writeUnsignedInt(this.triangles.length);\r\n        this.triangles.forEach(function (t, index) {\r\n            t.index = index;\r\n            t.write(memory);\r\n        });\r\n        SharedTree_1.SharedTree.buildAndWrite(memory, this.triangles);\r\n        return memory.position;\r\n    }\r\n    static fromJson(mesh) {\r\n        return new Mesh(Box_1.Box.fromJson(mesh.box), Triangle_1.Triangle.fromJson(mesh.triangles));\r\n    }\r\n    static newMesh(triangles) {\r\n        var box = Box_1.Box.boxForTriangles(triangles);\r\n        return new Mesh(box, triangles, null);\r\n    }\r\n    compile() {\r\n        var m = this;\r\n        if (m.tree == null) {\r\n            m.tree = Tree_1.Tree.newTree(m.triangles, m.box);\r\n        }\r\n    }\r\n    intersect(r) {\r\n        return this.tree.intersect(r);\r\n    }\r\n    getColor(p) {\r\n        return new Color_1.Color();\r\n    }\r\n    getMaterial(p) {\r\n        return this.material;\r\n    }\r\n    getNormal(p) {\r\n        return new Vector3_1.Vector3();\r\n    }\r\n    getRandomPoint() {\r\n        return new Vector3_1.Vector3();\r\n    }\r\n    updateBox() {\r\n        this.box = Box_1.Box.boxForTriangles(this.triangles);\r\n    }\r\n    _smoothNormalsThreshold(normal, normals, threshold) {\r\n        var result = new Vector3_1.Vector3();\r\n        normals.forEach(function (x) {\r\n            if (x.dot(normal) >= threshold) {\r\n                result = result.add(x);\r\n            }\r\n        });\r\n        return result.normalize();\r\n    }\r\n    smoothNormalsThreshold(radians) {\r\n        var m = this;\r\n        var threshold = Math.cos(radians);\r\n        var lookup = new Map();\r\n        m.triangles.forEach(function (t) {\r\n            lookup[t.v1] = MapUtils_1.append(lookup[t.v1], t.n1);\r\n            lookup[t.v2] = MapUtils_1.append(lookup[t.v2], t.n2);\r\n            lookup[t.v3] = MapUtils_1.append(lookup[t.v3], t.n3);\r\n        });\r\n        m.triangles.forEach(function (t) {\r\n            t.n1 = m._smoothNormalsThreshold(t.n1, lookup[t.v1], threshold);\r\n            t.n2 = m._smoothNormalsThreshold(t.n2, lookup[t.v2], threshold);\r\n            t.n3 = m._smoothNormalsThreshold(t.n3, lookup[t.v3], threshold);\r\n        });\r\n    }\r\n    smoothNormals() {\r\n        var m = this;\r\n        var lookup = new Map();\r\n        m.triangles.forEach(function (t) {\r\n            lookup[t.v1] = lookup[t.v1] ? lookup[t.v1].add(t.n1) : t.n1;\r\n            lookup[t.v2] = lookup[t.v2] ? lookup[t.v2].add(t.n2) : t.v2;\r\n            lookup[t.v3] = lookup[t.v3] ? lookup[t.v3].add(t.n3) : t.v3;\r\n        });\r\n        lookup.forEach(function (v, k) {\r\n            lookup[k] = v.normalize();\r\n        });\r\n        m.triangles.forEach(function (t) {\r\n            t.n1 = lookup[t.v1];\r\n            t.n2 = lookup[t.v2];\r\n            t.n3 = lookup[t.v3];\r\n        });\r\n    }\r\n    moveTo(position, anchor) {\r\n        var m = this;\r\n        var matrix = Matrix4_1.Matrix4.translate(position.sub(m.box.anchor(anchor)));\r\n        m.transform(matrix);\r\n    }\r\n    fitInside(box, anchor) {\r\n        var m = this;\r\n        var scale = box.size().div(m.box.size()).minComponent();\r\n        var extra = box.size().sub(m.box.size().mulScalar(scale));\r\n        var matrix = Matrix4_1.Matrix4.identity();\r\n        matrix = matrix.translate(m.box.min.mulScalar(-1));\r\n        matrix = matrix.scale(new Vector3_1.Vector3(scale, scale, scale));\r\n        matrix = matrix.translate(box.min.add(extra.mul(anchor)));\r\n        m.transform(matrix);\r\n    }\r\n    transform(matrix) {\r\n        var m = this;\r\n        m.triangles.forEach(function (t) {\r\n            t.v1 = matrix.mulPosition(t.v1);\r\n            t.v2 = matrix.mulPosition(t.v2);\r\n            t.v3 = matrix.mulPosition(t.v3);\r\n            t.n1 = matrix.mulDirection(t.n1);\r\n            t.n2 = matrix.mulDirection(t.n2);\r\n            t.n3 = matrix.mulDirection(t.n3);\r\n            t.updateBox();\r\n        });\r\n        m.updateBox();\r\n        m.tree = null;\r\n    }\r\n}\r\nMesh.inter = 0;\r\nexports.Mesh = Mesh;\r\n"
        },
        {
          "id": 20,
          "identifier": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-core\\src\\pointer\\src\\ByteArrayBase.ts",
          "name": "./packages/render-core/src/pointer/src/ByteArrayBase.ts",
          "index": 40,
          "index2": 33,
          "size": 27338,
          "cacheable": true,
          "built": false,
          "optional": false,
          "prefetched": false,
          "chunks": [
            0
          ],
          "assets": [],
          "issuer": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-core\\src\\engine\\scene\\tree\\SharedTree.ts",
          "issuerId": 29,
          "issuerName": "./packages/render-core/src/engine/scene/tree/SharedTree.ts",
          "failed": false,
          "errors": 5,
          "warnings": 0,
          "reasons": [
            {
              "moduleId": 11,
              "moduleIdentifier": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-core\\src\\engine\\scene\\shapes\\Triangle.ts",
              "module": "./packages/render-core/src/engine/scene/shapes/Triangle.ts",
              "moduleName": "./packages/render-core/src/engine/scene/shapes/Triangle.ts",
              "type": "cjs require",
              "userRequest": "../../../pointer/src/ByteArrayBase",
              "loc": "12:24-69"
            },
            {
              "moduleId": 29,
              "moduleIdentifier": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-core\\src\\engine\\scene\\tree\\SharedTree.ts",
              "module": "./packages/render-core/src/engine/scene/tree/SharedTree.ts",
              "moduleName": "./packages/render-core/src/engine/scene/tree/SharedTree.ts",
              "type": "cjs require",
              "userRequest": "../../../pointer/src/ByteArrayBase",
              "loc": "6:24-69"
            },
            {
              "moduleId": 30,
              "moduleIdentifier": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-core\\src\\engine\\scene\\tree\\SharedNode.ts",
              "module": "./packages/render-core/src/engine/scene/tree/SharedNode.ts",
              "moduleName": "./packages/render-core/src/engine/scene/tree/SharedNode.ts",
              "type": "cjs require",
              "userRequest": "../../../pointer/src/ByteArrayBase",
              "loc": "8:24-69"
            }
          ],
          "usedExports": true,
          "providedExports": null,
          "optimizationBailout": [],
          "depth": 3,
          "source": "\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nclass ByteArrayBase {\r\n    constructor(buffer, offset = 0, length = 0) {\r\n        this.BUFFER_EXT_SIZE = 1024;\r\n        this.array = null;\r\n        this.EOF_byte = -1;\r\n        this.EOF_code_point = -1;\r\n        if (buffer == undefined) {\r\n            buffer = new ArrayBuffer(this.BUFFER_EXT_SIZE);\r\n            this.write_position = 0;\r\n        }\r\n        else if (buffer == null) {\r\n            this.write_position = 0;\r\n        }\r\n        else {\r\n            this.write_position = length > 0 ? length : buffer.byteLength;\r\n        }\r\n        if (buffer) {\r\n            this.data = new DataView(buffer, offset, length > 0 ? length : buffer.byteLength);\r\n        }\r\n        this._position = 0;\r\n        this.endian = ByteArrayBase.BIG_ENDIAN;\r\n    }\r\n    get buffer() {\r\n        return this.data.buffer;\r\n    }\r\n    set buffer(value) {\r\n        this.data = new DataView(value);\r\n    }\r\n    get dataView() {\r\n        return this.data;\r\n    }\r\n    set dataView(value) {\r\n        this.data = value;\r\n        this.write_position = value.byteLength;\r\n    }\r\n    get phyPosition() {\r\n        return this._position + this.data.byteOffset;\r\n    }\r\n    get bufferOffset() {\r\n        return this.data.byteOffset;\r\n    }\r\n    get position() {\r\n        return this._position;\r\n    }\r\n    set position(value) {\r\n        if (this._position < value) {\r\n            if (!this.validate(this._position - value)) {\r\n                return;\r\n            }\r\n        }\r\n        this._position = value;\r\n        this.write_position = value > this.write_position ? value : this.write_position;\r\n    }\r\n    get length() {\r\n        return this.write_position;\r\n    }\r\n    set length(value) {\r\n        this.validateBuffer(value);\r\n    }\r\n    get bytesAvailable() {\r\n        return this.data.byteLength - this._position;\r\n    }\r\n    clear() {\r\n        this._position = 0;\r\n    }\r\n    getArray() {\r\n        if (this.array == null) {\r\n            this.array = new Uint8Array(this.data.buffer, this.data.byteOffset, this.data.byteLength);\r\n        }\r\n        return this.array;\r\n    }\r\n    setArray(array) {\r\n        this.array = array;\r\n        this.setBuffer(array.buffer, array.byteOffset, array.byteLength);\r\n    }\r\n    setBuffer(buffer, offset = 0, length = 0) {\r\n        if (buffer) {\r\n            this.data = new DataView(buffer, offset, length > 0 ? length : buffer.byteLength);\r\n            this.write_position = length > 0 ? length : buffer.byteLength;\r\n        }\r\n        else {\r\n            this.write_position = 0;\r\n        }\r\n        this._position = 0;\r\n    }\r\n    readBoolean() {\r\n        if (!this.validate(ByteArrayBase.SIZE_OF_BOOLEAN))\r\n            return null;\r\n        return this.data.getUint8(this.position++) != 0;\r\n    }\r\n    readByte() {\r\n        if (!this.validate(ByteArrayBase.SIZE_OF_INT8))\r\n            return null;\r\n        return this.data.getInt8(this.position++);\r\n    }\r\n    readBytes(_bytes = null, offset = 0, length = 0, createNewBuffer = false) {\r\n        if (length == 0) {\r\n            length = this.bytesAvailable;\r\n        }\r\n        else if (!this.validate(length))\r\n            return null;\r\n        if (createNewBuffer) {\r\n            _bytes = _bytes == null ? new ByteArrayBase(new ArrayBuffer(length)) : _bytes;\r\n            for (var i = 0; i < length; i++) {\r\n                _bytes.data.setUint8(i + offset, this.data.getUint8(this.position++));\r\n            }\r\n        }\r\n        else {\r\n            _bytes = _bytes == null ? new ByteArrayBase(null) : _bytes;\r\n            _bytes.dataView = new DataView(this.data.buffer, this.bufferOffset + this.position, length);\r\n            this.position += length;\r\n        }\r\n        return _bytes;\r\n    }\r\n    readDouble() {\r\n        if (!this.validate(ByteArrayBase.SIZE_OF_FLOAT64))\r\n            return null;\r\n        var value = this.data.getFloat64(this.position, this.endian == ByteArrayBase.LITTLE_ENDIAN);\r\n        this.position += ByteArrayBase.SIZE_OF_FLOAT64;\r\n        return value;\r\n    }\r\n    readFloat() {\r\n        if (!this.validate(ByteArrayBase.SIZE_OF_FLOAT32))\r\n            return null;\r\n        var value = this.data.getFloat32(this.position, this.endian == ByteArrayBase.LITTLE_ENDIAN);\r\n        this.position += ByteArrayBase.SIZE_OF_FLOAT32;\r\n        return value;\r\n    }\r\n    readInt() {\r\n        if (!this.validate(ByteArrayBase.SIZE_OF_INT32))\r\n            return null;\r\n        var value = this.data.getInt32(this.position, this.endian == ByteArrayBase.LITTLE_ENDIAN);\r\n        this.position += ByteArrayBase.SIZE_OF_INT32;\r\n        return value;\r\n    }\r\n    readMultiByte(length, charSet) {\r\n        if (!this.validate(length))\r\n            return null;\r\n        return \"\";\r\n    }\r\n    readShort() {\r\n        if (!this.validate(ByteArrayBase.SIZE_OF_INT16))\r\n            return null;\r\n        var value = this.data.getInt16(this.position, this.endian == ByteArrayBase.LITTLE_ENDIAN);\r\n        this.position += ByteArrayBase.SIZE_OF_INT16;\r\n        return value;\r\n    }\r\n    readUnsignedByte() {\r\n        if (!this.validate(ByteArrayBase.SIZE_OF_UINT8))\r\n            return null;\r\n        return this.data.getUint8(this.position++);\r\n    }\r\n    readUnsignedInt() {\r\n        if (!this.validate(ByteArrayBase.SIZE_OF_UINT32))\r\n            return null;\r\n        var value = this.data.getUint32(this.position, this.endian == ByteArrayBase.LITTLE_ENDIAN);\r\n        this.position += ByteArrayBase.SIZE_OF_UINT32;\r\n        return value;\r\n    }\r\n    readVariableSizedUnsignedInt() {\r\n        var value;\r\n        var c = this.readUnsignedByte();\r\n        if (c != 0xFF) {\r\n            value = c << 8;\r\n            c = this.readUnsignedByte();\r\n            value |= c;\r\n        }\r\n        else {\r\n            c = this.readUnsignedByte();\r\n            value = c << 16;\r\n            c = this.readUnsignedByte();\r\n            value |= c << 8;\r\n            c = this.readUnsignedByte();\r\n            value |= c;\r\n        }\r\n        return value;\r\n    }\r\n    readU16VX() {\r\n        return (this.readUnsignedByte() << 8) | this.readUnsignedByte();\r\n    }\r\n    readUnsignedShort() {\r\n        if (!this.validate(ByteArrayBase.SIZE_OF_UINT16))\r\n            return null;\r\n        var value = this.data.getUint16(this.position, this.endian == ByteArrayBase.LITTLE_ENDIAN);\r\n        this.position += ByteArrayBase.SIZE_OF_UINT16;\r\n        return value;\r\n    }\r\n    readUTF() {\r\n        if (!this.validate(ByteArrayBase.SIZE_OF_UINT16))\r\n            return null;\r\n        var length = this.data.getUint16(this.position, this.endian == ByteArrayBase.LITTLE_ENDIAN);\r\n        this.position += ByteArrayBase.SIZE_OF_UINT16;\r\n        if (length > 0) {\r\n            return this.readUTFBytes(length);\r\n        }\r\n        else {\r\n            return \"\";\r\n        }\r\n    }\r\n    readUTFBytes(length) {\r\n        if (!this.validate(length))\r\n            return null;\r\n        var _bytes = new Uint8Array(this.buffer, this.bufferOffset + this.position, length);\r\n        this.position += length;\r\n        return this.decodeUTF8(_bytes);\r\n    }\r\n    readStandardString(length) {\r\n        if (!this.validate(length))\r\n            return null;\r\n        var str = \"\";\r\n        for (var i = 0; i < length; i++) {\r\n            str += String.fromCharCode(this.data.getUint8(this.position++));\r\n        }\r\n        return str;\r\n    }\r\n    readStringTillNull(keepEvenByte = true) {\r\n        var str = \"\";\r\n        var num = 0;\r\n        while (this.bytesAvailable > 0) {\r\n            var _byte = this.data.getUint8(this.position++);\r\n            num++;\r\n            if (_byte != 0) {\r\n                str += String.fromCharCode(_byte);\r\n            }\r\n            else {\r\n                if (keepEvenByte && num % 2 != 0) {\r\n                    this.position++;\r\n                }\r\n                break;\r\n            }\r\n        }\r\n        return str;\r\n    }\r\n    writeBoolean(value) {\r\n        this.validateBuffer(ByteArrayBase.SIZE_OF_BOOLEAN);\r\n        this.data.setUint8(this.position++, value ? 1 : 0);\r\n    }\r\n    writeByte(value) {\r\n        this.validateBuffer(ByteArrayBase.SIZE_OF_INT8);\r\n        this.data.setInt8(this.position++, value);\r\n    }\r\n    writeUnsignedByte(value) {\r\n        this.validateBuffer(ByteArrayBase.SIZE_OF_UINT8);\r\n        this.data.setUint8(this.position++, value);\r\n    }\r\n    writeBytes(_bytes, offset = 0, length = 0) {\r\n        this.validateBuffer(length);\r\n        var tmp_data = new DataView(_bytes.buffer);\r\n        for (var i = 0; i < _bytes.length; i++) {\r\n            this.data.setUint8(this.position++, tmp_data.getUint8(i));\r\n        }\r\n    }\r\n    writeDouble(value) {\r\n        this.validateBuffer(ByteArrayBase.SIZE_OF_FLOAT64);\r\n        this.data.setFloat64(this.position, value, this.endian == ByteArrayBase.LITTLE_ENDIAN);\r\n        this.position += ByteArrayBase.SIZE_OF_FLOAT64;\r\n    }\r\n    writeFloat(value) {\r\n        this.validateBuffer(ByteArrayBase.SIZE_OF_FLOAT32);\r\n        this.data.setFloat32(this.position, value, this.endian == ByteArrayBase.LITTLE_ENDIAN);\r\n        this.position += ByteArrayBase.SIZE_OF_FLOAT32;\r\n    }\r\n    writeInt(value) {\r\n        this.validateBuffer(ByteArrayBase.SIZE_OF_INT32);\r\n        this.data.setInt32(this.position, value, this.endian == ByteArrayBase.LITTLE_ENDIAN);\r\n        this.position += ByteArrayBase.SIZE_OF_INT32;\r\n    }\r\n    writeMultiByte(value, charSet) {\r\n    }\r\n    writeShort(value) {\r\n        this.validateBuffer(ByteArrayBase.SIZE_OF_INT16);\r\n        this.data.setInt16(this.position, value, this.endian == ByteArrayBase.LITTLE_ENDIAN);\r\n        this.position += ByteArrayBase.SIZE_OF_INT16;\r\n    }\r\n    writeUnsignedShort(value) {\r\n        this.validateBuffer(ByteArrayBase.SIZE_OF_UINT16);\r\n        this.data.setUint16(this.position, value, this.endian == ByteArrayBase.LITTLE_ENDIAN);\r\n        this.position += ByteArrayBase.SIZE_OF_UINT16;\r\n    }\r\n    writeUnsignedInt(value) {\r\n        this.validateBuffer(ByteArrayBase.SIZE_OF_UINT32);\r\n        this.data.setUint32(this.position, value, this.endian == ByteArrayBase.LITTLE_ENDIAN);\r\n        this.position += ByteArrayBase.SIZE_OF_UINT32;\r\n    }\r\n    writeUTF(value) {\r\n        var utf8bytes = this.encodeUTF8(value);\r\n        var length = utf8bytes.length;\r\n        this.validateBuffer(ByteArrayBase.SIZE_OF_UINT16 + length);\r\n        this.data.setUint16(this.position, length, this.endian === ByteArrayBase.LITTLE_ENDIAN);\r\n        this.position += ByteArrayBase.SIZE_OF_UINT16;\r\n        this.writeUint8Array(utf8bytes);\r\n    }\r\n    writeUTFBytes(value) {\r\n        this.writeUint8Array(this.encodeUTF8(value));\r\n    }\r\n    toString() {\r\n        return \"[ByteArrayBase] length:\" + this.length + \", bytesAvailable:\" + this.bytesAvailable;\r\n    }\r\n    writeUint8Array(_bytes) {\r\n        this.validateBuffer(this.position + _bytes.length);\r\n        for (var i = 0; i < _bytes.length; i++) {\r\n            this.data.setUint8(this.position++, _bytes[i]);\r\n        }\r\n    }\r\n    writeUint16Array(_bytes) {\r\n        this.validateBuffer(this.position + _bytes.length);\r\n        for (var i = 0; i < _bytes.length; i++) {\r\n            this.data.setUint16(this.position, _bytes[i], this.endian === ByteArrayBase.LITTLE_ENDIAN);\r\n            this.position += ByteArrayBase.SIZE_OF_UINT16;\r\n        }\r\n    }\r\n    writeUint32Array(_bytes) {\r\n        this.validateBuffer(this.position + _bytes.length);\r\n        for (var i = 0; i < _bytes.length; i++) {\r\n            this.data.setUint32(this.position, _bytes[i], this.endian === ByteArrayBase.LITTLE_ENDIAN);\r\n            this.position += ByteArrayBase.SIZE_OF_UINT32;\r\n        }\r\n    }\r\n    writeInt8Array(_bytes) {\r\n        this.validateBuffer(this.position + _bytes.length);\r\n        for (var i = 0; i < _bytes.length; i++) {\r\n            this.data.setInt8(this.position++, _bytes[i]);\r\n        }\r\n    }\r\n    writeInt16Array(_bytes) {\r\n        this.validateBuffer(this.position + _bytes.length);\r\n        for (var i = 0; i < _bytes.length; i++) {\r\n            this.data.setInt16(this.position, _bytes[i], this.endian === ByteArrayBase.LITTLE_ENDIAN);\r\n            this.position += ByteArrayBase.SIZE_OF_INT16;\r\n        }\r\n    }\r\n    writeInt32Array(_bytes) {\r\n        this.validateBuffer(this.position + _bytes.length);\r\n        for (var i = 0; i < _bytes.length; i++) {\r\n            this.data.setInt32(this.position, _bytes[i], this.endian === ByteArrayBase.LITTLE_ENDIAN);\r\n            this.position += ByteArrayBase.SIZE_OF_INT32;\r\n        }\r\n    }\r\n    writeFloat32Array(_bytes) {\r\n        this.validateBuffer(this.position + _bytes.length);\r\n        for (var i = 0; i < _bytes.length; i++) {\r\n            this.data.setFloat32(this.position, _bytes[i], this.endian === ByteArrayBase.LITTLE_ENDIAN);\r\n            this.position += ByteArrayBase.SIZE_OF_FLOAT32;\r\n        }\r\n    }\r\n    writeFloat64Array(_bytes) {\r\n        this.validateBuffer(this.position + _bytes.length);\r\n        for (var i = 0; i < _bytes.length; i++) {\r\n            this.data.setFloat64(this.position, _bytes[i], this.endian === ByteArrayBase.LITTLE_ENDIAN);\r\n            this.position += ByteArrayBase.SIZE_OF_FLOAT64;\r\n        }\r\n    }\r\n    readUint8Array(length, createNewBuffer = true) {\r\n        if (!this.validate(length))\r\n            return null;\r\n        if (!createNewBuffer) {\r\n            var result = new Uint8Array(this.buffer, this.bufferOffset + this.position, length);\r\n            this.position += length;\r\n        }\r\n        else {\r\n            result = new Uint8Array(new ArrayBuffer(length));\r\n            for (var i = 0; i < length; i++) {\r\n                result[i] = this.data.getUint8(this.position);\r\n                this.position += ByteArrayBase.SIZE_OF_UINT8;\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n    readUint16Array(length, createNewBuffer = true) {\r\n        var size = length * ByteArrayBase.SIZE_OF_UINT16;\r\n        if (!this.validate(size))\r\n            return null;\r\n        if (!createNewBuffer) {\r\n            var result = new Uint16Array(this.buffer, this.bufferOffset + this.position, length);\r\n            this.position += size;\r\n        }\r\n        else {\r\n            result = new Uint16Array(new ArrayBuffer(size));\r\n            for (var i = 0; i < length; i++) {\r\n                result[i] = this.data.getUint16(this.position, this.endian === ByteArrayBase.LITTLE_ENDIAN);\r\n                this.position += ByteArrayBase.SIZE_OF_UINT16;\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n    readUint32Array(length, createNewBuffer = true) {\r\n        var size = length * ByteArrayBase.SIZE_OF_UINT32;\r\n        if (!this.validate(size))\r\n            return null;\r\n        if (!createNewBuffer) {\r\n            var result = new Uint32Array(this.buffer, this.bufferOffset + this.position, length);\r\n            this.position += size;\r\n        }\r\n        else {\r\n            result = new Uint32Array(new ArrayBuffer(size));\r\n            for (var i = 0; i < length; i++) {\r\n                result[i] = this.data.getUint32(this.position, this.endian === ByteArrayBase.LITTLE_ENDIAN);\r\n                this.position += ByteArrayBase.SIZE_OF_UINT32;\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n    readInt8Array(length, createNewBuffer = true) {\r\n        if (!this.validate(length))\r\n            return null;\r\n        if (!createNewBuffer) {\r\n            var result = new Int8Array(this.buffer, this.bufferOffset + this.position, length);\r\n            this.position += length;\r\n        }\r\n        else {\r\n            result = new Int8Array(new ArrayBuffer(length));\r\n            for (var i = 0; i < length; i++) {\r\n                result[i] = this.data.getInt8(this.position);\r\n                this.position += ByteArrayBase.SIZE_OF_INT8;\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n    readInt16Array(length, createNewBuffer = true) {\r\n        var size = length * ByteArrayBase.SIZE_OF_INT16;\r\n        if (!this.validate(size))\r\n            return null;\r\n        if (!createNewBuffer) {\r\n            var result = new Int16Array(this.buffer, this.bufferOffset + this.position, length);\r\n            this.position += size;\r\n        }\r\n        else {\r\n            result = new Int16Array(new ArrayBuffer(size));\r\n            for (var i = 0; i < length; i++) {\r\n                result[i] = this.data.getInt16(this.position, this.endian === ByteArrayBase.LITTLE_ENDIAN);\r\n                this.position += ByteArrayBase.SIZE_OF_INT16;\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n    readInt32Array(length, createNewBuffer = true) {\r\n        var size = length * ByteArrayBase.SIZE_OF_INT32;\r\n        if (!this.validate(size))\r\n            return null;\r\n        if (!createNewBuffer) {\r\n            if ((this.bufferOffset + this.position) % 4 == 0) {\r\n                var result = new Int32Array(this.buffer, this.bufferOffset + this.position, length);\r\n                this.position += size;\r\n            }\r\n            else {\r\n                var tmp = new Uint8Array(new ArrayBuffer(size));\r\n                for (var i = 0; i < size; i++) {\r\n                    tmp[i] = this.data.getUint8(this.position);\r\n                    this.position += ByteArrayBase.SIZE_OF_UINT8;\r\n                }\r\n                result = new Int32Array(tmp.buffer);\r\n            }\r\n        }\r\n        else {\r\n            result = new Int32Array(new ArrayBuffer(size));\r\n            for (var i = 0; i < length; i++) {\r\n                result[i] = this.data.getInt32(this.position, this.endian === ByteArrayBase.LITTLE_ENDIAN);\r\n                this.position += ByteArrayBase.SIZE_OF_INT32;\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n    readFloat32Array(length, createNewBuffer = true) {\r\n        var size = length * ByteArrayBase.SIZE_OF_FLOAT32;\r\n        if (!this.validate(size))\r\n            return null;\r\n        if (!createNewBuffer) {\r\n            if ((this.bufferOffset + this.position) % 4 == 0) {\r\n                var result = new Float32Array(this.buffer, this.bufferOffset + this.position, length);\r\n                this.position += size;\r\n            }\r\n            else {\r\n                var tmp = new Uint8Array(new ArrayBuffer(size));\r\n                for (var i = 0; i < size; i++) {\r\n                    tmp[i] = this.data.getUint8(this.position);\r\n                    this.position += ByteArrayBase.SIZE_OF_UINT8;\r\n                }\r\n                result = new Float32Array(tmp.buffer);\r\n            }\r\n        }\r\n        else {\r\n            result = new Float32Array(new ArrayBuffer(size));\r\n            for (var i = 0; i < length; i++) {\r\n                result[i] = this.data.getFloat32(this.position, this.endian === ByteArrayBase.LITTLE_ENDIAN);\r\n                this.position += ByteArrayBase.SIZE_OF_FLOAT32;\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n    readFloat64Array(length, createNewBuffer = true) {\r\n        var size = length * ByteArrayBase.SIZE_OF_FLOAT64;\r\n        if (!this.validate(size))\r\n            return null;\r\n        if (!createNewBuffer) {\r\n            var result = new Float64Array(this.buffer, this.position, length);\r\n            this.position += size;\r\n        }\r\n        else {\r\n            result = new Float64Array(new ArrayBuffer(size));\r\n            for (var i = 0; i < length; i++) {\r\n                result[i] = this.data.getFloat64(this.position, this.endian === ByteArrayBase.LITTLE_ENDIAN);\r\n                this.position += ByteArrayBase.SIZE_OF_FLOAT64;\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n    validate(len) {\r\n        if (this.data.byteLength > 0 && this._position + len <= this.data.byteLength) {\r\n            return true;\r\n        }\r\n        else {\r\n            throw 'Error #2030: End of file was encountered.';\r\n        }\r\n    }\r\n    validateBuffer(len) {\r\n        this.write_position = len > this.write_position ? len : this.write_position;\r\n        if (this.data.byteLength < len) {\r\n            var tmp = new Uint8Array(new ArrayBuffer(len + this.BUFFER_EXT_SIZE));\r\n            tmp.set(new Uint8Array(this.data.buffer));\r\n            this.data.buffer = tmp.buffer;\r\n        }\r\n    }\r\n    encodeUTF8(str) {\r\n        var pos = 0;\r\n        var codePoints = this.stringToCodePoints(str);\r\n        var outputBytes = [];\r\n        while (codePoints.length > pos) {\r\n            var code_point = codePoints[pos++];\r\n            if (this.inRange(code_point, 0xD800, 0xDFFF)) {\r\n                this.encoderError(code_point);\r\n            }\r\n            else if (this.inRange(code_point, 0x0000, 0x007f)) {\r\n                outputBytes.push(code_point);\r\n            }\r\n            else {\r\n                var count, offset;\r\n                if (this.inRange(code_point, 0x0080, 0x07FF)) {\r\n                    count = 1;\r\n                    offset = 0xC0;\r\n                }\r\n                else if (this.inRange(code_point, 0x0800, 0xFFFF)) {\r\n                    count = 2;\r\n                    offset = 0xE0;\r\n                }\r\n                else if (this.inRange(code_point, 0x10000, 0x10FFFF)) {\r\n                    count = 3;\r\n                    offset = 0xF0;\r\n                }\r\n                outputBytes.push(this.div(code_point, Math.pow(64, count)) + offset);\r\n                while (count > 0) {\r\n                    var temp = this.div(code_point, Math.pow(64, count - 1));\r\n                    outputBytes.push(0x80 + (temp % 64));\r\n                    count -= 1;\r\n                }\r\n            }\r\n        }\r\n        return new Uint8Array(outputBytes);\r\n    }\r\n    decodeUTF8(data) {\r\n        var fatal = false;\r\n        var pos = 0;\r\n        var result = \"\";\r\n        var code_point;\r\n        var utf8_code_point = 0;\r\n        var utf8_bytes_needed = 0;\r\n        var utf8_bytes_seen = 0;\r\n        var utf8_lower_boundary = 0;\r\n        while (data.length > pos) {\r\n            var _byte = data[pos++];\r\n            if (_byte === this.EOF_byte) {\r\n                if (utf8_bytes_needed !== 0) {\r\n                    code_point = this.decoderError(fatal);\r\n                }\r\n                else {\r\n                    code_point = this.EOF_code_point;\r\n                }\r\n            }\r\n            else {\r\n                if (utf8_bytes_needed === 0) {\r\n                    if (this.inRange(_byte, 0x00, 0x7F)) {\r\n                        code_point = _byte;\r\n                    }\r\n                    else {\r\n                        if (this.inRange(_byte, 0xC2, 0xDF)) {\r\n                            utf8_bytes_needed = 1;\r\n                            utf8_lower_boundary = 0x80;\r\n                            utf8_code_point = _byte - 0xC0;\r\n                        }\r\n                        else if (this.inRange(_byte, 0xE0, 0xEF)) {\r\n                            utf8_bytes_needed = 2;\r\n                            utf8_lower_boundary = 0x800;\r\n                            utf8_code_point = _byte - 0xE0;\r\n                        }\r\n                        else if (this.inRange(_byte, 0xF0, 0xF4)) {\r\n                            utf8_bytes_needed = 3;\r\n                            utf8_lower_boundary = 0x10000;\r\n                            utf8_code_point = _byte - 0xF0;\r\n                        }\r\n                        else {\r\n                            this.decoderError(fatal);\r\n                        }\r\n                        utf8_code_point = utf8_code_point * Math.pow(64, utf8_bytes_needed);\r\n                        code_point = null;\r\n                    }\r\n                }\r\n                else if (!this.inRange(_byte, 0x80, 0xBF)) {\r\n                    utf8_code_point = 0;\r\n                    utf8_bytes_needed = 0;\r\n                    utf8_bytes_seen = 0;\r\n                    utf8_lower_boundary = 0;\r\n                    pos--;\r\n                    code_point = this.decoderError(fatal, _byte);\r\n                }\r\n                else {\r\n                    utf8_bytes_seen += 1;\r\n                    utf8_code_point = utf8_code_point + (_byte - 0x80) * Math.pow(64, utf8_bytes_needed - utf8_bytes_seen);\r\n                    if (utf8_bytes_seen !== utf8_bytes_needed) {\r\n                        code_point = null;\r\n                    }\r\n                    else {\r\n                        var cp = utf8_code_point;\r\n                        var lower_boundary = utf8_lower_boundary;\r\n                        utf8_code_point = 0;\r\n                        utf8_bytes_needed = 0;\r\n                        utf8_bytes_seen = 0;\r\n                        utf8_lower_boundary = 0;\r\n                        if (this.inRange(cp, lower_boundary, 0x10FFFF) && !this.inRange(cp, 0xD800, 0xDFFF)) {\r\n                            code_point = cp;\r\n                        }\r\n                        else {\r\n                            code_point = this.decoderError(fatal, _byte);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            if (code_point !== null && code_point !== this.EOF_code_point) {\r\n                if (code_point <= 0xFFFF) {\r\n                    if (code_point > 0)\r\n                        result += String.fromCharCode(code_point);\r\n                }\r\n                else {\r\n                    code_point -= 0x10000;\r\n                    result += String.fromCharCode(0xD800 + ((code_point >> 10) & 0x3ff));\r\n                    result += String.fromCharCode(0xDC00 + (code_point & 0x3ff));\r\n                }\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n    encoderError(code_point) {\r\n        throw 'EncodingError! The code point ' + code_point + ' could not be encoded.';\r\n    }\r\n    decoderError(fatal, opt_code_point) {\r\n        if (fatal) {\r\n            throw 'DecodingError';\r\n        }\r\n        return opt_code_point || 0xFFFD;\r\n    }\r\n    inRange(a, min, max) {\r\n        return min <= a && a <= max;\r\n    }\r\n    div(n, d) {\r\n        return Math.floor(n / d);\r\n    }\r\n    stringToCodePoints(string) {\r\n        var cps = [];\r\n        var i = 0, n = string.length;\r\n        while (i < string.length) {\r\n            var c = string.charCodeAt(i);\r\n            if (!this.inRange(c, 0xD800, 0xDFFF)) {\r\n                cps.push(c);\r\n            }\r\n            else if (this.inRange(c, 0xDC00, 0xDFFF)) {\r\n                cps.push(0xFFFD);\r\n            }\r\n            else {\r\n                if (i === n - 1) {\r\n                    cps.push(0xFFFD);\r\n                }\r\n                else {\r\n                    var d = string.charCodeAt(i + 1);\r\n                    if (this.inRange(d, 0xDC00, 0xDFFF)) {\r\n                        var a = c & 0x3FF;\r\n                        var b = d & 0x3FF;\r\n                        i += 1;\r\n                        cps.push(0x10000 + (a << 10) + b);\r\n                    }\r\n                    else {\r\n                        cps.push(0xFFFD);\r\n                    }\r\n                }\r\n            }\r\n            i += 1;\r\n        }\r\n        return cps;\r\n    }\r\n}\r\nByteArrayBase.BIG_ENDIAN = \"bigEndian\";\r\nByteArrayBase.LITTLE_ENDIAN = \"littleEndian\";\r\nByteArrayBase.SIZE_OF_BOOLEAN = 1;\r\nByteArrayBase.SIZE_OF_INT8 = 1;\r\nByteArrayBase.SIZE_OF_INT16 = 2;\r\nByteArrayBase.SIZE_OF_INT32 = 4;\r\nByteArrayBase.SIZE_OF_INT64 = 8;\r\nByteArrayBase.SIZE_OF_UINT8 = 1;\r\nByteArrayBase.SIZE_OF_UINT16 = 2;\r\nByteArrayBase.SIZE_OF_UINT32 = 4;\r\nByteArrayBase.SIZE_OF_UINT64 = 8;\r\nByteArrayBase.SIZE_OF_FLOAT32 = 4;\r\nByteArrayBase.SIZE_OF_FLOAT64 = 8;\r\nexports.ByteArrayBase = ByteArrayBase;\r\n"
        },
        {
          "id": 21,
          "identifier": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-core\\src\\engine\\scene\\shapes\\TransformedShape.ts",
          "name": "./packages/render-core/src/engine/scene/shapes/TransformedShape.ts",
          "index": 43,
          "index2": 38,
          "size": 3681,
          "cacheable": true,
          "built": false,
          "optional": false,
          "prefetched": false,
          "chunks": [
            0
          ],
          "assets": [],
          "issuer": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-core\\src\\engine\\scene\\shapes\\Shape.ts",
          "issuerId": 6,
          "issuerName": "./packages/render-core/src/engine/scene/shapes/Shape.ts",
          "failed": false,
          "errors": 3,
          "warnings": 0,
          "reasons": [
            {
              "moduleId": 6,
              "moduleIdentifier": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-core\\src\\engine\\scene\\shapes\\Shape.ts",
              "module": "./packages/render-core/src/engine/scene/shapes/Shape.ts",
              "moduleName": "./packages/render-core/src/engine/scene/shapes/Shape.ts",
              "type": "cjs require",
              "userRequest": "./TransformedShape",
              "loc": "7:27-56"
            },
            {
              "moduleId": 41,
              "moduleIdentifier": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-core\\src\\engine\\scene\\Scene.ts",
              "module": "./packages/render-core/src/engine/scene/Scene.ts",
              "moduleName": "./packages/render-core/src/engine/scene/Scene.ts",
              "type": "cjs require",
              "userRequest": "./shapes/TransformedShape",
              "loc": "12:27-63"
            },
            {
              "moduleId": 52,
              "moduleIdentifier": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-client\\src\\views\\GIJSView.ts",
              "module": "./packages/render-client/src/views/GIJSView.ts",
              "moduleName": "./packages/render-client/src/views/GIJSView.ts",
              "type": "cjs require",
              "userRequest": "../../../render-core/src/engine/scene/shapes/TransformedShape",
              "loc": "15:27-99"
            }
          ],
          "usedExports": true,
          "providedExports": null,
          "optimizationBailout": [],
          "depth": 2,
          "source": "\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst Ray_1 = require(\"../../math/Ray\");\r\nconst Shape_1 = require(\"./Shape\");\r\nconst Matrix4_1 = require(\"../../math/Matrix4\");\r\nconst HitInfo_1 = require(\"../../math/HitInfo\");\r\nclass TransformedShape {\r\n    constructor(shape = null, matrix = new Matrix4_1.Matrix4(), inverse = new Matrix4_1.Matrix4(), normalMatrix) {\r\n        this.shape = shape;\r\n        this.matrix = matrix;\r\n        this.inverse = inverse;\r\n        this.normalMatrix = normalMatrix;\r\n        this.type = Shape_1.ShapeType.TRANSFORMED_SHAPE;\r\n    }\r\n    get memorySize() {\r\n        if (this.shape) {\r\n            return this.shape.memorySize + Matrix4_1.Matrix4.SIZE + 1;\r\n        }\r\n        else {\r\n            return 0;\r\n        }\r\n    }\r\n    ;\r\n    directRead(memory, offset) {\r\n        offset = this.matrix.directRead(memory, offset);\r\n        this.inverse = this.matrix.inverse();\r\n        var container = [];\r\n        offset = Shape_1.directRestoreShape(memory, offset, container);\r\n        this.shape = container[0];\r\n        container = null;\r\n        return offset;\r\n    }\r\n    directWrite(memory, offset) {\r\n        memory[offset++] = this.type;\r\n        offset = this.matrix.directWrite(memory, offset);\r\n        offset = this.shape.directWrite(memory, offset);\r\n        return offset;\r\n    }\r\n    read(memory) {\r\n        this.matrix.read(memory);\r\n        this.inverse = this.matrix.inverse();\r\n        var container = [];\r\n        Shape_1.restoreShape(memory, container);\r\n        this.shape = container[0];\r\n        container = null;\r\n        return memory.position;\r\n    }\r\n    write(memory) {\r\n        memory.writeByte(this.type);\r\n        this.matrix.write(memory);\r\n        this.shape.write(memory);\r\n        return memory.position;\r\n    }\r\n    static fromJson(transformedShape) {\r\n        return new TransformedShape(Shape_1.ShapefromJson(transformedShape.shape), Matrix4_1.Matrix4.fromJson(transformedShape.matrix), Matrix4_1.Matrix4.fromJson(transformedShape.inverse));\r\n    }\r\n    static newTransformedShape(s, m) {\r\n        return new TransformedShape(s, m, m.inverse());\r\n    }\r\n    get box() {\r\n        return this.matrix.mulBox(this.shape.box);\r\n    }\r\n    compile() {\r\n        this.shape.compile();\r\n    }\r\n    intersect(r) {\r\n        var shapeRay = this.inverse.mulRay(r);\r\n        var hit = this.shape.intersect(shapeRay);\r\n        if (!hit.ok()) {\r\n            return hit;\r\n        }\r\n        var shape = hit.shape;\r\n        var shapePosition = shapeRay.position(hit.T);\r\n        var shapeNormal = shape.getNormal(shapePosition);\r\n        var position = this.matrix.mulPosition(shapePosition);\r\n        var normal = this.inverse.transpose().mulDirection(shapeNormal);\r\n        var color = shape.getColor(shapePosition);\r\n        var material = shape.getMaterial(shapePosition);\r\n        var inside = false;\r\n        if (shapeNormal.dot(shapeRay.direction) > 0) {\r\n            normal = normal.mulScalar(-1);\r\n            inside = true;\r\n        }\r\n        var ray = new Ray_1.Ray(position, normal);\r\n        var info = new HitInfo_1.HitInfo(shape, position, normal, ray, color, material, inside);\r\n        hit.T = position.sub(r.origin).length();\r\n        hit.info = info;\r\n        return hit;\r\n    }\r\n    getColor(p) {\r\n        return this.shape.getColor(this.inverse.mulPosition(p));\r\n    }\r\n    getMaterial(p) {\r\n        return this.shape.getMaterial(this.inverse.mulPosition(p));\r\n    }\r\n    getNormal(p) {\r\n        console.log(\"getNormal\");\r\n        return null;\r\n    }\r\n    getRandomPoint() {\r\n        return this.shape.getRandomPoint();\r\n    }\r\n}\r\nexports.TransformedShape = TransformedShape;\r\n"
        },
        {
          "id": 22,
          "identifier": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-client\\src\\objects\\ThreeObjects.ts",
          "name": "./packages/render-client/src/objects/ThreeObjects.ts",
          "index": 2,
          "index2": 1,
          "size": 243,
          "cacheable": true,
          "built": false,
          "optional": false,
          "prefetched": false,
          "chunks": [
            0
          ],
          "assets": [],
          "issuer": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-client\\index.ts",
          "issuerId": 36,
          "issuerName": "./packages/render-client/index.ts",
          "failed": false,
          "errors": 0,
          "warnings": 0,
          "reasons": [
            {
              "moduleId": 36,
              "moduleIdentifier": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-client\\index.ts",
              "module": "./packages/render-client/index.ts",
              "moduleName": "./packages/render-client/index.ts",
              "type": "cjs require",
              "userRequest": "./src/objects/ThreeObjects",
              "loc": "7:9-46"
            },
            {
              "moduleId": 52,
              "moduleIdentifier": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-client\\src\\views\\GIJSView.ts",
              "module": "./packages/render-client/src/views/GIJSView.ts",
              "moduleName": "./packages/render-client/src/views/GIJSView.ts",
              "type": "cjs require",
              "userRequest": "../objects/ThreeObjects",
              "loc": "11:23-57"
            }
          ],
          "usedExports": true,
          "providedExports": null,
          "optimizationBailout": [],
          "depth": 1,
          "source": "\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nclass ThreeObjects {\r\n}\r\nThreeObjects.PointLight = \"PointLight\";\r\nThreeObjects.Mesh = \"Mesh\";\r\nThreeObjects.Group = \"Group\";\r\nexports.ThreeObjects = ThreeObjects;\r\n"
        },
        {
          "id": 23,
          "identifier": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-client\\src\\display\\CanvasDisplay.ts",
          "name": "./packages/render-client/src/display/CanvasDisplay.ts",
          "index": 3,
          "index2": 3,
          "size": 4032,
          "cacheable": true,
          "built": false,
          "optional": false,
          "prefetched": false,
          "chunks": [
            0
          ],
          "assets": [],
          "issuer": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-client\\index.ts",
          "issuerId": 36,
          "issuerName": "./packages/render-client/index.ts",
          "failed": false,
          "errors": 0,
          "warnings": 0,
          "reasons": [
            {
              "moduleId": 35,
              "moduleIdentifier": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-client\\src\\render\\GIRenderBase.ts",
              "module": "./packages/render-client/src/render/GIRenderBase.ts",
              "moduleName": "./packages/render-client/src/render/GIRenderBase.ts",
              "type": "cjs require",
              "userRequest": "../display/CanvasDisplay",
              "loc": "3:24-59"
            },
            {
              "moduleId": 36,
              "moduleIdentifier": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-client\\index.ts",
              "module": "./packages/render-client/index.ts",
              "moduleName": "./packages/render-client/index.ts",
              "type": "cjs require",
              "userRequest": "./src/display/CanvasDisplay",
              "loc": "8:9-47"
            }
          ],
          "usedExports": true,
          "providedExports": null,
          "optimizationBailout": [],
          "depth": 1,
          "source": "\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst Color_1 = require(\"../../../render-core/src/engine/math/Color\");\r\nclass CanvasDisplay {\r\n    constructor(i_width = 640, i_height = 480, container) {\r\n        this.i_width = i_width;\r\n        this.i_height = i_height;\r\n        this.container = container;\r\n        this.canvas = document.createElement(\"canvas\");\r\n        this.canvas.id = \"giImageOutput\";\r\n        this.canvas.style.backgroundColor = \"#3C3C3C\";\r\n        this.canvas.style.position = \"absolute\";\r\n        this.canvas.width = this.i_width;\r\n        this.canvas.height = this.i_height;\r\n        if (container) {\r\n            this.attachDom(container);\r\n        }\r\n    }\r\n    attachDom(dom) {\r\n        this.container = dom;\r\n        this.container.appendChild(this.canvas);\r\n        this.ctx = this.canvas.getContext(\"2d\");\r\n        this.imageData = this.ctx.getImageData(0, 0, this.i_width, this.i_height);\r\n        this.data = this.imageData.data;\r\n        this.onWindowResize();\r\n    }\r\n    onWindowResize() {\r\n    }\r\n    setResolution(width, height) {\r\n        this.i_width = width;\r\n        this.i_height = height;\r\n        this.canvas.width = width;\r\n        this.canvas.height = height;\r\n        this.imageData = this.ctx.getImageData(0, 0, this.i_width, this.i_height);\r\n        this.data = this.imageData.data;\r\n    }\r\n    updatePixels(pixels) {\r\n        for (var y = 0; y < this.i_height; y++) {\r\n            for (var x = 0; x < this.i_width; x++) {\r\n                var i = y * (this.i_width * 4) + (x * 4);\r\n                var pi = y * (this.i_width * 3) + (x * 3);\r\n                this.data[i] = pixels[pi];\r\n                this.data[i + 1] = pixels[pi + 1];\r\n                this.data[i + 2] = pixels[pi + 2];\r\n                this.data[i + 3] = 255;\r\n            }\r\n        }\r\n        this.ctx.putImageData(this.imageData, 0, 0);\r\n    }\r\n    updatePixelsRect(rect, pixels) {\r\n        for (var y = rect.yoffset; y < rect.yoffset + rect.height; y++) {\r\n            for (var x = rect.xoffset; x < rect.xoffset + rect.width; x++) {\r\n                var i = y * (this.i_width * 4) + (x * 4);\r\n                var pi = y * (this.i_width * 3) + (x * 3);\r\n                this.data[i] = pixels[pi];\r\n                this.data[i + 1] = pixels[pi + 1];\r\n                this.data[i + 2] = pixels[pi + 2];\r\n                this.data[i + 3] = 255;\r\n            }\r\n        }\r\n        this.ctx.putImageData(this.imageData, 0, 0);\r\n    }\r\n    updateIndicator(rect) {\r\n        var color = Color_1.Color.random();\r\n        this.fillRect({ x: rect.xoffset, y: rect.yoffset, width: 4, height: 1 }, color);\r\n        this.fillRect({ x: rect.xoffset, y: rect.yoffset + 1, width: 1, height: 3 }, color);\r\n        this.fillRect({ x: rect.xoffset + rect.width - 4, y: rect.yoffset, width: 4, height: 1 }, color);\r\n        this.fillRect({ x: rect.xoffset + rect.width - 1, y: rect.yoffset + 1, width: 1, height: 3 }, color);\r\n        this.fillRect({ x: rect.xoffset, y: rect.yoffset + rect.height - 4, width: 1, height: 4 }, color);\r\n        this.fillRect({ x: rect.xoffset + 1, y: rect.yoffset + rect.height - 1, width: 3, height: 1 }, color);\r\n        this.fillRect({ x: rect.xoffset + rect.width - 4, y: rect.yoffset + rect.height - 1, width: 4, height: 1 }, color);\r\n        this.fillRect({ x: rect.xoffset + rect.width - 1, y: rect.yoffset + rect.height - 4, width: 1, height: 3 }, color);\r\n        this.ctx.putImageData(this.imageData, 0, 0);\r\n    }\r\n    fillRect(rect, color) {\r\n        for (var y = rect.y; y < rect.y + rect.height; y++) {\r\n            for (var x = rect.x; x < rect.x + rect.width; x++) {\r\n                var i = y * (this.i_width * 4) + (x * 4);\r\n                this.data[i] = color.r * 255;\r\n                this.data[i + 1] = color.g * 255;\r\n                this.data[i + 2] = color.b * 255;\r\n                this.data[i + 3] = 255;\r\n            }\r\n        }\r\n        this.ctx.putImageData(this.imageData, 0, 0);\r\n    }\r\n}\r\nexports.CanvasDisplay = CanvasDisplay;\r\n"
        },
        {
          "id": 24,
          "identifier": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-core\\src\\engine\\scene\\Camera.ts",
          "name": "./packages/render-core/src/engine/scene/Camera.ts",
          "index": 6,
          "index2": 10,
          "size": 3341,
          "cacheable": true,
          "built": false,
          "optional": false,
          "prefetched": false,
          "chunks": [
            0
          ],
          "assets": [],
          "issuer": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-client\\src\\render\\HeadlessRenderBase.ts",
          "issuerId": 38,
          "issuerName": "./packages/render-client/src/render/HeadlessRenderBase.ts",
          "failed": false,
          "errors": 0,
          "warnings": 0,
          "reasons": [
            {
              "moduleId": 38,
              "moduleIdentifier": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-client\\src\\render\\HeadlessRenderBase.ts",
              "module": "./packages/render-client/src/render/HeadlessRenderBase.ts",
              "moduleName": "./packages/render-client/src/render/HeadlessRenderBase.ts",
              "type": "cjs require",
              "userRequest": "../../../render-core/src/engine/scene/Camera",
              "loc": "4:17-72"
            },
            {
              "moduleId": 52,
              "moduleIdentifier": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-client\\src\\views\\GIJSView.ts",
              "module": "./packages/render-client/src/views/GIJSView.ts",
              "moduleName": "./packages/render-client/src/views/GIJSView.ts",
              "type": "cjs require",
              "userRequest": "../../../render-core/src/engine/scene/Camera",
              "loc": "5:17-72"
            }
          ],
          "usedExports": true,
          "providedExports": null,
          "optimizationBailout": [],
          "depth": 2,
          "source": "\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst Vector3_1 = require(\"../math/Vector3\");\r\nconst Ray_1 = require(\"../math/Ray\");\r\nclass Camera {\r\n    constructor(p, u, v, w, m, focalDistance, apertureRadius) {\r\n        this.p = p;\r\n        this.u = u;\r\n        this.v = v;\r\n        this.w = w;\r\n        this.m = m;\r\n        this.focalDistance = focalDistance;\r\n        this.apertureRadius = apertureRadius;\r\n    }\r\n    static fromJson(camera) {\r\n        return new Camera(Vector3_1.Vector3.fromJson(camera.p), Vector3_1.Vector3.fromJson(camera.u), Vector3_1.Vector3.fromJson(camera.v), Vector3_1.Vector3.fromJson(camera.w), camera.m, camera.focalDistance, camera.apertureRadius);\r\n    }\r\n    static lookAt(eye, look, up, fov) {\r\n        var c = new Camera();\r\n        c.p = eye;\r\n        c.w = look.sub(eye).normalize();\r\n        c.u = up.cross(c.w).normalize();\r\n        c.v = c.w.cross(c.u).normalize();\r\n        c.m = 1 / Math.tan(fov * Math.PI / 360);\r\n        return c;\r\n    }\r\n    updateFromArray(eye, look, up, fovy, focus, aperture) {\r\n        eye = new Vector3_1.Vector3(eye[0], eye[1], eye[2]);\r\n        look = new Vector3_1.Vector3(look[0], look[1], look[2]);\r\n        up = new Vector3_1.Vector3(up[0], up[1], up[2]);\r\n        var c = this;\r\n        c.p = eye;\r\n        c.w = look.sub(eye).normalize();\r\n        c.u = up.cross(c.w).normalize();\r\n        c.v = c.w.cross(c.u).normalize();\r\n        c.m = 1 / Math.tan(fovy * Math.PI / 360);\r\n        c.focalDistance = focus < 0 ? null : focus;\r\n        c.apertureRadius = aperture < 0 ? null : aperture;\r\n    }\r\n    updateFromJson(prop) {\r\n        this.p.setFromJson(prop.p);\r\n        this.w.setFromJson(prop.w);\r\n        this.u.setFromJson(prop.u);\r\n        this.v.setFromJson(prop.v);\r\n        this.m = prop.m;\r\n        if (prop.focalDistance && prop.apertureRadius) {\r\n            this.focalDistance = prop.focalDistance;\r\n            this.apertureRadius = prop.apertureRadius;\r\n        }\r\n    }\r\n    setFocus(focalPoint, apertureRadius) {\r\n        this.focalDistance = focalPoint.sub(this.p).length();\r\n        this.apertureRadius = apertureRadius;\r\n    }\r\n    castRay(x, y, w, h, u, v) {\r\n        var c = this;\r\n        var aspect = w / h;\r\n        var px = ((x + u - 0.5) / (w - 1)) * 2 - 1;\r\n        var py = ((y + v - 0.5) / (h - 1)) * 2 - 1;\r\n        var d = new Vector3_1.Vector3();\r\n        d = d.add(c.u.mulScalar(-px * aspect));\r\n        d = d.add(c.v.mulScalar(-py));\r\n        d = d.add(c.w.mulScalar(c.m));\r\n        d = d.normalize();\r\n        var p = c.p;\r\n        if (c.apertureRadius > 0) {\r\n            var focalPoint = c.p.add(d.mulScalar(c.focalDistance));\r\n            var angle = Math.random() * 2 * Math.PI;\r\n            var radius = Math.random() * c.apertureRadius;\r\n            p = p.add(c.u.mulScalar(Math.cos(angle) * radius));\r\n            p = p.add(c.v.mulScalar(Math.sin(angle) * radius));\r\n            d = focalPoint.sub(p).normalize();\r\n        }\r\n        return new Ray_1.Ray(p, d);\r\n    }\r\n    toJSON() {\r\n        return {\r\n            p: this.p,\r\n            w: this.w,\r\n            u: this.u,\r\n            v: this.v,\r\n            m: this.m,\r\n            focalDistance: this.focalDistance,\r\n            apertureRadius: this.apertureRadius\r\n        };\r\n    }\r\n}\r\nCamera.debug = true;\r\nexports.Camera = Camera;\r\n"
        },
        {
          "id": 25,
          "identifier": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-core\\src\\engine\\scene\\SharedScene.ts",
          "name": "./packages/render-core/src/engine/scene/SharedScene.ts",
          "index": 13,
          "index2": 46,
          "size": 2378,
          "cacheable": true,
          "built": false,
          "optional": false,
          "prefetched": false,
          "chunks": [
            0
          ],
          "assets": [],
          "issuer": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-client\\src\\render\\HeadlessRenderBase.ts",
          "issuerId": 38,
          "issuerName": "./packages/render-client/src/render/HeadlessRenderBase.ts",
          "failed": false,
          "errors": 0,
          "warnings": 0,
          "reasons": [
            {
              "moduleId": 38,
              "moduleIdentifier": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-client\\src\\render\\HeadlessRenderBase.ts",
              "module": "./packages/render-client/src/render/HeadlessRenderBase.ts",
              "moduleName": "./packages/render-client/src/render/HeadlessRenderBase.ts",
              "type": "cjs require",
              "userRequest": "../../../render-core/src/engine/scene/SharedScene",
              "loc": "5:22-82"
            },
            {
              "moduleId": 52,
              "moduleIdentifier": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-client\\src\\views\\GIJSView.ts",
              "module": "./packages/render-client/src/views/GIJSView.ts",
              "moduleName": "./packages/render-client/src/views/GIJSView.ts",
              "type": "cjs require",
              "userRequest": "../../../render-core/src/engine/scene/SharedScene",
              "loc": "6:22-82"
            }
          ],
          "usedExports": true,
          "providedExports": null,
          "optimizationBailout": [],
          "depth": 2,
          "source": "\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst Color_1 = require(\"../math/Color\");\r\nconst Scene_1 = require(\"./Scene\");\r\nconst Material_1 = require(\"./materials/Material\");\r\nconst Shape_1 = require(\"./shapes/Shape\");\r\nconst SharedTree_1 = require(\"./tree/SharedTree\");\r\nconst Pointer_1 = require(\"../../pointer/src/Pointer\");\r\nconst Box_1 = require(\"./shapes/Box\");\r\nconst ThreadPool_1 = require(\"../renderer/worker/ThreadPool\");\r\nconst Texture_1 = require(\"./materials/Texture\");\r\nclass SharedScene extends Scene_1.Scene {\r\n    constructor(color = new Color_1.Color(), shapes = [], lights = [], tree = null, rays = 0) {\r\n        super(color, shapes, lights, tree, rays);\r\n        this.shared = true;\r\n    }\r\n    getMemory() {\r\n        console.time(\"getMemory\");\r\n        Pointer_1.Pointer.init();\r\n        var memory = Pointer_1.Pointer.memory;\r\n        memory.writeByte(0);\r\n        memory.writeByte(0);\r\n        memory.writeByte(0);\r\n        memory.position += ThreadPool_1.ThreadPool.maxThreads;\r\n        Texture_1.Texture.write(memory);\r\n        Material_1.Material.write(memory);\r\n        this.color.write(memory);\r\n        memory.writeUnsignedInt(this.shapes.length);\r\n        this.shapes.forEach(function (shape) {\r\n            shape.write(memory);\r\n        });\r\n        var box = Box_1.Box.boxForShapes(this.shapes);\r\n        box.write(memory);\r\n        SharedTree_1.SharedTree.buildAndWrite(memory, this.shapes);\r\n        console.timeEnd(\"getMemory\");\r\n        return memory;\r\n    }\r\n    static getScene(memory) {\r\n        var scene = new SharedScene();\r\n        memory.position = 0;\r\n        memory.position += 3;\r\n        memory.position += ThreadPool_1.ThreadPool.maxThreads;\r\n        var offset = Texture_1.Texture.restore(memory);\r\n        offset = Material_1.Material.restore(memory);\r\n        scene.color.read(memory);\r\n        var numShapes = memory.readUnsignedInt();\r\n        var shapes = [];\r\n        for (var i = 0; i < numShapes; i++) {\r\n            offset = Shape_1.restoreShape(memory, shapes);\r\n            var shape = shapes[i];\r\n            scene.add(shape);\r\n        }\r\n        var box = new Box_1.Box();\r\n        box.read(memory);\r\n        scene.tree = SharedTree_1.SharedTree.readFromMemory(memory, shapes);\r\n        scene.tree.box = box;\r\n        return scene;\r\n    }\r\n}\r\nexports.SharedScene = SharedScene;\r\n"
        },
        {
          "id": 26,
          "identifier": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-core\\src\\engine\\scene\\tree\\Tree.ts",
          "name": "./packages/render-core/src/engine/scene/tree/Tree.ts",
          "index": 15,
          "index2": 18,
          "size": 913,
          "cacheable": true,
          "built": false,
          "optional": false,
          "prefetched": false,
          "chunks": [
            0
          ],
          "assets": [],
          "issuer": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-core\\src\\engine\\scene\\Scene.ts",
          "issuerId": 41,
          "issuerName": "./packages/render-core/src/engine/scene/Scene.ts",
          "failed": false,
          "errors": 0,
          "warnings": 0,
          "reasons": [
            {
              "moduleId": 19,
              "moduleIdentifier": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-core\\src\\engine\\scene\\shapes\\Mesh.ts",
              "module": "./packages/render-core/src/engine/scene/shapes/Mesh.ts",
              "moduleName": "./packages/render-core/src/engine/scene/shapes/Mesh.ts",
              "type": "cjs require",
              "userRequest": "../tree/Tree",
              "loc": "8:15-38"
            },
            {
              "moduleId": 41,
              "moduleIdentifier": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-core\\src\\engine\\scene\\Scene.ts",
              "module": "./packages/render-core/src/engine/scene/Scene.ts",
              "moduleName": "./packages/render-core/src/engine/scene/Scene.ts",
              "type": "cjs require",
              "userRequest": "./tree/Tree",
              "loc": "4:15-37"
            }
          ],
          "usedExports": true,
          "providedExports": null,
          "optimizationBailout": [],
          "depth": 3,
          "source": "\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst Box_1 = require(\"../shapes/Box\");\r\nconst Node_1 = require(\"./Node\");\r\nconst Hit_1 = require(\"../../math/Hit\");\r\nclass Tree {\r\n    constructor(box, root) {\r\n        this.box = box;\r\n        this.root = root;\r\n    }\r\n    static newTree(shapes, box = null) {\r\n        console.time(\"Building k-d tree (\" + shapes.length + \" shapes)... \");\r\n        box = box ? box : Box_1.Box.boxForShapes(shapes);\r\n        var node = Node_1.Node.newNode(shapes);\r\n        node.split(0);\r\n        console.timeEnd(\"Building k-d tree (\" + shapes.length + \" shapes)... \");\r\n        return new Tree(box, node);\r\n    }\r\n    intersect(r) {\r\n        var t = this.box.intersect(r);\r\n        if (t.max < t.min || t.max <= 0) {\r\n            return Hit_1.NoHit;\r\n        }\r\n        return this.root.intersect(r, t.min, t.max);\r\n    }\r\n}\r\nexports.Tree = Tree;\r\n"
        },
        {
          "id": 27,
          "identifier": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-core\\src\\engine\\math\\HitInfo.ts",
          "name": "./packages/render-core/src/engine/math/HitInfo.ts",
          "index": 20,
          "index2": 13,
          "size": 423,
          "cacheable": true,
          "built": false,
          "optional": false,
          "prefetched": false,
          "chunks": [
            0
          ],
          "assets": [],
          "issuer": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-core\\src\\engine\\scene\\shapes\\TransformedShape.ts",
          "issuerId": 21,
          "issuerName": "./packages/render-core/src/engine/scene/shapes/TransformedShape.ts",
          "failed": false,
          "errors": 0,
          "warnings": 0,
          "reasons": [
            {
              "moduleId": 3,
              "moduleIdentifier": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-core\\src\\engine\\math\\Hit.ts",
              "module": "./packages/render-core/src/engine/math/Hit.ts",
              "moduleName": "./packages/render-core/src/engine/math/Hit.ts",
              "type": "cjs require",
              "userRequest": "./HitInfo",
              "loc": "4:18-38"
            },
            {
              "moduleId": 21,
              "moduleIdentifier": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-core\\src\\engine\\scene\\shapes\\TransformedShape.ts",
              "module": "./packages/render-core/src/engine/scene/shapes/TransformedShape.ts",
              "moduleName": "./packages/render-core/src/engine/scene/shapes/TransformedShape.ts",
              "type": "cjs require",
              "userRequest": "../../math/HitInfo",
              "loc": "6:18-47"
            }
          ],
          "usedExports": true,
          "providedExports": null,
          "optimizationBailout": [],
          "depth": 3,
          "source": "\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nclass HitInfo {\r\n    constructor(shape, position, normal, ray, color, material, inside) {\r\n        this.shape = shape;\r\n        this.position = position;\r\n        this.normal = normal;\r\n        this.ray = ray;\r\n        this.color = color;\r\n        this.material = material;\r\n        this.inside = inside;\r\n    }\r\n}\r\nexports.HitInfo = HitInfo;\r\n"
        },
        {
          "id": 28,
          "identifier": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-core\\src\\engine\\scene\\materials\\LightMaterial.ts",
          "name": "./packages/render-core/src/engine/scene/materials/LightMaterial.ts",
          "index": 35,
          "index2": 28,
          "size": 455,
          "cacheable": true,
          "built": false,
          "optional": false,
          "prefetched": false,
          "chunks": [
            0
          ],
          "assets": [],
          "issuer": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-core\\src\\engine\\scene\\materials\\MaterialUtils.ts",
          "issuerId": 17,
          "issuerName": "./packages/render-core/src/engine/scene/materials/MaterialUtils.ts",
          "failed": false,
          "errors": 0,
          "warnings": 0,
          "reasons": [
            {
              "moduleId": 17,
              "moduleIdentifier": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-core\\src\\engine\\scene\\materials\\MaterialUtils.ts",
              "module": "./packages/render-core/src/engine/scene/materials/MaterialUtils.ts",
              "moduleName": "./packages/render-core/src/engine/scene/materials/MaterialUtils.ts",
              "type": "cjs require",
              "userRequest": "./LightMaterial",
              "loc": "12:24-50"
            },
            {
              "moduleId": 52,
              "moduleIdentifier": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-client\\src\\views\\GIJSView.ts",
              "module": "./packages/render-client/src/views/GIJSView.ts",
              "moduleName": "./packages/render-client/src/views/GIJSView.ts",
              "type": "cjs require",
              "userRequest": "../../../render-core/src/engine/scene/materials/LightMaterial",
              "loc": "10:24-96"
            }
          ],
          "usedExports": true,
          "providedExports": null,
          "optimizationBailout": [],
          "depth": 2,
          "source": "\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst Material_1 = require(\"./Material\");\r\nconst Material_2 = require(\"./Material\");\r\nclass LightMaterial extends Material_1.Material {\r\n    constructor(color, emittance, attenuation) {\r\n        super(color, null, null, null, 1, emittance, attenuation, 1, 0, 0, false);\r\n        this.type = Material_2.MaterialType.EMISSIVE;\r\n    }\r\n}\r\nexports.LightMaterial = LightMaterial;\r\n"
        },
        {
          "id": 29,
          "identifier": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-core\\src\\engine\\scene\\tree\\SharedTree.ts",
          "name": "./packages/render-core/src/engine/scene/tree/SharedTree.ts",
          "index": 41,
          "index2": 36,
          "size": 2088,
          "cacheable": true,
          "built": true,
          "optional": false,
          "prefetched": false,
          "chunks": [
            0
          ],
          "assets": [],
          "issuer": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-core\\src\\engine\\scene\\SharedScene.ts",
          "issuerId": 25,
          "issuerName": "./packages/render-core/src/engine/scene/SharedScene.ts",
          "failed": false,
          "errors": 0,
          "warnings": 0,
          "reasons": [
            {
              "moduleId": 19,
              "moduleIdentifier": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-core\\src\\engine\\scene\\shapes\\Mesh.ts",
              "module": "./packages/render-core/src/engine/scene/shapes/Mesh.ts",
              "moduleName": "./packages/render-core/src/engine/scene/shapes/Mesh.ts",
              "type": "cjs require",
              "userRequest": "../tree/SharedTree",
              "loc": "11:21-50"
            },
            {
              "moduleId": 25,
              "moduleIdentifier": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-core\\src\\engine\\scene\\SharedScene.ts",
              "module": "./packages/render-core/src/engine/scene/SharedScene.ts",
              "moduleName": "./packages/render-core/src/engine/scene/SharedScene.ts",
              "type": "cjs require",
              "userRequest": "./tree/SharedTree",
              "loc": "7:21-49"
            }
          ],
          "usedExports": true,
          "providedExports": null,
          "optimizationBailout": [],
          "depth": 3,
          "source": "\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst Box_1 = require(\"../shapes/Box\");\r\nconst Hit_1 = require(\"../../math/Hit\");\r\nconst SharedNode_1 = require(\"./SharedNode\");\r\nconst ByteArrayBase_1 = require(\"../../../pointer/src/ByteArrayBase\");\r\nconst SharedNode_2 = require(\"./SharedNode\");\r\nclass SharedTree {\r\n    constructor(box, root) {\r\n        this.box = box;\r\n        this.root = root;\r\n    }\r\n    static newTree(shapes, box = null) {\r\n        console.time(\"Building k-d tree (\" + shapes.length + \" shapes)... \");\r\n        box = box ? box : Box_1.Box.boxForShapes(shapes);\r\n        var node = SharedNode_1.SharedNode.newNode(shapes);\r\n        node.split(0);\r\n        console.timeEnd(\"Building k-d tree (\" + shapes.length + \" shapes)... \");\r\n        return new SharedTree(box, node);\r\n    }\r\n    intersect(r) {\r\n        var t = this.box.intersect(r);\r\n        if (t.max < t.min || t.max <= 0) {\r\n            return Hit_1.NoHit;\r\n        }\r\n        return this.root.intersect(r, t.min, t.max);\r\n    }\r\n    static fromJson(tree, mesh) {\r\n        var box = Box_1.Box.fromJson(tree.box);\r\n        var node = SharedNode_1.SharedNode.fromJson(tree.root);\r\n        node.mesh = mesh;\r\n        return new SharedTree(box, node);\r\n    }\r\n    static readFromMemory(memory, shapes) {\r\n        var node = new SharedNode_1.SharedNode();\r\n        node.shapes = shapes;\r\n        node.readRoot(memory);\r\n        return new SharedTree(null, node);\r\n    }\r\n    static buildAndWrite(memory, shapes) {\r\n        var startPosition = memory.position;\r\n        var endPosition;\r\n        memory.position += ByteArrayBase_1.ByteArrayBase.SIZE_OF_UINT32;\r\n        var node = SharedNode_1.SharedNode.newNode(shapes, memory);\r\n        memory.writeUnsignedInt(SharedNode_2.NodeMarker.ROOT);\r\n        node.split(0);\r\n        endPosition = memory.position;\r\n        memory.position = startPosition;\r\n        memory.writeUnsignedInt(endPosition - startPosition);\r\n        memory.position = endPosition;\r\n        return memory.position;\r\n    }\r\n}\r\nexports.SharedTree = SharedTree;\r\n"
        },
        {
          "id": 30,
          "identifier": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-core\\src\\engine\\scene\\tree\\SharedNode.ts",
          "name": "./packages/render-core/src/engine/scene/tree/SharedNode.ts",
          "index": 42,
          "index2": 35,
          "size": 14964,
          "cacheable": true,
          "built": false,
          "optional": false,
          "prefetched": false,
          "chunks": [
            0
          ],
          "assets": [],
          "issuer": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-core\\src\\engine\\scene\\tree\\SharedTree.ts",
          "issuerId": 29,
          "issuerName": "./packages/render-core/src/engine/scene/tree/SharedTree.ts",
          "failed": false,
          "errors": 0,
          "warnings": 0,
          "reasons": [
            {
              "moduleId": 29,
              "moduleIdentifier": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-core\\src\\engine\\scene\\tree\\SharedTree.ts",
              "module": "./packages/render-core/src/engine/scene/tree/SharedTree.ts",
              "moduleName": "./packages/render-core/src/engine/scene/tree/SharedTree.ts",
              "type": "cjs require",
              "userRequest": "./SharedNode",
              "loc": "5:21-44"
            },
            {
              "moduleId": 29,
              "moduleIdentifier": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-core\\src\\engine\\scene\\tree\\SharedTree.ts",
              "module": "./packages/render-core/src/engine/scene/tree/SharedTree.ts",
              "moduleName": "./packages/render-core/src/engine/scene/tree/SharedTree.ts",
              "type": "cjs require",
              "userRequest": "./SharedNode",
              "loc": "7:21-44"
            }
          ],
          "usedExports": true,
          "providedExports": null,
          "optimizationBailout": [],
          "depth": 4,
          "source": "\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst Axis_1 = require(\"../Axis\");\r\nconst Hit_1 = require(\"../../math/Hit\");\r\nconst MapUtils_1 = require(\"../../utils/MapUtils\");\r\nconst MapUtils_2 = require(\"../../utils/MapUtils\");\r\nconst MathUtils_1 = require(\"../../utils/MathUtils\");\r\nconst ByteArrayBase_1 = require(\"../../../pointer/src/ByteArrayBase\");\r\nconst DirectMemory_1 = require(\"../../../pointer/src/DirectMemory\");\r\nvar NodeMarker;\r\n(function (NodeMarker) {\r\n    NodeMarker[NodeMarker[\"ROOT\"] = 1118481] = \"ROOT\";\r\n    NodeMarker[NodeMarker[\"LEFT\"] = 15597585] = \"LEFT\";\r\n    NodeMarker[NodeMarker[\"RIGHT\"] = 1114350] = \"RIGHT\";\r\n    NodeMarker[NodeMarker[\"LEAF\"] = 15597806] = \"LEAF\";\r\n    NodeMarker[NodeMarker[\"EON\"] = 14737632] = \"EON\";\r\n    NodeMarker[NodeMarker[\"NULL\"] = 15658734] = \"NULL\";\r\n})(NodeMarker = exports.NodeMarker || (exports.NodeMarker = {}));\r\nclass SharedNode {\r\n    constructor(axis = null, point = null, shapes = null, shapeIndices = null, _left = null, _right = null) {\r\n        this.axis = axis;\r\n        this.point = point;\r\n        this.shapes = shapes;\r\n        this.shapeIndices = shapeIndices;\r\n        this._left = _left;\r\n        this._right = _right;\r\n        this.size = 0;\r\n        this.treeLength = 0;\r\n        this.thisPtr = -1;\r\n        this.resolved = false;\r\n        this.index = SharedNode.map.push(this) - 1;\r\n    }\r\n    get left() {\r\n        if (!this._left) {\r\n            this.readChild(this.memory, NodeMarker.LEFT);\r\n        }\r\n        return this._left;\r\n    }\r\n    set left(value) {\r\n        this._left = value;\r\n    }\r\n    get right() {\r\n        if (!this._right) {\r\n            this.readChild(this.memory, NodeMarker.RIGHT);\r\n        }\r\n        return this._right;\r\n    }\r\n    set right(value) {\r\n        this._right = value;\r\n    }\r\n    readRoot(memory) {\r\n        this.memory = memory;\r\n        this.thisPtr = memory.position;\r\n        this.treeLength = memory.readUnsignedInt();\r\n        this.marker = memory.readUnsignedInt();\r\n        if (this.marker == NodeMarker.LEAF) {\r\n            this.axis = memory.readByte();\r\n            this.point = memory.readFloat();\r\n            var shapeLength = memory.readUnsignedInt();\r\n            this.shapeIndices = [];\r\n            for (var i = 0; i < shapeLength; i++) {\r\n                var shapeIndex = memory.readUnsignedInt();\r\n                this.shapeIndices.push(shapeIndex);\r\n            }\r\n            if (memory.readUnsignedInt() != NodeMarker.EON) {\r\n                console.error(\"End marker not found on leaf node\");\r\n            }\r\n            this.resolved = true;\r\n            return memory.position;\r\n        }\r\n        else if (this.marker != NodeMarker.ROOT) {\r\n            throw \"Root marker not found!, found:\" + this.marker + \",  pos:\" + memory.position;\r\n        }\r\n        else {\r\n            this.axis = memory.readByte();\r\n            this.point = memory.readFloat();\r\n            this.leftPtr = memory.readUnsignedInt();\r\n            this.rightPtr = memory.readUnsignedInt();\r\n        }\r\n        this.resolved = true;\r\n        memory.position = this.thisPtr + this.treeLength;\r\n        return memory.position;\r\n    }\r\n    read(memory) {\r\n        if (this.resolved) {\r\n            return;\r\n        }\r\n        this.memory = memory;\r\n        if (this.thisPtr == -1) {\r\n            this.thisPtr = memory.position;\r\n        }\r\n        else {\r\n            memory.position = this.thisPtr;\r\n        }\r\n        this.marker = memory.readUnsignedInt();\r\n        this.axis = memory.readByte();\r\n        this.point = memory.readFloat();\r\n        if (this.marker == NodeMarker.LEAF) {\r\n            var shapeLength = memory.readUnsignedInt();\r\n            this.shapeIndices = [];\r\n            for (var i = 0; i < shapeLength; i++) {\r\n                var shapeIndex = memory.readUnsignedInt();\r\n                this.shapeIndices.push(shapeIndex);\r\n            }\r\n            if (memory.readUnsignedInt() != NodeMarker.EON) {\r\n                console.error(\"End marker not found on leaf node\");\r\n            }\r\n        }\r\n        else {\r\n            this.leftPtr = memory.readUnsignedInt();\r\n            this.rightPtr = memory.readUnsignedInt();\r\n        }\r\n        this.resolved = true;\r\n        return memory.position;\r\n    }\r\n    readChild(memory, marker) {\r\n        var node = new SharedNode();\r\n        if (marker == NodeMarker.LEFT) {\r\n            memory.position = this.leftPtr;\r\n            node.read(memory);\r\n            this.left = node;\r\n        }\r\n        else if (marker == NodeMarker.RIGHT) {\r\n            memory.position = this.rightPtr;\r\n            node.read(memory);\r\n            this.right = node;\r\n        }\r\n        return memory.position;\r\n    }\r\n    static newNode(shapes, memory) {\r\n        var node = new SharedNode(Axis_1.Axis.AxisNone, 0, shapes, [], null, null);\r\n        node.memory = memory;\r\n        return node;\r\n    }\r\n    static fromJson(node) {\r\n        return new SharedNode(node.axis, node.point, null, node.shapeIndices, node.left, node.right);\r\n    }\r\n    intersect(r, tmin, tmax) {\r\n        var node = this;\r\n        var tsplit;\r\n        var leftFirst;\r\n        switch (node.axis) {\r\n            case Axis_1.Axis.AxisNone:\r\n                return this.intersectShapes(node, r);\r\n            case Axis_1.Axis.AxisX:\r\n                tsplit = (node.point - r.origin.x) / r.direction.x;\r\n                leftFirst = (r.origin.x < node.point) || (r.origin.x == node.point && r.direction.x <= 0);\r\n                break;\r\n            case Axis_1.Axis.AxisY:\r\n                tsplit = (node.point - r.origin.y) / r.direction.y;\r\n                leftFirst = (r.origin.y < node.point) || (r.origin.y == node.point && r.direction.y <= 0);\r\n                break;\r\n            case Axis_1.Axis.AxisZ:\r\n                tsplit = (node.point - r.origin.z) / r.direction.z;\r\n                leftFirst = (r.origin.z < node.point) || (r.origin.z == node.point && r.direction.z <= 0);\r\n                break;\r\n        }\r\n        var first;\r\n        var second;\r\n        if (leftFirst) {\r\n            first = node.left;\r\n            second = node.right;\r\n        }\r\n        else {\r\n            first = node.right;\r\n            second = node.left;\r\n        }\r\n        if (!first || !second) {\r\n            console.log(\"node:\", node);\r\n            console.log(\"null nodes found\");\r\n        }\r\n        if (tsplit > tmax || tsplit <= 0) {\r\n            return this.intersectNode(first, r, tmin, tmax);\r\n        }\r\n        else if (tsplit < tmin) {\r\n            return this.intersectNode(second, r, tmin, tmax);\r\n        }\r\n        else {\r\n            var h1 = this.intersectNode(first, r, tmin, tsplit);\r\n            if (h1.T <= tsplit) {\r\n                return h1;\r\n            }\r\n            var h2 = this.intersectNode(second, r, tsplit, Math.min(tmax, h1.T));\r\n            if (h1.T <= h2.T) {\r\n                return h1;\r\n            }\r\n            else {\r\n                return h2;\r\n            }\r\n        }\r\n    }\r\n    intersectNode(node, r, tmin, tmax) {\r\n        var tsplit;\r\n        var leftFirst;\r\n        switch (node.axis) {\r\n            case Axis_1.Axis.AxisNone:\r\n                return this.intersectShapes(node, r);\r\n            case Axis_1.Axis.AxisX:\r\n                tsplit = (node.point - r.origin.x) / r.direction.x;\r\n                leftFirst = (r.origin.x < node.point) || (r.origin.x == node.point && r.direction.x <= 0);\r\n                break;\r\n            case Axis_1.Axis.AxisY:\r\n                tsplit = (node.point - r.origin.y) / r.direction.y;\r\n                leftFirst = (r.origin.y < node.point) || (r.origin.y == node.point && r.direction.y <= 0);\r\n                break;\r\n            case Axis_1.Axis.AxisZ:\r\n                tsplit = (node.point - r.origin.z) / r.direction.z;\r\n                leftFirst = (r.origin.z < node.point) || (r.origin.z == node.point && r.direction.z <= 0);\r\n                break;\r\n        }\r\n        var first;\r\n        var second;\r\n        if (leftFirst) {\r\n            first = node.left;\r\n            second = node.right;\r\n        }\r\n        else {\r\n            first = node.right;\r\n            second = node.left;\r\n        }\r\n        if (tsplit > tmax || tsplit <= 0) {\r\n            return this.intersectNode(first, r, tmin, tmax);\r\n        }\r\n        else if (tsplit < tmin) {\r\n            return this.intersectNode(second, r, tmin, tmax);\r\n        }\r\n        else {\r\n            var h1 = this.intersectNode(first, r, tmin, tsplit);\r\n            if (h1.T <= tsplit) {\r\n                return h1;\r\n            }\r\n            var h2 = this.intersectNode(second, r, tsplit, Math.min(tmax, h1.T));\r\n            if (h1.T <= h2.T) {\r\n                return h1;\r\n            }\r\n            else {\r\n                return h2;\r\n            }\r\n        }\r\n    }\r\n    intersectShapes(node, r) {\r\n        var hit = Hit_1.NoHit;\r\n        var self = this;\r\n        if (!node.resolved && !node.shapeIndices) {\r\n            node.read(this.memory);\r\n        }\r\n        var i = 0;\r\n        var shapeIndex;\r\n        var shape;\r\n        var h;\r\n        for (; i < node.shapeIndices.length; i++) {\r\n            shapeIndex = node.shapeIndices[i];\r\n            shape = self.shapes[shapeIndex];\r\n            h = shape.intersect(r);\r\n            if (h.T < hit.T) {\r\n                hit = h;\r\n            }\r\n        }\r\n        return hit;\r\n    }\r\n    partitionScore(axis, point) {\r\n        var node = this;\r\n        var left = 0;\r\n        var right = 0;\r\n        node.shapes.forEach(function (shape) {\r\n            var box = shape.box;\r\n            var p = box.partition(axis, point);\r\n            if (p.left) {\r\n                left++;\r\n            }\r\n            if (p.right) {\r\n                right++;\r\n            }\r\n        });\r\n        if (left >= right) {\r\n            return left;\r\n        }\r\n        else {\r\n            return right;\r\n        }\r\n    }\r\n    partition(size, axis, point) {\r\n        var node = this;\r\n        var left = [];\r\n        var right = [];\r\n        node.shapes.forEach(function (shape) {\r\n            var box = shape.box;\r\n            var p = box.partition(axis, point);\r\n            if (p.left) {\r\n                left = MapUtils_1.append(left, shape);\r\n            }\r\n            if (p.right) {\r\n                right = MapUtils_1.append(right, shape);\r\n            }\r\n        });\r\n        return { left: left, right: right };\r\n    }\r\n    split(depth) {\r\n        var node = this;\r\n        if (node.shapes.length < 8) {\r\n            var self = this;\r\n            this.memory.position -= DirectMemory_1.DirectMemory.SIZE_OF_UINT32;\r\n            this.memory.writeUnsignedInt(NodeMarker.LEAF);\r\n            this.memory.writeByte(Axis_1.Axis.AxisNone);\r\n            this.memory.writeFloat(0);\r\n            this.memory.writeUnsignedInt(node.shapes.length);\r\n            node.shapes.forEach(function (shape) {\r\n                if (self.memory) {\r\n                    self.memory.writeUnsignedInt(shape.index);\r\n                }\r\n            });\r\n            if (this.memory) {\r\n                this.memory.writeUnsignedInt(NodeMarker.EON);\r\n            }\r\n            return false;\r\n        }\r\n        var xs = [];\r\n        var ys = [];\r\n        var zs = [];\r\n        node.shapes.forEach(function (shape) {\r\n            var box = shape.box;\r\n            xs = MapUtils_1.append(xs, box.min.x);\r\n            xs = MapUtils_1.append(xs, box.max.x);\r\n            ys = MapUtils_1.append(ys, box.min.y);\r\n            ys = MapUtils_1.append(ys, box.max.y);\r\n            zs = MapUtils_1.append(zs, box.min.z);\r\n            zs = MapUtils_1.append(zs, box.max.z);\r\n        });\r\n        MapUtils_2.sortAscending(xs);\r\n        MapUtils_2.sortAscending(ys);\r\n        MapUtils_2.sortAscending(zs);\r\n        var mx = MathUtils_1.MathUtils.median(xs);\r\n        var my = MathUtils_1.MathUtils.median(ys);\r\n        var mz = MathUtils_1.MathUtils.median(zs);\r\n        var best = Math.round(node.shapes.length * 0.85);\r\n        var bestAxis = Axis_1.Axis.AxisNone;\r\n        var bestPoint = 0.0;\r\n        var sx = node.partitionScore(Axis_1.Axis.AxisX, mx);\r\n        if (sx < best) {\r\n            best = sx;\r\n            bestAxis = Axis_1.Axis.AxisX;\r\n            bestPoint = mx;\r\n        }\r\n        var sy = node.partitionScore(Axis_1.Axis.AxisY, my);\r\n        if (sy < best) {\r\n            best = sy;\r\n            bestAxis = Axis_1.Axis.AxisY;\r\n            bestPoint = my;\r\n        }\r\n        var sz = node.partitionScore(Axis_1.Axis.AxisZ, mz);\r\n        if (sz < best) {\r\n            best = sz;\r\n            bestAxis = Axis_1.Axis.AxisZ;\r\n            bestPoint = mz;\r\n        }\r\n        if (bestAxis == Axis_1.Axis.AxisNone) {\r\n            var shapes = node.shapes;\r\n            var shapeIndices = [];\r\n            let self = this;\r\n            if (this.memory) {\r\n                this.memory.position -= DirectMemory_1.DirectMemory.SIZE_OF_UINT32;\r\n                this.memory.writeUnsignedInt(NodeMarker.LEAF);\r\n                this.memory.writeByte(bestAxis);\r\n                this.memory.writeFloat(bestPoint);\r\n                this.memory.writeUnsignedInt(shapes.length);\r\n            }\r\n            shapes.forEach(function (shape) {\r\n                shapeIndices.push(shape.index);\r\n                if (self.memory) {\r\n                    self.memory.writeUnsignedInt(shape.index);\r\n                }\r\n            });\r\n            if (this.memory) {\r\n                this.memory.writeUnsignedInt(NodeMarker.EON);\r\n            }\r\n            node.shapes = null;\r\n            node.shapeIndices = shapeIndices;\r\n            return true;\r\n        }\r\n        var p = node.partition(best, bestAxis, bestPoint);\r\n        node.axis = bestAxis;\r\n        node.point = bestPoint;\r\n        node.left = SharedNode.newNode(p.left, this.memory);\r\n        node.right = SharedNode.newNode(p.right, this.memory);\r\n        if (this.memory) {\r\n            this.memory.writeByte(bestAxis);\r\n            this.memory.writeFloat(bestPoint);\r\n            var leftStartPosition = this.memory.position + (2 * ByteArrayBase_1.ByteArrayBase.SIZE_OF_UINT32);\r\n            this.memory.writeUnsignedInt(leftStartPosition);\r\n            var rightLengthPosition = this.memory.position;\r\n            this.memory.position += ByteArrayBase_1.ByteArrayBase.SIZE_OF_UINT32;\r\n            this.memory.writeUnsignedInt(NodeMarker.LEFT);\r\n        }\r\n        node.left.split(depth + 1);\r\n        if (this.memory) {\r\n            var rightStartPosition = this.memory.position;\r\n            this.memory.position = rightLengthPosition;\r\n            this.memory.writeUnsignedInt(rightStartPosition);\r\n            this.memory.position = rightStartPosition;\r\n            this.memory.writeUnsignedInt(NodeMarker.RIGHT);\r\n        }\r\n        node.right.split(depth + 1);\r\n        if (this.memory) {\r\n            this.memory.writeUnsignedInt(NodeMarker.EON);\r\n        }\r\n        node.shapes = null;\r\n        return true;\r\n    }\r\n}\r\nSharedNode.map = [];\r\nexports.SharedNode = SharedNode;\r\n"
        },
        {
          "id": 31,
          "identifier": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-core\\src\\engine\\renderer\\worker\\ThreadPool.ts",
          "name": "./packages/render-core/src/engine/renderer/worker/ThreadPool.ts",
          "index": 45,
          "index2": 45,
          "size": 687,
          "cacheable": true,
          "built": false,
          "optional": false,
          "prefetched": false,
          "chunks": [
            0
          ],
          "assets": [],
          "issuer": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-core\\src\\engine\\scene\\SharedScene.ts",
          "issuerId": 25,
          "issuerName": "./packages/render-core/src/engine/scene/SharedScene.ts",
          "failed": false,
          "errors": 0,
          "warnings": 0,
          "reasons": [
            {
              "moduleId": 25,
              "moduleIdentifier": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-core\\src\\engine\\scene\\SharedScene.ts",
              "module": "./packages/render-core/src/engine/scene/SharedScene.ts",
              "moduleName": "./packages/render-core/src/engine/scene/SharedScene.ts",
              "type": "cjs require",
              "userRequest": "../renderer/worker/ThreadPool",
              "loc": "10:21-61"
            },
            {
              "moduleId": 33,
              "moduleIdentifier": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-core\\src\\engine\\renderer\\worker\\TraceJobManager.ts",
              "module": "./packages/render-core/src/engine/renderer/worker/TraceJobManager.ts",
              "moduleName": "./packages/render-core/src/engine/renderer/worker/TraceJobManager.ts",
              "type": "cjs require",
              "userRequest": "./ThreadPool",
              "loc": "3:21-44"
            }
          ],
          "usedExports": true,
          "providedExports": null,
          "optimizationBailout": [],
          "depth": 3,
          "source": "\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst Thread_1 = require(\"./Thread\");\r\nclass ThreadPool {\r\n    static get maxThreads() {\r\n        return navigator[\"hardwareConcurrency\"] - 4 || 2;\r\n    }\r\n    ;\r\n    static getThreads() {\r\n        console.info(\"Available Threads:\" + ThreadPool.maxThreads);\r\n        if (ThreadPool.pool) {\r\n            return ThreadPool.pool;\r\n        }\r\n        var threads = [];\r\n        for (var i = 0; i < ThreadPool.maxThreads; i++) {\r\n            threads.push(new Thread_1.Thread(\"Thread:#\" + i, i));\r\n        }\r\n        ThreadPool.pool = threads;\r\n        return threads;\r\n    }\r\n}\r\nexports.ThreadPool = ThreadPool;\r\n"
        },
        {
          "id": 32,
          "identifier": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-core\\src\\engine\\renderer\\worker\\TraceJob.ts",
          "name": "./packages/render-core/src/engine/renderer/worker/TraceJob.ts",
          "index": 47,
          "index2": 42,
          "size": 1848,
          "cacheable": true,
          "built": false,
          "optional": false,
          "prefetched": false,
          "chunks": [
            0
          ],
          "assets": [],
          "issuer": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-core\\src\\engine\\renderer\\SmartBucketRenderer.ts",
          "issuerId": 34,
          "issuerName": "./packages/render-core/src/engine/renderer/SmartBucketRenderer.ts",
          "failed": false,
          "errors": 0,
          "warnings": 0,
          "reasons": [
            {
              "moduleId": 34,
              "moduleIdentifier": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-core\\src\\engine\\renderer\\SmartBucketRenderer.ts",
              "module": "./packages/render-core/src/engine/renderer/SmartBucketRenderer.ts",
              "moduleName": "./packages/render-core/src/engine/renderer/SmartBucketRenderer.ts",
              "type": "cjs require",
              "userRequest": "./worker/TraceJob",
              "loc": "4:19-47"
            },
            {
              "moduleId": 50,
              "moduleIdentifier": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-core\\src\\engine\\renderer\\worker\\Thread.ts",
              "module": "./packages/render-core/src/engine/renderer/worker/Thread.ts",
              "moduleName": "./packages/render-core/src/engine/renderer/worker/Thread.ts",
              "type": "cjs require",
              "userRequest": "./TraceJob",
              "loc": "3:19-40"
            }
          ],
          "usedExports": true,
          "providedExports": null,
          "optimizationBailout": [],
          "depth": 3,
          "source": "\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nclass TraceJob {\r\n    constructor(param, extra = {}) {\r\n        this.param = param;\r\n        this.extra = extra;\r\n        this.runCount = 0;\r\n        this.id = param.id;\r\n        this.finished = false;\r\n    }\r\n    get lifeCount() {\r\n        return this._lifeCount;\r\n    }\r\n    get time() {\r\n        return this._time;\r\n    }\r\n    start(thread, onComplete) {\r\n        this._time = performance.now();\r\n        var self = this;\r\n        var _param = this.getTraceParam();\r\n        thread.trace(_param, function (thread) {\r\n            self._time = performance.now() - self._time;\r\n            self._lifeCount = Math.round(self._time / 10);\r\n            if (onComplete) {\r\n                onComplete(self, thread);\r\n            }\r\n        });\r\n        this.runCount++;\r\n    }\r\n    getTraceParam() {\r\n        var _param = { init_iterations: 0 };\r\n        var extraCount = 0;\r\n        for (key in this.extra) {\r\n            if (this.extra.hasOwnProperty(key)) {\r\n                _param[key] = this.extra[key];\r\n                delete this.extra[key];\r\n                extraCount++;\r\n            }\r\n        }\r\n        if (extraCount > 0) {\r\n            for (var key in this.param) {\r\n                if (this.param.hasOwnProperty(key)) {\r\n                    _param[key] = this.param[key];\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            _param = this.param;\r\n        }\r\n        _param.init_iterations = (this.runCount * this.param.blockIterations) - (this.runCount > 0 ? (this.param.blockIterations - 1) : 0);\r\n        return _param;\r\n    }\r\n}\r\nTraceJob.INIT = \"INIT\";\r\nTraceJob.INITED = \"INITED\";\r\nTraceJob.TRACE = \"TRACE\";\r\nTraceJob.TRACED = \"TRACED\";\r\nTraceJob.TERMINATE = \"TERMINATE\";\r\nTraceJob.LOCKED = \"LOCKED\";\r\nexports.TraceJob = TraceJob;\r\n"
        },
        {
          "id": 33,
          "identifier": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-core\\src\\engine\\renderer\\worker\\TraceJobManager.ts",
          "name": "./packages/render-core/src/engine/renderer/worker/TraceJobManager.ts",
          "index": 48,
          "index2": 43,
          "size": 8670,
          "cacheable": true,
          "built": false,
          "optional": false,
          "prefetched": false,
          "chunks": [
            0
          ],
          "assets": [],
          "issuer": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-core\\src\\engine\\renderer\\SmartBucketRenderer.ts",
          "issuerId": 34,
          "issuerName": "./packages/render-core/src/engine/renderer/SmartBucketRenderer.ts",
          "failed": false,
          "errors": 2,
          "warnings": 0,
          "reasons": [
            {
              "moduleId": 34,
              "moduleIdentifier": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-core\\src\\engine\\renderer\\SmartBucketRenderer.ts",
              "module": "./packages/render-core/src/engine/renderer/SmartBucketRenderer.ts",
              "moduleName": "./packages/render-core/src/engine/renderer/SmartBucketRenderer.ts",
              "type": "cjs require",
              "userRequest": "./worker/TraceJobManager",
              "loc": "3:26-61"
            },
            {
              "moduleId": 50,
              "moduleIdentifier": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-core\\src\\engine\\renderer\\worker\\Thread.ts",
              "module": "./packages/render-core/src/engine/renderer/worker/Thread.ts",
              "moduleName": "./packages/render-core/src/engine/renderer/worker/Thread.ts",
              "type": "cjs require",
              "userRequest": "./TraceJobManager",
              "loc": "4:26-54"
            }
          ],
          "usedExports": true,
          "providedExports": null,
          "optimizationBailout": [],
          "depth": 3,
          "source": "\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst ThreadPool_1 = require(\"./ThreadPool\");\r\nclass TraceJobManager {\r\n    constructor() {\r\n        this.iterations = 0;\r\n        this.initCount = 0;\r\n        this.maxLoop = 1;\r\n        this.currentLoop = 0;\r\n        this.totalThreads = 0;\r\n        this.deferredStart = false;\r\n        this.lockCount = 0;\r\n        this.queue = [];\r\n        this.deferredQueue = [];\r\n        this.referenceQueue = [];\r\n    }\r\n    get initialized() {\r\n        return this._initialized;\r\n    }\r\n    get isAllLocked() {\r\n        for (var i = 0; i < this.totalThreads; i++) {\r\n            if (this.flags[3 + i] !== 3 && this.flags[3 + i] !== 0) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n    get finished() {\r\n        return this._finished;\r\n    }\r\n    get pixels() {\r\n        return this.pixelMemory;\r\n    }\r\n    configure(param, scene) {\r\n        console.log(\"configure\");\r\n        this.width = param.width;\r\n        this.height = param.height;\r\n        console.log(\"Checkpoint #1\");\r\n        try {\r\n            this.sceneMemory = scene.getMemory();\r\n        }\r\n        catch (e) {\r\n            console.log(e);\r\n        }\r\n        console.log(\"Checkpoint #2\");\r\n        this.flags = new Uint8Array(this.sceneMemory.data.buffer, 0, 3 + ThreadPool_1.ThreadPool.maxThreads);\r\n        TraceJobManager.flags = this.flags;\r\n        this.pixelMemory = new Uint8Array(new SharedArrayBuffer(this.width * this.height * 3));\r\n        this.sampleMemory = new Float32Array(new SharedArrayBuffer(4 * this.width * this.height * 3));\r\n        console.log(\"Checkpoint #3\");\r\n        this.traceParameters = {\r\n            pixelBuffer: this.pixelMemory.buffer,\r\n            sampleBuffer: this.sampleMemory.buffer,\r\n            sceneBuffer: this.sceneMemory.buffer,\r\n            camera: param.camera,\r\n            cameraSamples: param.cameraSamples,\r\n            hitSamples: param.hitSamples,\r\n            bounces: param.bounces,\r\n            full_width: this.width,\r\n            full_height: this.height\r\n        };\r\n    }\r\n    add(job) {\r\n        this.queue.push(job);\r\n        this.referenceQueue.push(job);\r\n    }\r\n    init(callback) {\r\n        console.log(\"Initializing threads...\");\r\n        console.time(\"init\");\r\n        this.threads = ThreadPool_1.ThreadPool.getThreads();\r\n        console.log(\"Checkpoint #4\");\r\n        this.totalThreads = this.threads.length;\r\n        this.lockCount = this.threads.length;\r\n        this.initNext(callback);\r\n        console.log(\"Checkpoint #5\");\r\n    }\r\n    initNext(callback) {\r\n        var self = this;\r\n        if (this.initCount == this.totalThreads) {\r\n            this._initialized = true;\r\n            console.timeEnd(\"init\");\r\n            if (callback) {\r\n                callback();\r\n            }\r\n            else {\r\n                this.start();\r\n            }\r\n            return;\r\n        }\r\n        var thread = this.threads[this.initCount++];\r\n        thread.onThreadLocked = this.onThreadLocked.bind(this);\r\n        thread.init(this.traceParameters, [\r\n            this.traceParameters.pixelBuffer,\r\n            this.traceParameters.sampleBuffer,\r\n            this.traceParameters.sceneBuffer\r\n        ], function () {\r\n            console.log(\"thread:\" + self.initCount + \" inited\");\r\n            self.initNext.bind(self)(callback);\r\n        });\r\n    }\r\n    onThreadLocked() {\r\n        this.lockCount++;\r\n        if (this.isAllLocked && this.deferredStart) {\r\n            this.deferredStart = false;\r\n            this.clear();\r\n            this.restart();\r\n        }\r\n        console.log(\"lockCount:\" + this.lockCount);\r\n    }\r\n    lockAllThreads() {\r\n        for (var i = 0; i < this.threads.length; i++) {\r\n            var thread = this.threads[i];\r\n            if (thread.isTracing) {\r\n                this.flags[3 + i] = 2;\r\n            }\r\n            else {\r\n                this.flags[3 + i] = 0;\r\n            }\r\n        }\r\n    }\r\n    stop() {\r\n        if (this.flags) {\r\n            this.queue = null;\r\n            this.deferredQueue = null;\r\n            this.deferredStart = false;\r\n            this.lockAllThreads();\r\n            this.stopped = true;\r\n            this.lockCount = 0;\r\n            this._await = true;\r\n            var job;\r\n            for (var i = 0; i < this.referenceQueue.length; i++) {\r\n                job = this.referenceQueue[i];\r\n                job.runCount = 0;\r\n            }\r\n        }\r\n    }\r\n    clear() {\r\n        for (var y = 0; y < this.height; y++) {\r\n            for (var x = 0; x < this.width; x++) {\r\n                var si = (y * (this.width * 3)) + (x * 3);\r\n                this.pixelMemory[si] = 0;\r\n                this.pixelMemory[si + 1] = 0;\r\n                this.pixelMemory[si + 2] = 0;\r\n                this.sampleMemory[si] = 0;\r\n                this.sampleMemory[si + 1] = 0;\r\n                this.sampleMemory[si + 2] = 0;\r\n            }\r\n        }\r\n        if (this.updatePixels) {\r\n            this.updatePixels({\r\n                xoffset: 0,\r\n                yoffset: 0,\r\n                width: this.width,\r\n                height: this.height,\r\n                pixels: this.pixelMemory\r\n            });\r\n        }\r\n    }\r\n    restart() {\r\n        if (!this.stopped) {\r\n            this.stop();\r\n        }\r\n        if (this.flags && this.isAllThreadsFree) {\r\n            this.queue = this.referenceQueue.concat();\r\n            this.deferredQueue = [];\r\n            this._await = false;\r\n            this.deferredStart = false;\r\n            clearTimeout(this.resetTimerId);\r\n            this.resetTimerId = setTimeout(this.start.bind(this), 100);\r\n        }\r\n        else {\r\n            this.deferredStart = true;\r\n        }\r\n    }\r\n    get isAllThreadsFree() {\r\n        var thread;\r\n        for (var i = 0; i < this.threads.length; i++) {\r\n            thread = this.threads[i];\r\n            if (thread.isTracing) {\r\n                if (this.flags[3 + i] === 1 || this.flags[3 + i] === 2) {\r\n                    return false;\r\n                }\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n    start() {\r\n        if (this.currentLoop >= this.maxLoop || (this.queue.length == 0 && this.deferredQueue.length === 0)) {\r\n            console.log(\"Rendering finished\");\r\n            return;\r\n        }\r\n        console.log(\"queue:\" + this.queue.length);\r\n        console.time('trace::start');\r\n        var self = this;\r\n        if (this._initialized) {\r\n            this.stopped = false;\r\n            var thread;\r\n            var job;\r\n            for (var i = 0; i < this.threads.length; i++) {\r\n                thread = this.threads[i];\r\n                if (self.queue && self.deferredQueue && self.queue.length > 0) {\r\n                    job = self.queue.shift();\r\n                    self.deferredQueue.push(job);\r\n                    job.start(thread, function (_job, _thread) {\r\n                        if (!self._await) {\r\n                            self.processQueue.call(self, _job, _thread);\r\n                        }\r\n                    });\r\n                }\r\n                else {\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    processQueue(job, thread) {\r\n        if (this.updatePixels) {\r\n            this.updatePixels(job.param);\r\n        }\r\n        if (this._finished) {\r\n            return;\r\n        }\r\n        var self = this;\r\n        if (this.queue.length > 0) {\r\n            var job = self.queue.shift();\r\n            self.deferredQueue.push(job);\r\n            if (this.updateIndicator) {\r\n                this.updateIndicator(job.param);\r\n            }\r\n            job.start(thread, function (_job, _thread) {\r\n                if (!self._await) {\r\n                    self.processQueue.call(self, _job, _thread);\r\n                }\r\n            });\r\n        }\r\n        else {\r\n            if (this.isAllThreadsFree) {\r\n                this._finished = true;\r\n                console.timeEnd('trace::start');\r\n                this.initDeferredQueue();\r\n            }\r\n        }\r\n    }\r\n    initDeferredQueue() {\r\n        if (this.currentLoop >= this.maxLoop || (this.queue.length == 0 && this.deferredQueue.length === 0)) {\r\n            console.log(\"Rendering finished\");\r\n            return;\r\n        }\r\n        this.currentLoop++;\r\n        this._finished = false;\r\n        var self = this;\r\n        self.deferredQueue.sort(function (a, b) {\r\n            return b.time - a.time;\r\n        });\r\n        self.queue = self.deferredQueue;\r\n        self.deferredQueue = [];\r\n        console.time('trace::start');\r\n        this.start();\r\n    }\r\n}\r\nexports.TraceJobManager = TraceJobManager;\r\n"
        },
        {
          "id": 34,
          "identifier": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-core\\src\\engine\\renderer\\SmartBucketRenderer.ts",
          "name": "./packages/render-core/src/engine/renderer/SmartBucketRenderer.ts",
          "index": 49,
          "index2": 47,
          "size": 2583,
          "cacheable": true,
          "built": false,
          "optional": false,
          "prefetched": false,
          "chunks": [
            0
          ],
          "assets": [],
          "issuer": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-client\\src\\render\\GIRenderBase.ts",
          "issuerId": 35,
          "issuerName": "./packages/render-client/src/render/GIRenderBase.ts",
          "failed": false,
          "errors": 1,
          "warnings": 0,
          "reasons": [
            {
              "moduleId": 35,
              "moduleIdentifier": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-client\\src\\render\\GIRenderBase.ts",
              "module": "./packages/render-client/src/render/GIRenderBase.ts",
              "moduleName": "./packages/render-client/src/render/GIRenderBase.ts",
              "type": "cjs require",
              "userRequest": "../../../render-core/src/engine/renderer/SmartBucketRenderer",
              "loc": "4:30-101"
            },
            {
              "moduleId": 38,
              "moduleIdentifier": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-client\\src\\render\\HeadlessRenderBase.ts",
              "module": "./packages/render-client/src/render/HeadlessRenderBase.ts",
              "moduleName": "./packages/render-client/src/render/HeadlessRenderBase.ts",
              "type": "cjs require",
              "userRequest": "../../../render-core/src/engine/renderer/SmartBucketRenderer",
              "loc": "7:30-101"
            }
          ],
          "usedExports": true,
          "providedExports": null,
          "optimizationBailout": [],
          "depth": 2,
          "source": "\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst TraceJobManager_1 = require(\"./worker/TraceJobManager\");\r\nconst TraceJob_1 = require(\"./worker/TraceJob\");\r\nclass SmartBucketRenderer {\r\n    constructor() {\r\n        this.bucketSize = 64 / 2;\r\n        this.traceManager = new TraceJobManager_1.TraceJobManager();\r\n    }\r\n    get initialized() {\r\n        return this.traceManager.initialized;\r\n    }\r\n    get iterations() {\r\n        return this.traceManager.iterations;\r\n    }\r\n    updateCameraSamples(newValue) {\r\n        this.traceManager.queue.forEach(function (job) {\r\n            job.extra.cameraSamples = newValue;\r\n        });\r\n    }\r\n    updateHitSamples(newValue) {\r\n        this.traceManager.queue.forEach(function (job) {\r\n            job.extra.hitSamples = newValue;\r\n        });\r\n    }\r\n    updateCamera(newValue) {\r\n        this.traceManager.stop();\r\n        this.traceManager.clear();\r\n        this.traceManager.referenceQueue.forEach(function (job) {\r\n            job.extra.camera = newValue;\r\n        });\r\n        this.traceManager.restart();\r\n    }\r\n    render(scene, camera, width, height, cameraSamples, hitSamples, bounces, iterations = 1, blockIterations = 1, onUpdate, updateIndicator, onInit) {\r\n        if (!this.traceManager) {\r\n            this.traceManager = new TraceJobManager_1.TraceJobManager();\r\n        }\r\n        this.traceManager.maxLoop = iterations - 1;\r\n        this.traceManager.configure({\r\n            camera: camera,\r\n            width: width,\r\n            height: height,\r\n            cameraSamples: cameraSamples,\r\n            hitSamples: hitSamples,\r\n            bounces: bounces\r\n        }, scene);\r\n        var col = width / this.bucketSize;\r\n        var row = height / this.bucketSize;\r\n        for (var j = 0; j < row; j++) {\r\n            for (var i = 0; i < col; i++) {\r\n                this.traceManager.add(new TraceJob_1.TraceJob({\r\n                    id: j + \"_\" + i,\r\n                    blockIterations: blockIterations,\r\n                    width: this.bucketSize,\r\n                    height: this.bucketSize,\r\n                    xoffset: i * this.bucketSize,\r\n                    yoffset: j * this.bucketSize\r\n                }));\r\n            }\r\n        }\r\n        this.traceManager.updatePixels = onUpdate;\r\n        this.traceManager.updateIndicator = updateIndicator;\r\n        this.traceManager.init(onInit);\r\n        return this.traceManager.pixels;\r\n    }\r\n}\r\nSmartBucketRenderer.DEBUG = false;\r\nSmartBucketRenderer.interval = 0;\r\nexports.SmartBucketRenderer = SmartBucketRenderer;\r\n"
        },
        {
          "id": 35,
          "identifier": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-client\\src\\render\\GIRenderBase.ts",
          "name": "./packages/render-client/src/render/GIRenderBase.ts",
          "index": 50,
          "index2": 49,
          "size": 2790,
          "cacheable": true,
          "built": false,
          "optional": false,
          "prefetched": false,
          "chunks": [
            0
          ],
          "assets": [],
          "issuer": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-client\\index.ts",
          "issuerId": 36,
          "issuerName": "./packages/render-client/index.ts",
          "failed": false,
          "errors": 0,
          "warnings": 0,
          "reasons": [
            {
              "moduleId": 36,
              "moduleIdentifier": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-client\\index.ts",
              "module": "./packages/render-client/index.ts",
              "moduleName": "./packages/render-client/index.ts",
              "type": "cjs require",
              "userRequest": "./src/render/GIRenderBase",
              "loc": "10:9-45"
            },
            {
              "moduleId": 52,
              "moduleIdentifier": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-client\\src\\views\\GIJSView.ts",
              "module": "./packages/render-client/src/views/GIJSView.ts",
              "moduleName": "./packages/render-client/src/views/GIJSView.ts",
              "type": "cjs require",
              "userRequest": "../render/GIRenderBase",
              "loc": "3:23-56"
            }
          ],
          "usedExports": true,
          "providedExports": null,
          "optimizationBailout": [],
          "depth": 1,
          "source": "\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst CanvasDisplay_1 = require(\"../display/CanvasDisplay\");\r\nconst SmartBucketRenderer_1 = require(\"../../../render-core/src/engine/renderer/SmartBucketRenderer\");\r\nclass GIRenderBase extends CanvasDisplay_1.CanvasDisplay {\r\n    constructor(i_width, i_height, container) {\r\n        super(i_width, i_height, container);\r\n        this.renderer = new SmartBucketRenderer_1.SmartBucketRenderer();\r\n    }\r\n    updateCameraSamples(newValue) {\r\n        if (this.cameraSamples != newValue) {\r\n            this.cameraSamples = newValue;\r\n            this.renderer.updateCameraSamples(newValue);\r\n        }\r\n    }\r\n    updateHitSamples(newValue) {\r\n        if (this.hitSamples != newValue) {\r\n            this.hitSamples = newValue;\r\n            this.renderer.updateHitSamples(newValue);\r\n        }\r\n    }\r\n    updateCamera(newValue) {\r\n        this.camera.updateFromArray(newValue.eye, newValue.lookAt, newValue.up, newValue.fov, newValue.focus, newValue.aperture);\r\n        this.renderer.updateCamera(this.camera.toJSON());\r\n    }\r\n    updateCameraMatrix(matrix) {\r\n        this.camera.u.setFromArray(matrix, 0);\r\n        this.camera.v.setFromArray(matrix, 4);\r\n        this.camera.w.setFromArray(matrix, 8);\r\n        this.renderer.updateCamera(this.camera.toJSON());\r\n    }\r\n    toggleTrace(newValue) {\r\n        if (this.renderer.initialized) {\r\n            console.log(\"toggleTrace:\" + newValue);\r\n            if (newValue) {\r\n                var cam = this.camera.toJSON();\r\n                this.dirty = false;\r\n                this.renderer.updateCamera(cam);\r\n            }\r\n            else {\r\n                this.renderer.traceManager.stop();\r\n            }\r\n        }\r\n    }\r\n    render(onInit) {\r\n        console.info(\"+ Render settings\");\r\n        console.info(\"      Resolution          :   \" + this.i_width + \"x\" + this.i_height);\r\n        console.info(\"      CameraSamples       :   \" + this.cameraSamples);\r\n        console.info(\"      HitSamples          :   \" + this.hitSamples);\r\n        console.info(\"      Bounces             :   \" + this.bounces);\r\n        console.info(\"      Iterations          :   \" + this.iterations);\r\n        console.info(\"      Block-Iterations    :   \" + this.blockIterations);\r\n        var self = this;\r\n        this.pixels = this.renderer.render(this.scene, this.camera, this.i_width, this.i_height, this.cameraSamples, this.hitSamples, this.bounces, this.iterations, this.blockIterations, onUpdate, updateIndicator, onInit);\r\n        function onUpdate(rect) {\r\n            self.updatePixelsRect(rect, self.pixels);\r\n        }\r\n        function updateIndicator(rect) {\r\n            self.updateIndicator(rect);\r\n        }\r\n    }\r\n}\r\nexports.GIRenderBase = GIRenderBase;\r\n"
        },
        {
          "id": 36,
          "identifier": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-client\\index.ts",
          "name": "./packages/render-client/index.ts",
          "index": 0,
          "index2": 52,
          "size": 510,
          "cacheable": true,
          "built": false,
          "optional": false,
          "prefetched": false,
          "chunks": [
            0
          ],
          "assets": [],
          "issuer": null,
          "issuerId": null,
          "issuerName": null,
          "failed": false,
          "errors": 0,
          "warnings": 0,
          "reasons": [],
          "usedExports": true,
          "providedExports": null,
          "optimizationBailout": [],
          "depth": 0,
          "source": "\"use strict\";\r\nfunction __export(m) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n__export(require(\"./src/index\"));\r\n__export(require(\"./src/objects/ThreeObjects\"));\r\n__export(require(\"./src/display/CanvasDisplay\"));\r\n__export(require(\"./src/render/HeadlessRenderBase\"));\r\n__export(require(\"./src/render/GIRenderBase\"));\r\n__export(require(\"./src/views/ThreeJSView\"));\r\n__export(require(\"./src/views/GIJSView\"));\r\n"
        },
        {
          "id": 37,
          "identifier": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-client\\src\\index.ts",
          "name": "./packages/render-client/src/index.ts",
          "index": 1,
          "index2": 0,
          "size": 136,
          "cacheable": true,
          "built": false,
          "optional": false,
          "prefetched": false,
          "chunks": [
            0
          ],
          "assets": [],
          "issuer": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-client\\index.ts",
          "issuerId": 36,
          "issuerName": "./packages/render-client/index.ts",
          "failed": false,
          "errors": 0,
          "warnings": 0,
          "reasons": [
            {
              "moduleId": 36,
              "moduleIdentifier": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-client\\index.ts",
              "module": "./packages/render-client/index.ts",
              "moduleName": "./packages/render-client/index.ts",
              "type": "cjs require",
              "userRequest": "./src/index",
              "loc": "6:9-31"
            }
          ],
          "usedExports": true,
          "providedExports": null,
          "optimizationBailout": [],
          "depth": 1,
          "source": "\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nclass XRayClient {\r\n}\r\nexports.XRayClient = XRayClient;\r\n"
        },
        {
          "id": 38,
          "identifier": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-client\\src\\render\\HeadlessRenderBase.ts",
          "name": "./packages/render-client/src/render/HeadlessRenderBase.ts",
          "index": 5,
          "index2": 48,
          "size": 4106,
          "cacheable": true,
          "built": false,
          "optional": false,
          "prefetched": false,
          "chunks": [
            0
          ],
          "assets": [],
          "issuer": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-client\\index.ts",
          "issuerId": 36,
          "issuerName": "./packages/render-client/index.ts",
          "failed": false,
          "errors": 1,
          "warnings": 0,
          "reasons": [
            {
              "moduleId": 36,
              "moduleIdentifier": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-client\\index.ts",
              "module": "./packages/render-client/index.ts",
              "moduleName": "./packages/render-client/index.ts",
              "type": "cjs require",
              "userRequest": "./src/render/HeadlessRenderBase",
              "loc": "9:9-51"
            }
          ],
          "usedExports": true,
          "providedExports": null,
          "optimizationBailout": [],
          "depth": 1,
          "source": "\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst Color_1 = require(\"../../../render-core/src/engine/math/Color\");\r\nconst Camera_1 = require(\"../../../render-core/src/engine/scene/Camera\");\r\nconst SharedScene_1 = require(\"../../../render-core/src/engine/scene/SharedScene\");\r\nconst Vector3_1 = require(\"../../../render-core/src/engine/math/Vector3\");\r\nconst SmartBucketRenderer_1 = require(\"../../../render-core/src/engine/renderer/SmartBucketRenderer\");\r\nclass HeadlessRenderBase {\r\n    constructor(i_width, i_height, outmemory) {\r\n        this.i_width = i_width;\r\n        this.i_height = i_height;\r\n        this.outmemory = outmemory;\r\n        this.data = new Uint8Array(i_width * i_height * 4);\r\n        this.scene = new SharedScene_1.SharedScene(Color_1.Color.hexColor(0x262626));\r\n        this.camera = Camera_1.Camera.lookAt(new Vector3_1.Vector3(0, 0, 0), new Vector3_1.Vector3(0, 0, 0), new Vector3_1.Vector3(0, 1, 0), 45);\r\n        this.cameraSamples = -1;\r\n        this.hitSamples = 1;\r\n        this.bounces = 4;\r\n        this.iterations = 1000000;\r\n        this.blockIterations = 1;\r\n        this.renderer = new SmartBucketRenderer_1.SmartBucketRenderer();\r\n    }\r\n    updateCameraSamples(newValue) {\r\n        if (this.cameraSamples != newValue) {\r\n            this.cameraSamples = newValue;\r\n            this.renderer.updateCameraSamples(newValue);\r\n        }\r\n    }\r\n    updateHitSamples(newValue) {\r\n        if (this.hitSamples != newValue) {\r\n            this.hitSamples = newValue;\r\n            this.renderer.updateHitSamples(newValue);\r\n        }\r\n    }\r\n    updateCamera(newValue) {\r\n        this.camera.updateFromArray(newValue.eye, newValue.lookAt, newValue.up, newValue.fov, newValue.focus, newValue.aperture);\r\n        this.renderer.updateCamera(this.camera.toJSON());\r\n    }\r\n    updateCameraMatrix(matrix) {\r\n        this.camera.u.setFromArray(matrix, 0);\r\n        this.camera.v.setFromArray(matrix, 4);\r\n        this.camera.w.setFromArray(matrix, 8);\r\n        this.renderer.updateCamera(this.camera.toJSON());\r\n    }\r\n    toggleTrace(newValue) {\r\n        if (this.renderer.initialized) {\r\n            console.log(\"toggleTrace:\" + newValue);\r\n            if (newValue) {\r\n                var cam = this.camera.toJSON();\r\n                this.dirty = false;\r\n                this.renderer.updateCamera(cam);\r\n            }\r\n            else {\r\n                this.renderer.traceManager.stop();\r\n            }\r\n        }\r\n    }\r\n    render(onInit, onUpdate) {\r\n        console.info(\"+ Render settings\");\r\n        console.info(\"      Resolution          :   \" + this.i_width + \"x\" + this.i_height);\r\n        console.info(\"      CameraSamples       :   \" + this.cameraSamples);\r\n        console.info(\"      HitSamples          :   \" + this.hitSamples);\r\n        console.info(\"      Bounces             :   \" + this.bounces);\r\n        console.info(\"      Iterations          :   \" + this.iterations);\r\n        console.info(\"      Block-Iterations    :   \" + this.blockIterations);\r\n        var self = this;\r\n        this.pixels = this.renderer.render(this.scene, this.camera, this.i_width, this.i_height, this.cameraSamples, this.hitSamples, this.bounces, this.iterations, this.blockIterations, _onUpdate, onInit);\r\n        function _onUpdate(rect) {\r\n            if (onUpdate) {\r\n                onUpdate(rect, self.pixels);\r\n            }\r\n        }\r\n    }\r\n    setResolution(width, height) {\r\n        this.i_width = width;\r\n        this.i_height = height;\r\n        this.data = new Uint8Array(width * height * 4);\r\n    }\r\n    updatePixels(pixels) {\r\n        for (var y = 0; y < this.i_height; y++) {\r\n            for (var x = 0; x < this.i_width; x++) {\r\n                var i = y * (this.i_width * 4) + (x * 4);\r\n                var pi = y * (this.i_width * 3) + (x * 3);\r\n                this.data[i] = pixels[pi];\r\n                this.data[i + 1] = pixels[pi + 1];\r\n                this.data[i + 2] = pixels[pi + 2];\r\n                this.data[i + 3] = 255;\r\n            }\r\n        }\r\n    }\r\n}\r\nexports.HeadlessRenderBase = HeadlessRenderBase;\r\n"
        },
        {
          "id": 39,
          "identifier": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-core\\src\\pointer\\src\\MemoryUtils.ts",
          "name": "./packages/render-core/src/pointer/src/MemoryUtils.ts",
          "index": 9,
          "index2": 4,
          "size": 7353,
          "cacheable": true,
          "built": false,
          "optional": false,
          "prefetched": false,
          "chunks": [
            0
          ],
          "assets": [],
          "issuer": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-core\\src\\pointer\\src\\DirectMemory.ts",
          "issuerId": 13,
          "issuerName": "./packages/render-core/src/pointer/src/DirectMemory.ts",
          "failed": false,
          "errors": 0,
          "warnings": 0,
          "reasons": [
            {
              "moduleId": 13,
              "moduleIdentifier": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-core\\src\\pointer\\src\\DirectMemory.ts",
              "module": "./packages/render-core/src/pointer/src/DirectMemory.ts",
              "moduleName": "./packages/render-core/src/pointer/src/DirectMemory.ts",
              "type": "cjs require",
              "userRequest": "./MemoryUtils",
              "loc": "3:22-46"
            }
          ],
          "usedExports": true,
          "providedExports": null,
          "optimizationBailout": [],
          "depth": 4,
          "source": "\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nclass MemoryUtils {\r\n    static readUint16(memory, offset, littleEndian = false) {\r\n        var mem = MemoryUtils.ui16mem;\r\n        if (littleEndian) {\r\n            mem[0] = memory[offset++];\r\n            mem[1] = memory[offset];\r\n        }\r\n        else {\r\n            mem[1] = memory[offset++];\r\n            mem[0] = memory[offset];\r\n        }\r\n        return MemoryUtils.ui16[0];\r\n    }\r\n    static writeUint16(memory, offset, value, littleEndian = false) {\r\n        MemoryUtils.ui16[0] = value;\r\n        var mem = MemoryUtils.ui16mem;\r\n        if (littleEndian) {\r\n            memory[offset++] = mem[0];\r\n            memory[offset++] = mem[1];\r\n        }\r\n        else {\r\n            memory[offset++] = mem[1];\r\n            memory[offset++] = mem[0];\r\n        }\r\n        return offset;\r\n    }\r\n    static readInt16(memory, offset, littleEndian = false) {\r\n        var mem = MemoryUtils.i16mem;\r\n        if (littleEndian) {\r\n            mem[0] = memory[offset++];\r\n            mem[1] = memory[offset];\r\n        }\r\n        else {\r\n            mem[1] = memory[offset++];\r\n            mem[0] = memory[offset];\r\n        }\r\n        return MemoryUtils.i16[0];\r\n    }\r\n    static writeInt16(memory, offset, value, littleEndian = false) {\r\n        MemoryUtils.i16[0] = value;\r\n        var mem = MemoryUtils.i16mem;\r\n        if (littleEndian) {\r\n            memory[offset++] = mem[0];\r\n            memory[offset++] = mem[1];\r\n        }\r\n        else {\r\n            memory[offset++] = mem[1];\r\n            memory[offset++] = mem[0];\r\n        }\r\n        return offset;\r\n    }\r\n    static readInt32(memory, offset, littleEndian = false) {\r\n        var mem = MemoryUtils.i32mem;\r\n        if (littleEndian) {\r\n            mem[0] = memory[offset++];\r\n            mem[1] = memory[offset++];\r\n            mem[2] = memory[offset++];\r\n            mem[3] = memory[offset];\r\n        }\r\n        else {\r\n            mem[3] = memory[offset++];\r\n            mem[2] = memory[offset++];\r\n            mem[1] = memory[offset++];\r\n            mem[0] = memory[offset];\r\n        }\r\n        return MemoryUtils.i32[0];\r\n    }\r\n    static writeInt32(memory, offset, value, littleEndian = false) {\r\n        MemoryUtils.i32[0] = value;\r\n        var mem = MemoryUtils.i32mem;\r\n        if (littleEndian) {\r\n            memory[offset++] = mem[0];\r\n            memory[offset++] = mem[1];\r\n            memory[offset++] = mem[2];\r\n            memory[offset++] = mem[3];\r\n        }\r\n        else {\r\n            memory[offset++] = mem[3];\r\n            memory[offset++] = mem[2];\r\n            memory[offset++] = mem[1];\r\n            memory[offset++] = mem[0];\r\n        }\r\n        return offset;\r\n    }\r\n    static readUint32(memory, offset, littleEndian = false) {\r\n        var mem = MemoryUtils.ui32mem;\r\n        if (littleEndian) {\r\n            mem[0] = memory[offset++];\r\n            mem[1] = memory[offset++];\r\n            mem[2] = memory[offset++];\r\n            mem[3] = memory[offset];\r\n        }\r\n        else {\r\n            mem[3] = memory[offset++];\r\n            mem[2] = memory[offset++];\r\n            mem[1] = memory[offset++];\r\n            mem[0] = memory[offset];\r\n        }\r\n        return MemoryUtils.ui32[0];\r\n    }\r\n    static writeUint32(memory, offset, value, littleEndian = false) {\r\n        MemoryUtils.ui32[0] = value;\r\n        var mem = MemoryUtils.ui32mem;\r\n        if (littleEndian) {\r\n            memory[offset++] = mem[0];\r\n            memory[offset++] = mem[1];\r\n            memory[offset++] = mem[2];\r\n            memory[offset++] = mem[3];\r\n        }\r\n        else {\r\n            memory[offset++] = mem[3];\r\n            memory[offset++] = mem[2];\r\n            memory[offset++] = mem[1];\r\n            memory[offset++] = mem[0];\r\n        }\r\n        return offset;\r\n    }\r\n    static readFloat32(memory, offset, littleEndian = false) {\r\n        var mem = MemoryUtils.f32mem;\r\n        if (littleEndian) {\r\n            mem[0] = memory[offset++];\r\n            mem[1] = memory[offset++];\r\n            mem[2] = memory[offset++];\r\n            mem[3] = memory[offset];\r\n        }\r\n        else {\r\n            mem[3] = memory[offset++];\r\n            mem[2] = memory[offset++];\r\n            mem[1] = memory[offset++];\r\n            mem[0] = memory[offset];\r\n        }\r\n        return MemoryUtils.f32[0];\r\n    }\r\n    static writeFloat32(memory, offset, value, littleEndian = false) {\r\n        MemoryUtils.f32[0] = value;\r\n        var mem = MemoryUtils.f32mem;\r\n        if (littleEndian) {\r\n            memory[offset++] = mem[0];\r\n            memory[offset++] = mem[1];\r\n            memory[offset++] = mem[2];\r\n            memory[offset++] = mem[3];\r\n        }\r\n        else {\r\n            memory[offset++] = mem[3];\r\n            memory[offset++] = mem[2];\r\n            memory[offset++] = mem[1];\r\n            memory[offset++] = mem[0];\r\n        }\r\n        return offset;\r\n    }\r\n    static readFloat64(memory, offset, littleEndian = false) {\r\n        var mem = MemoryUtils.f64mem;\r\n        if (littleEndian) {\r\n            mem[0] = memory[offset++];\r\n            mem[1] = memory[offset++];\r\n            mem[2] = memory[offset++];\r\n            mem[3] = memory[offset++];\r\n            mem[4] = memory[offset++];\r\n            mem[5] = memory[offset++];\r\n            mem[6] = memory[offset++];\r\n            mem[7] = memory[offset];\r\n        }\r\n        else {\r\n            mem[7] = memory[offset++];\r\n            mem[6] = memory[offset++];\r\n            mem[5] = memory[offset++];\r\n            mem[4] = memory[offset++];\r\n            mem[3] = memory[offset++];\r\n            mem[2] = memory[offset++];\r\n            mem[1] = memory[offset++];\r\n            mem[0] = memory[offset];\r\n        }\r\n        return MemoryUtils.f64[0];\r\n    }\r\n    static writeFloat64(memory, offset, value, littleEndian = false) {\r\n        MemoryUtils.f64[0] = value;\r\n        var mem = MemoryUtils.f64mem;\r\n        if (littleEndian) {\r\n            memory[offset++] = mem[0];\r\n            memory[offset++] = mem[1];\r\n            memory[offset++] = mem[2];\r\n            memory[offset++] = mem[3];\r\n            memory[offset++] = mem[4];\r\n            memory[offset++] = mem[5];\r\n            memory[offset++] = mem[6];\r\n            memory[offset++] = mem[7];\r\n        }\r\n        else {\r\n            memory[offset++] = mem[7];\r\n            memory[offset++] = mem[6];\r\n            memory[offset++] = mem[5];\r\n            memory[offset++] = mem[4];\r\n            memory[offset++] = mem[3];\r\n            memory[offset++] = mem[2];\r\n            memory[offset++] = mem[1];\r\n            memory[offset++] = mem[0];\r\n        }\r\n        return offset;\r\n    }\r\n}\r\nMemoryUtils.i8 = new Int8Array(1);\r\nMemoryUtils.ui16 = new Uint16Array(1);\r\nMemoryUtils.ui32 = new Uint32Array(1);\r\nMemoryUtils.i32 = new Int32Array(1);\r\nMemoryUtils.i16 = new Int16Array(1);\r\nMemoryUtils.f32 = new Float32Array(1);\r\nMemoryUtils.f64 = new Float64Array(1);\r\nMemoryUtils.ui32mem = new Uint8Array(MemoryUtils.ui32.buffer);\r\nMemoryUtils.ui16mem = new Uint8Array(MemoryUtils.ui16.buffer);\r\nMemoryUtils.i32mem = new Uint8Array(MemoryUtils.i32.buffer);\r\nMemoryUtils.i16mem = new Uint8Array(MemoryUtils.i16.buffer);\r\nMemoryUtils.f32mem = new Uint8Array(MemoryUtils.f32.buffer);\r\nMemoryUtils.f64mem = new Uint8Array(MemoryUtils.f64.buffer);\r\nexports.MemoryUtils = MemoryUtils;\r\n"
        },
        {
          "id": 40,
          "identifier": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-core\\src\\pointer\\src\\UTF8.ts",
          "name": "./packages/render-core/src/pointer/src/UTF8.ts",
          "index": 10,
          "index2": 5,
          "size": 7398,
          "cacheable": true,
          "built": false,
          "optional": false,
          "prefetched": false,
          "chunks": [
            0
          ],
          "assets": [],
          "issuer": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-core\\src\\pointer\\src\\DirectMemory.ts",
          "issuerId": 13,
          "issuerName": "./packages/render-core/src/pointer/src/DirectMemory.ts",
          "failed": false,
          "errors": 0,
          "warnings": 0,
          "reasons": [
            {
              "moduleId": 13,
              "moduleIdentifier": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-core\\src\\pointer\\src\\DirectMemory.ts",
              "module": "./packages/render-core/src/pointer/src/DirectMemory.ts",
              "moduleName": "./packages/render-core/src/pointer/src/DirectMemory.ts",
              "type": "cjs require",
              "userRequest": "./UTF8",
              "loc": "4:15-32"
            }
          ],
          "usedExports": true,
          "providedExports": null,
          "optimizationBailout": [],
          "depth": 4,
          "source": "\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nclass UTF8 {\r\n    constructor() {\r\n        this.EOF_byte = -1;\r\n        this.EOF_code_point = -1;\r\n    }\r\n    static encode(str) {\r\n        if (str) {\r\n            if (!UTF8.instance) {\r\n                UTF8.instance = new UTF8();\r\n            }\r\n            return UTF8.instance.encode(str);\r\n        }\r\n        return null;\r\n    }\r\n    static decode(data) {\r\n        if (data) {\r\n            if (!UTF8.instance) {\r\n                UTF8.instance = new UTF8();\r\n            }\r\n            return UTF8.instance.decode(data);\r\n        }\r\n        return null;\r\n    }\r\n    encode(str) {\r\n        var pos = 0;\r\n        var codePoints = this.stringToCodePoints(str);\r\n        var outputBytes = [];\r\n        while (codePoints.length > pos) {\r\n            var code_point = codePoints[pos++];\r\n            if (this.inRange(code_point, 0xD800, 0xDFFF)) {\r\n                this.encoderError(code_point);\r\n            }\r\n            else if (this.inRange(code_point, 0x0000, 0x007f)) {\r\n                outputBytes.push(code_point);\r\n            }\r\n            else {\r\n                var count, offset;\r\n                if (this.inRange(code_point, 0x0080, 0x07FF)) {\r\n                    count = 1;\r\n                    offset = 0xC0;\r\n                }\r\n                else if (this.inRange(code_point, 0x0800, 0xFFFF)) {\r\n                    count = 2;\r\n                    offset = 0xE0;\r\n                }\r\n                else if (this.inRange(code_point, 0x10000, 0x10FFFF)) {\r\n                    count = 3;\r\n                    offset = 0xF0;\r\n                }\r\n                outputBytes.push(this.div(code_point, Math.pow(64, count)) + offset);\r\n                while (count > 0) {\r\n                    var temp = this.div(code_point, Math.pow(64, count - 1));\r\n                    outputBytes.push(0x80 + (temp % 64));\r\n                    count -= 1;\r\n                }\r\n            }\r\n        }\r\n        return new Uint8Array(outputBytes);\r\n    }\r\n    decode(data) {\r\n        var fatal = false;\r\n        var pos = 0;\r\n        var result = \"\";\r\n        var code_point;\r\n        var utf8_code_point = 0;\r\n        var utf8_bytes_needed = 0;\r\n        var utf8_bytes_seen = 0;\r\n        var utf8_lower_boundary = 0;\r\n        while (data.length > pos) {\r\n            var _byte = data[pos++];\r\n            if (_byte === this.EOF_byte) {\r\n                if (utf8_bytes_needed !== 0) {\r\n                    code_point = this.decoderError(fatal);\r\n                }\r\n                else {\r\n                    code_point = this.EOF_code_point;\r\n                }\r\n            }\r\n            else {\r\n                if (utf8_bytes_needed === 0) {\r\n                    if (this.inRange(_byte, 0x00, 0x7F)) {\r\n                        code_point = _byte;\r\n                    }\r\n                    else {\r\n                        if (this.inRange(_byte, 0xC2, 0xDF)) {\r\n                            utf8_bytes_needed = 1;\r\n                            utf8_lower_boundary = 0x80;\r\n                            utf8_code_point = _byte - 0xC0;\r\n                        }\r\n                        else if (this.inRange(_byte, 0xE0, 0xEF)) {\r\n                            utf8_bytes_needed = 2;\r\n                            utf8_lower_boundary = 0x800;\r\n                            utf8_code_point = _byte - 0xE0;\r\n                        }\r\n                        else if (this.inRange(_byte, 0xF0, 0xF4)) {\r\n                            utf8_bytes_needed = 3;\r\n                            utf8_lower_boundary = 0x10000;\r\n                            utf8_code_point = _byte - 0xF0;\r\n                        }\r\n                        else {\r\n                            this.decoderError(fatal);\r\n                        }\r\n                        utf8_code_point = utf8_code_point * Math.pow(64, utf8_bytes_needed);\r\n                        code_point = null;\r\n                    }\r\n                }\r\n                else if (!this.inRange(_byte, 0x80, 0xBF)) {\r\n                    utf8_code_point = 0;\r\n                    utf8_bytes_needed = 0;\r\n                    utf8_bytes_seen = 0;\r\n                    utf8_lower_boundary = 0;\r\n                    pos--;\r\n                    code_point = this.decoderError(fatal, _byte);\r\n                }\r\n                else {\r\n                    utf8_bytes_seen += 1;\r\n                    utf8_code_point = utf8_code_point + (_byte - 0x80) * Math.pow(64, utf8_bytes_needed - utf8_bytes_seen);\r\n                    if (utf8_bytes_seen !== utf8_bytes_needed) {\r\n                        code_point = null;\r\n                    }\r\n                    else {\r\n                        var cp = utf8_code_point;\r\n                        var lower_boundary = utf8_lower_boundary;\r\n                        utf8_code_point = 0;\r\n                        utf8_bytes_needed = 0;\r\n                        utf8_bytes_seen = 0;\r\n                        utf8_lower_boundary = 0;\r\n                        if (this.inRange(cp, lower_boundary, 0x10FFFF) && !this.inRange(cp, 0xD800, 0xDFFF)) {\r\n                            code_point = cp;\r\n                        }\r\n                        else {\r\n                            code_point = this.decoderError(fatal, _byte);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            if (code_point !== null && code_point !== this.EOF_code_point) {\r\n                if (code_point <= 0xFFFF) {\r\n                    if (code_point > 0)\r\n                        result += String.fromCharCode(code_point);\r\n                }\r\n                else {\r\n                    code_point -= 0x10000;\r\n                    result += String.fromCharCode(0xD800 + ((code_point >> 10) & 0x3ff));\r\n                    result += String.fromCharCode(0xDC00 + (code_point & 0x3ff));\r\n                }\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n    encoderError(code_point) {\r\n        throw 'EncodingError! The code point ' + code_point + ' could not be encoded.';\r\n    }\r\n    decoderError(fatal, opt_code_point) {\r\n        if (fatal) {\r\n            throw 'DecodingError';\r\n        }\r\n        return opt_code_point || 0xFFFD;\r\n    }\r\n    inRange(a, min, max) {\r\n        return min <= a && a <= max;\r\n    }\r\n    div(n, d) {\r\n        return Math.floor(n / d);\r\n    }\r\n    stringToCodePoints(string) {\r\n        var cps = [];\r\n        var i = 0, n = string.length;\r\n        while (i < string.length) {\r\n            var c = string.charCodeAt(i);\r\n            if (!this.inRange(c, 0xD800, 0xDFFF)) {\r\n                cps.push(c);\r\n            }\r\n            else if (this.inRange(c, 0xDC00, 0xDFFF)) {\r\n                cps.push(0xFFFD);\r\n            }\r\n            else {\r\n                if (i === n - 1) {\r\n                    cps.push(0xFFFD);\r\n                }\r\n                else {\r\n                    var d = string.charCodeAt(i + 1);\r\n                    if (this.inRange(d, 0xDC00, 0xDFFF)) {\r\n                        var a = c & 0x3FF;\r\n                        var b = d & 0x3FF;\r\n                        i += 1;\r\n                        cps.push(0x10000 + (a << 10) + b);\r\n                    }\r\n                    else {\r\n                        cps.push(0xFFFD);\r\n                    }\r\n                }\r\n            }\r\n            i += 1;\r\n        }\r\n        return cps;\r\n    }\r\n}\r\nexports.UTF8 = UTF8;\r\n"
        },
        {
          "id": 41,
          "identifier": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-core\\src\\engine\\scene\\Scene.ts",
          "name": "./packages/render-core/src/engine/scene/Scene.ts",
          "index": 14,
          "index2": 40,
          "size": 5495,
          "cacheable": true,
          "built": true,
          "optional": false,
          "prefetched": false,
          "chunks": [
            0
          ],
          "assets": [],
          "issuer": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-core\\src\\engine\\scene\\SharedScene.ts",
          "issuerId": 25,
          "issuerName": "./packages/render-core/src/engine/scene/SharedScene.ts",
          "failed": false,
          "errors": 10,
          "warnings": 0,
          "reasons": [
            {
              "moduleId": 25,
              "moduleIdentifier": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-core\\src\\engine\\scene\\SharedScene.ts",
              "module": "./packages/render-core/src/engine/scene/SharedScene.ts",
              "moduleName": "./packages/render-core/src/engine/scene/SharedScene.ts",
              "type": "cjs require",
              "userRequest": "./Scene",
              "loc": "4:16-34"
            }
          ],
          "usedExports": true,
          "providedExports": null,
          "optimizationBailout": [],
          "depth": 3,
          "source": "\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst Color_1 = require(\"../math/Color\");\r\nconst Tree_1 = require(\"./tree/Tree\");\r\nconst MapUtils_1 = require(\"../utils/MapUtils\");\r\nconst Vector3_1 = require(\"../math/Vector3\");\r\nconst Ray_1 = require(\"../math/Ray\");\r\nconst Shape_1 = require(\"./shapes/Shape\");\r\nconst Cube_1 = require(\"./shapes/Cube\");\r\nconst Sphere_1 = require(\"./shapes/Sphere\");\r\nconst Mesh_1 = require(\"./shapes/Mesh\");\r\nconst TransformedShape_1 = require(\"./shapes/TransformedShape\");\r\nconst Triangle_1 = require(\"./shapes/Triangle\");\r\nclass Scene {\r\n    constructor(color = new Color_1.Color(), shapes = [], lights = [], tree = null, rays = 0) {\r\n        this.color = color;\r\n        this.shapes = shapes;\r\n        this.lights = lights;\r\n        this.tree = tree;\r\n        this.rays = rays;\r\n        this.shared = false;\r\n    }\r\n    get estimatedMemory() {\r\n        var size = Color_1.Color.SIZE + 1;\r\n        this.shapes.forEach(function (shape) {\r\n            size += shape.memorySize;\r\n        });\r\n        return size;\r\n    }\r\n    static fromJson(scene) {\r\n        var _scene = new Scene(Color_1.Color.fromJson(scene.color));\r\n        scene.shapes.forEach(function (shape) {\r\n            switch (shape.type) {\r\n                case Shape_1.ShapeType.CUBE:\r\n                    _scene.add(Cube_1.Cube.fromJson(shape));\r\n                    break;\r\n                case Shape_1.ShapeType.SPHERE:\r\n                    _scene.add(Sphere_1.Sphere.fromJson(shape));\r\n                    break;\r\n                case Shape_1.ShapeType.MESH:\r\n                    _scene.add(Mesh_1.Mesh.fromJson(shape));\r\n                    break;\r\n                case Shape_1.ShapeType.TRANSFORMED_SHAPE:\r\n                    _scene.add(TransformedShape_1.TransformedShape.fromJson(shape));\r\n                    break;\r\n                case Shape_1.ShapeType.TRIANGLE:\r\n                    _scene.add(Triangle_1.Triangle.fromJson(shape));\r\n                    break;\r\n            }\r\n        });\r\n        return _scene;\r\n    }\r\n    compile() {\r\n        this.shapes.forEach(function (shape) {\r\n            shape.compile();\r\n        });\r\n        if (this.tree == null) {\r\n            this.tree = Tree_1.Tree.newTree(this.shapes);\r\n        }\r\n        return this;\r\n    }\r\n    add(shape) {\r\n        this.shapes = MapUtils_1.append(this.shapes, shape);\r\n        shape.index = this.shapes.length - 1;\r\n        var mat = shape.getMaterial(new Vector3_1.Vector3());\r\n        if (mat && mat.emittance > 0) {\r\n            this.lights = MapUtils_1.append(this.lights, shape);\r\n        }\r\n    }\r\n    rayCount() {\r\n        return this.rays;\r\n    }\r\n    intersect(r) {\r\n        this.rays++;\r\n        return this.tree.intersect(r);\r\n    }\r\n    shadow(r, light, max) {\r\n        var hit = this.intersect(r);\r\n        return hit.shape != light && hit.T < max;\r\n    }\r\n    directLight(n) {\r\n        if (this.lights.length == 0) {\r\n            return new Color_1.Color();\r\n        }\r\n        var color = new Color_1.Color();\r\n        var self = this;\r\n        var i = 0;\r\n        var light;\r\n        for (; i < this.lights.length; i++) {\r\n            light = this.lights[i];\r\n            var p = light.getRandomPoint();\r\n            var d = p.sub(n.origin);\r\n            var lr = new Ray_1.Ray(n.origin, d.normalize());\r\n            var diffuse = lr.direction.dot(n.direction);\r\n            if (diffuse <= 0) {\r\n                continue;\r\n            }\r\n            var distance = d.length();\r\n            if (self.shadow(lr, light, distance)) {\r\n                continue;\r\n            }\r\n            var material = light.getMaterial(p);\r\n            var emittance = material.emittance;\r\n            var attenuation = material.attenuation.compute(distance);\r\n            color = color.add(light.getColor(p).mulScalar(diffuse * emittance * attenuation));\r\n        }\r\n        return color.divScalar(this.lights.length);\r\n    }\r\n    sample(r, emission, samples, depth) {\r\n        if (depth < 0) {\r\n            return new Color_1.Color(0, 0, 0);\r\n        }\r\n        var hit = this.intersect(r);\r\n        if (!hit.ok()) {\r\n            return this.color;\r\n        }\r\n        var info = hit.getInfo(r);\r\n        var result = new Color_1.Color();\r\n        if (emission) {\r\n            var emittance = info.material.emittance;\r\n            if (emittance > 0) {\r\n                var attenuation = info.material.attenuation.compute(hit.T);\r\n                result = result.add(info.color.mulScalar(emittance * attenuation * samples));\r\n            }\r\n        }\r\n        var n = Math.round(Math.sqrt(samples));\r\n        for (var u = 0; u < n; u++) {\r\n            for (var v = 0; v < n; v++) {\r\n                var p = Math.random();\r\n                var fu = (u + Math.random()) / n;\r\n                var fv = (v + Math.random()) / n;\r\n                var bounce = r.bounce(info, p, fu, fv);\r\n                var indirect = this.sample(bounce.ray, bounce.reflected, 1, depth - 1);\r\n                if (bounce.reflected) {\r\n                    var tinted = indirect.mix(info.color.mul(indirect), info.material.tint);\r\n                    result = result.add(tinted);\r\n                }\r\n                else {\r\n                    var direct = this.directLight(info.ray);\r\n                    result = result.add(info.color.mul(direct.add(indirect)));\r\n                }\r\n            }\r\n        }\r\n        return result.divScalar(n * n);\r\n    }\r\n}\r\nScene.interval = 0;\r\nexports.Scene = Scene;\r\n"
        },
        {
          "id": 42,
          "identifier": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-core\\src\\engine\\scene\\tree\\Node.ts",
          "name": "./packages/render-core/src/engine/scene/tree/Node.ts",
          "index": 18,
          "index2": 17,
          "size": 5799,
          "cacheable": true,
          "built": false,
          "optional": false,
          "prefetched": false,
          "chunks": [
            0
          ],
          "assets": [],
          "issuer": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-core\\src\\engine\\scene\\tree\\Tree.ts",
          "issuerId": 26,
          "issuerName": "./packages/render-core/src/engine/scene/tree/Tree.ts",
          "failed": false,
          "errors": 0,
          "warnings": 0,
          "reasons": [
            {
              "moduleId": 26,
              "moduleIdentifier": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-core\\src\\engine\\scene\\tree\\Tree.ts",
              "module": "./packages/render-core/src/engine/scene/tree/Tree.ts",
              "moduleName": "./packages/render-core/src/engine/scene/tree/Tree.ts",
              "type": "cjs require",
              "userRequest": "./Node",
              "loc": "4:15-32"
            }
          ],
          "usedExports": true,
          "providedExports": null,
          "optimizationBailout": [],
          "depth": 4,
          "source": "\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst Axis_1 = require(\"../Axis\");\r\nconst Hit_1 = require(\"../../math/Hit\");\r\nconst MapUtils_1 = require(\"../../utils/MapUtils\");\r\nconst MapUtils_2 = require(\"../../utils/MapUtils\");\r\nconst MathUtils_1 = require(\"../../utils/MathUtils\");\r\nclass Node {\r\n    constructor(axis, point, shapes, left, right) {\r\n        this.axis = axis;\r\n        this.point = point;\r\n        this.shapes = shapes;\r\n        this.left = left;\r\n        this.right = right;\r\n        this.index = Node.map.push(this) - 1;\r\n    }\r\n    static newNode(shapes) {\r\n        return new Node(Axis_1.Axis.AxisNone, 0, shapes, null, null);\r\n    }\r\n    intersect(r, tmin, tmax) {\r\n        var node = this;\r\n        var tsplit;\r\n        var leftFirst;\r\n        switch (node.axis) {\r\n            case Axis_1.Axis.AxisNone:\r\n                return node.intersectShapes(r);\r\n            case Axis_1.Axis.AxisX:\r\n                tsplit = (node.point - r.origin.x) / r.direction.x;\r\n                leftFirst = (r.origin.x < node.point) || (r.origin.x == node.point && r.direction.x <= 0);\r\n                break;\r\n            case Axis_1.Axis.AxisY:\r\n                tsplit = (node.point - r.origin.y) / r.direction.y;\r\n                leftFirst = (r.origin.y < node.point) || (r.origin.y == node.point && r.direction.y <= 0);\r\n                break;\r\n            case Axis_1.Axis.AxisZ:\r\n                tsplit = (node.point - r.origin.z) / r.direction.z;\r\n                leftFirst = (r.origin.z < node.point) || (r.origin.z == node.point && r.direction.z <= 0);\r\n                break;\r\n        }\r\n        var first;\r\n        var second;\r\n        if (leftFirst) {\r\n            first = node.left;\r\n            second = node.right;\r\n        }\r\n        else {\r\n            first = node.right;\r\n            second = node.left;\r\n        }\r\n        if (tsplit > tmax || tsplit <= 0) {\r\n            return first.intersect(r, tmin, tmax);\r\n        }\r\n        else if (tsplit < tmin) {\r\n            return second.intersect(r, tmin, tmax);\r\n        }\r\n        else {\r\n            var h1 = first.intersect(r, tmin, tsplit);\r\n            if (h1.T <= tsplit) {\r\n                return h1;\r\n            }\r\n            var h2 = second.intersect(r, tsplit, Math.min(tmax, h1.T));\r\n            if (h1.T <= h2.T) {\r\n                return h1;\r\n            }\r\n            else {\r\n                return h2;\r\n            }\r\n        }\r\n    }\r\n    intersectShapes(r) {\r\n        var node = this;\r\n        var hit = Hit_1.NoHit;\r\n        node.shapes.forEach(function (shape) {\r\n            var h = shape.intersect(r);\r\n            if (h.T < hit.T) {\r\n                hit = h;\r\n            }\r\n        });\r\n        return hit;\r\n    }\r\n    partitionScore(axis, point) {\r\n        var node = this;\r\n        var left = 0;\r\n        var right = 0;\r\n        node.shapes.forEach(function (shape) {\r\n            var box = shape.box;\r\n            var p = box.partition(axis, point);\r\n            if (p.left) {\r\n                left++;\r\n            }\r\n            if (p.right) {\r\n                right++;\r\n            }\r\n        });\r\n        if (left >= right) {\r\n            return left;\r\n        }\r\n        else {\r\n            return right;\r\n        }\r\n    }\r\n    partition(size, axis, point) {\r\n        var node = this;\r\n        var left = [];\r\n        var right = [];\r\n        node.shapes.forEach(function (shape) {\r\n            var box = shape.box;\r\n            var p = box.partition(axis, point);\r\n            if (p.left) {\r\n                left = MapUtils_1.append(left, shape);\r\n            }\r\n            if (p.right) {\r\n                right = MapUtils_1.append(right, shape);\r\n            }\r\n        });\r\n        return { left: left, right: right };\r\n    }\r\n    split(depth) {\r\n        var node = this;\r\n        if (node.shapes.length < 8) {\r\n            return;\r\n        }\r\n        var xs = [];\r\n        var ys = [];\r\n        var zs = [];\r\n        node.shapes.forEach(function (shape) {\r\n            var box = shape.box;\r\n            xs = MapUtils_1.append(xs, box.min.x);\r\n            xs = MapUtils_1.append(xs, box.max.x);\r\n            ys = MapUtils_1.append(ys, box.min.y);\r\n            ys = MapUtils_1.append(ys, box.max.y);\r\n            zs = MapUtils_1.append(zs, box.min.z);\r\n            zs = MapUtils_1.append(zs, box.max.z);\r\n        });\r\n        MapUtils_2.sortAscending(xs);\r\n        MapUtils_2.sortAscending(ys);\r\n        MapUtils_2.sortAscending(zs);\r\n        var mx = MathUtils_1.MathUtils.median(xs);\r\n        var my = MathUtils_1.MathUtils.median(ys);\r\n        var mz = MathUtils_1.MathUtils.median(zs);\r\n        var best = Math.round(node.shapes.length * 0.85);\r\n        var bestAxis = Axis_1.Axis.AxisNone;\r\n        var bestPoint = 0.0;\r\n        var sx = node.partitionScore(Axis_1.Axis.AxisX, mx);\r\n        if (sx < best) {\r\n            best = sx;\r\n            bestAxis = Axis_1.Axis.AxisX;\r\n            bestPoint = mx;\r\n        }\r\n        var sy = node.partitionScore(Axis_1.Axis.AxisY, my);\r\n        if (sy < best) {\r\n            best = sy;\r\n            bestAxis = Axis_1.Axis.AxisY;\r\n            bestPoint = my;\r\n        }\r\n        var sz = node.partitionScore(Axis_1.Axis.AxisZ, mz);\r\n        if (sz < best) {\r\n            best = sz;\r\n            bestAxis = Axis_1.Axis.AxisZ;\r\n            bestPoint = mz;\r\n        }\r\n        if (bestAxis == Axis_1.Axis.AxisNone) {\r\n            return;\r\n        }\r\n        var p = node.partition(best, bestAxis, bestPoint);\r\n        node.axis = bestAxis;\r\n        node.point = bestPoint;\r\n        node.left = Node.newNode(p.left);\r\n        node.right = Node.newNode(p.right);\r\n        node.left.split(depth + 1);\r\n        node.right.split(depth + 1);\r\n        node.shapes = null;\r\n    }\r\n}\r\nNode.map = [];\r\nexports.Node = Node;\r\n"
        },
        {
          "id": 43,
          "identifier": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-core\\src\\engine\\data\\ImageLoader.ts",
          "name": "./packages/render-core/src/engine/data/ImageLoader.ts",
          "index": 27,
          "index2": 20,
          "size": 1225,
          "cacheable": true,
          "built": false,
          "optional": false,
          "prefetched": false,
          "chunks": [
            0
          ],
          "assets": [],
          "issuer": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-core\\src\\engine\\scene\\materials\\Texture.ts",
          "issuerId": 10,
          "issuerName": "./packages/render-core/src/engine/scene/materials/Texture.ts",
          "failed": false,
          "errors": 0,
          "warnings": 0,
          "reasons": [
            {
              "moduleId": 10,
              "moduleIdentifier": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-core\\src\\engine\\scene\\materials\\Texture.ts",
              "module": "./packages/render-core/src/engine/scene/materials/Texture.ts",
              "moduleName": "./packages/render-core/src/engine/scene/materials/Texture.ts",
              "type": "cjs require",
              "userRequest": "../../data/ImageLoader",
              "loc": "5:22-55"
            }
          ],
          "usedExports": true,
          "providedExports": null,
          "optimizationBailout": [],
          "depth": 3,
          "source": "\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst DataCache_1 = require(\"./DataCache\");\r\nclass ImageLoader {\r\n    constructor() {\r\n    }\r\n    load(url, onLoad, onProgress, onError) {\r\n        var self = this;\r\n        var cached = DataCache_1.DataCache.getItem(url);\r\n        if (cached !== undefined) {\r\n            onLoad(cached);\r\n            return;\r\n        }\r\n        var image = document.createElement('img');\r\n        image.addEventListener('load', function (event) {\r\n            DataCache_1.DataCache.add(url, this);\r\n            if (onLoad)\r\n                onLoad(this);\r\n        }, false);\r\n        if (onProgress !== undefined) {\r\n            image.addEventListener('progress', function (event) {\r\n                onProgress(event);\r\n            }, false);\r\n        }\r\n        if (onError !== undefined) {\r\n            image.addEventListener('error', function (event) {\r\n                onError(event);\r\n            }, false);\r\n        }\r\n        if (ImageLoader.crossOrigin !== undefined)\r\n            image.crossOrigin = ImageLoader.crossOrigin;\r\n        image.src = url;\r\n        return image;\r\n    }\r\n}\r\nImageLoader.crossOrigin = \"*\";\r\nexports.ImageLoader = ImageLoader;\r\n"
        },
        {
          "id": 44,
          "identifier": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-core\\src\\engine\\data\\DataCache.ts",
          "name": "./packages/render-core/src/engine/data/DataCache.ts",
          "index": 28,
          "index2": 19,
          "size": 338,
          "cacheable": true,
          "built": false,
          "optional": false,
          "prefetched": false,
          "chunks": [
            0
          ],
          "assets": [],
          "issuer": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-core\\src\\engine\\data\\ImageLoader.ts",
          "issuerId": 43,
          "issuerName": "./packages/render-core/src/engine/data/ImageLoader.ts",
          "failed": false,
          "errors": 0,
          "warnings": 0,
          "reasons": [
            {
              "moduleId": 43,
              "moduleIdentifier": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-core\\src\\engine\\data\\ImageLoader.ts",
              "module": "./packages/render-core/src/engine/data/ImageLoader.ts",
              "moduleName": "./packages/render-core/src/engine/data/ImageLoader.ts",
              "type": "cjs require",
              "userRequest": "./DataCache",
              "loc": "3:20-42"
            }
          ],
          "usedExports": true,
          "providedExports": null,
          "optimizationBailout": [],
          "depth": 4,
          "source": "\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nclass DataCache {\r\n    static getItem(url) {\r\n        return DataCache.cache.get(url);\r\n    }\r\n    static add(url, item) {\r\n        DataCache.cache.set(url, item);\r\n        return item;\r\n    }\r\n}\r\nDataCache.cache = new Map();\r\nexports.DataCache = DataCache;\r\n"
        },
        {
          "id": 45,
          "identifier": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-core\\src\\engine\\scene\\materials\\DiffuseMaterial.ts",
          "name": "./packages/render-core/src/engine/scene/materials/DiffuseMaterial.ts",
          "index": 31,
          "index2": 24,
          "size": 493,
          "cacheable": true,
          "built": false,
          "optional": false,
          "prefetched": false,
          "chunks": [
            0
          ],
          "assets": [],
          "issuer": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-core\\src\\engine\\scene\\materials\\MaterialUtils.ts",
          "issuerId": 17,
          "issuerName": "./packages/render-core/src/engine/scene/materials/MaterialUtils.ts",
          "failed": false,
          "errors": 0,
          "warnings": 0,
          "reasons": [
            {
              "moduleId": 17,
              "moduleIdentifier": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-core\\src\\engine\\scene\\materials\\MaterialUtils.ts",
              "module": "./packages/render-core/src/engine/scene/materials/MaterialUtils.ts",
              "moduleName": "./packages/render-core/src/engine/scene/materials/MaterialUtils.ts",
              "type": "cjs require",
              "userRequest": "./DiffuseMaterial",
              "loc": "8:26-54"
            }
          ],
          "usedExports": true,
          "providedExports": null,
          "optimizationBailout": [],
          "depth": 4,
          "source": "\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst Material_1 = require(\"./Material\");\r\nconst Attenuation_1 = require(\"./Attenuation\");\r\nconst Material_2 = require(\"./Material\");\r\nclass DiffuseMaterial extends Material_1.Material {\r\n    constructor(color) {\r\n        super(color, null, null, null, 1, 0, Attenuation_1.NoAttenuation, 1, 0, 0, false);\r\n        this.type = Material_2.MaterialType.DIFFUSE;\r\n    }\r\n}\r\nexports.DiffuseMaterial = DiffuseMaterial;\r\n"
        },
        {
          "id": 46,
          "identifier": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-core\\src\\engine\\scene\\materials\\SpecularMaterial.ts",
          "name": "./packages/render-core/src/engine/scene/materials/SpecularMaterial.ts",
          "index": 32,
          "index2": 25,
          "size": 508,
          "cacheable": true,
          "built": false,
          "optional": false,
          "prefetched": false,
          "chunks": [
            0
          ],
          "assets": [],
          "issuer": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-core\\src\\engine\\scene\\materials\\MaterialUtils.ts",
          "issuerId": 17,
          "issuerName": "./packages/render-core/src/engine/scene/materials/MaterialUtils.ts",
          "failed": false,
          "errors": 0,
          "warnings": 0,
          "reasons": [
            {
              "moduleId": 17,
              "moduleIdentifier": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-core\\src\\engine\\scene\\materials\\MaterialUtils.ts",
              "module": "./packages/render-core/src/engine/scene/materials/MaterialUtils.ts",
              "moduleName": "./packages/render-core/src/engine/scene/materials/MaterialUtils.ts",
              "type": "cjs require",
              "userRequest": "./SpecularMaterial",
              "loc": "9:27-56"
            }
          ],
          "usedExports": true,
          "providedExports": null,
          "optimizationBailout": [],
          "depth": 4,
          "source": "\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst Material_1 = require(\"./Material\");\r\nconst Attenuation_1 = require(\"./Attenuation\");\r\nconst Material_2 = require(\"./Material\");\r\nclass SpecularMaterial extends Material_1.Material {\r\n    constructor(color, index) {\r\n        super(color, null, null, null, 1, 0, Attenuation_1.NoAttenuation, index, 0, 0, false);\r\n        this.type = Material_2.MaterialType.SPECULAR;\r\n    }\r\n}\r\nexports.SpecularMaterial = SpecularMaterial;\r\n"
        },
        {
          "id": 47,
          "identifier": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-core\\src\\engine\\scene\\materials\\ClearMaterial.ts",
          "name": "./packages/render-core/src/engine/scene/materials/ClearMaterial.ts",
          "index": 33,
          "index2": 26,
          "size": 559,
          "cacheable": true,
          "built": false,
          "optional": false,
          "prefetched": false,
          "chunks": [
            0
          ],
          "assets": [],
          "issuer": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-core\\src\\engine\\scene\\materials\\MaterialUtils.ts",
          "issuerId": 17,
          "issuerName": "./packages/render-core/src/engine/scene/materials/MaterialUtils.ts",
          "failed": false,
          "errors": 0,
          "warnings": 0,
          "reasons": [
            {
              "moduleId": 17,
              "moduleIdentifier": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-core\\src\\engine\\scene\\materials\\MaterialUtils.ts",
              "module": "./packages/render-core/src/engine/scene/materials/MaterialUtils.ts",
              "moduleName": "./packages/render-core/src/engine/scene/materials/MaterialUtils.ts",
              "type": "cjs require",
              "userRequest": "./ClearMaterial",
              "loc": "10:24-50"
            }
          ],
          "usedExports": true,
          "providedExports": null,
          "optimizationBailout": [],
          "depth": 4,
          "source": "\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst Material_1 = require(\"./Material\");\r\nconst Color_1 = require(\"../../math/Color\");\r\nconst Attenuation_1 = require(\"./Attenuation\");\r\nconst Material_2 = require(\"./Material\");\r\nclass ClearMaterial extends Material_1.Material {\r\n    constructor(index, gloss) {\r\n        super(new Color_1.Color(), null, null, null, 1, 0, Attenuation_1.NoAttenuation, index, gloss, 0, true);\r\n        this.type = Material_2.MaterialType.CLEAR;\r\n    }\r\n}\r\nexports.ClearMaterial = ClearMaterial;\r\n"
        },
        {
          "id": 48,
          "identifier": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-core\\src\\engine\\scene\\materials\\GlossyMaterial.ts",
          "name": "./packages/render-core/src/engine/scene/materials/GlossyMaterial.ts",
          "index": 34,
          "index2": 27,
          "size": 511,
          "cacheable": true,
          "built": false,
          "optional": false,
          "prefetched": false,
          "chunks": [
            0
          ],
          "assets": [],
          "issuer": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-core\\src\\engine\\scene\\materials\\MaterialUtils.ts",
          "issuerId": 17,
          "issuerName": "./packages/render-core/src/engine/scene/materials/MaterialUtils.ts",
          "failed": false,
          "errors": 0,
          "warnings": 0,
          "reasons": [
            {
              "moduleId": 17,
              "moduleIdentifier": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-core\\src\\engine\\scene\\materials\\MaterialUtils.ts",
              "module": "./packages/render-core/src/engine/scene/materials/MaterialUtils.ts",
              "moduleName": "./packages/render-core/src/engine/scene/materials/MaterialUtils.ts",
              "type": "cjs require",
              "userRequest": "./GlossyMaterial",
              "loc": "11:25-52"
            }
          ],
          "usedExports": true,
          "providedExports": null,
          "optimizationBailout": [],
          "depth": 4,
          "source": "\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst Material_1 = require(\"./Material\");\r\nconst Attenuation_1 = require(\"./Attenuation\");\r\nconst Material_2 = require(\"./Material\");\r\nclass GlossyMaterial extends Material_1.Material {\r\n    constructor(color, index, gloss) {\r\n        super(color, null, null, null, 1, 0, Attenuation_1.NoAttenuation, index, gloss, 0, false);\r\n        this.type = Material_2.MaterialType.GLOSSY;\r\n    }\r\n}\r\nexports.GlossyMaterial = GlossyMaterial;\r\n"
        },
        {
          "id": 49,
          "identifier": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-core\\src\\pointer\\src\\Pointer.ts",
          "name": "./packages/render-core/src/pointer/src/Pointer.ts",
          "index": 44,
          "index2": 41,
          "size": 1034,
          "cacheable": true,
          "built": false,
          "optional": false,
          "prefetched": false,
          "chunks": [
            0
          ],
          "assets": [],
          "issuer": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-core\\src\\engine\\scene\\SharedScene.ts",
          "issuerId": 25,
          "issuerName": "./packages/render-core/src/engine/scene/SharedScene.ts",
          "failed": false,
          "errors": 1,
          "warnings": 0,
          "reasons": [
            {
              "moduleId": 25,
              "moduleIdentifier": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-core\\src\\engine\\scene\\SharedScene.ts",
              "module": "./packages/render-core/src/engine/scene/SharedScene.ts",
              "moduleName": "./packages/render-core/src/engine/scene/SharedScene.ts",
              "type": "cjs require",
              "userRequest": "../../pointer/src/Pointer",
              "loc": "8:18-54"
            }
          ],
          "usedExports": true,
          "providedExports": null,
          "optimizationBailout": [],
          "depth": 3,
          "source": "\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst DirectMemory_1 = require(\"./DirectMemory\");\r\nclass Pointer {\r\n    constructor(reference) {\r\n        this.reference = reference;\r\n        if (!Pointer.heap) {\r\n            Pointer.init();\r\n        }\r\n        this.beginLocation = Pointer.offset;\r\n        this.currentLocation = Pointer.offset;\r\n        Pointer.offset = reference.write(Pointer.memory);\r\n    }\r\n    static init() {\r\n        if (Pointer.initialized) {\r\n            return;\r\n        }\r\n        var maxMemory = 64 * 1024 * 1024;\r\n        Pointer.heap = new Uint8Array(new SharedArrayBuffer(maxMemory));\r\n        Pointer.memory = new DirectMemory_1.DirectMemory(Pointer.heap.buffer);\r\n        Pointer.initialized = true;\r\n        return Pointer.memory;\r\n    }\r\n    read() {\r\n        Pointer.offset = this.reference.read(Pointer.memory);\r\n        return this.reference;\r\n    }\r\n}\r\nexports.Pointer = Pointer;\r\nfunction sizeof(ptr) {\r\n    return ptr.memorySize;\r\n}\r\nexports.sizeof = sizeof;\r\n"
        },
        {
          "id": 50,
          "identifier": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-core\\src\\engine\\renderer\\worker\\Thread.ts",
          "name": "./packages/render-core/src/engine/renderer/worker/Thread.ts",
          "index": 46,
          "index2": 44,
          "size": 2476,
          "cacheable": true,
          "built": false,
          "optional": false,
          "prefetched": false,
          "chunks": [
            0
          ],
          "assets": [],
          "issuer": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-core\\src\\engine\\renderer\\worker\\ThreadPool.ts",
          "issuerId": 31,
          "issuerName": "./packages/render-core/src/engine/renderer/worker/ThreadPool.ts",
          "failed": false,
          "errors": 0,
          "warnings": 0,
          "reasons": [
            {
              "moduleId": 31,
              "moduleIdentifier": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-core\\src\\engine\\renderer\\worker\\ThreadPool.ts",
              "module": "./packages/render-core/src/engine/renderer/worker/ThreadPool.ts",
              "moduleName": "./packages/render-core/src/engine/renderer/worker/ThreadPool.ts",
              "type": "cjs require",
              "userRequest": "./Thread",
              "loc": "3:17-36"
            }
          ],
          "usedExports": true,
          "providedExports": null,
          "optimizationBailout": [],
          "depth": 4,
          "source": "\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst TraceJob_1 = require(\"./TraceJob\");\r\nconst TraceJobManager_1 = require(\"./TraceJobManager\");\r\nclass Thread {\r\n    constructor(name, id) {\r\n        this.id = id;\r\n        console.log(\"Checkpoint #4.1\");\r\n        try {\r\n            this.instance = new Worker(Thread.workerUrl);\r\n        }\r\n        catch (e) {\r\n            console.log(e);\r\n        }\r\n        this.instance.onmessage = this.onMessageReceived.bind(this);\r\n    }\r\n    get isTracing() {\r\n        return this._isTracing;\r\n    }\r\n    onMessageReceived(event) {\r\n        if (event.data == TraceJob_1.TraceJob.INITED) {\r\n            this.initialized = true;\r\n            this._isTracing = false;\r\n            if (this.onInitComplete) {\r\n                this.onInitComplete(this);\r\n            }\r\n        }\r\n        if (event.data == TraceJob_1.TraceJob.TRACED) {\r\n            this._isTracing = false;\r\n            TraceJobManager_1.TraceJobManager.flags[3 + this.id] = 0;\r\n            if (this.onTraceComplete) {\r\n                this.onTraceComplete(this);\r\n            }\r\n        }\r\n        if (event.data == TraceJob_1.TraceJob.LOCKED) {\r\n            this._isTracing = false;\r\n            TraceJobManager_1.TraceJobManager.flags[3 + this.id] = 3;\r\n            if (this.onThreadLocked) {\r\n                this.onThreadLocked(this);\r\n            }\r\n        }\r\n    }\r\n    init(param, transferable, onInit) {\r\n        console.log(\"Initializing thread \" + this.id);\r\n        this.onInitComplete = onInit;\r\n        param.command = TraceJob_1.TraceJob.INIT;\r\n        param.id = this.id;\r\n        this.send(param, transferable);\r\n    }\r\n    trace(param, onComplete) {\r\n        if (TraceJobManager_1.TraceJobManager.flags[3 + this.id] == 2) {\r\n            this._isTracing = false;\r\n            TraceJobManager_1.TraceJobManager.flags[3 + this.id] = 3;\r\n            if (this.onThreadLocked) {\r\n                this.onThreadLocked(this);\r\n            }\r\n        }\r\n        else {\r\n            this._isTracing = true;\r\n            TraceJobManager_1.TraceJobManager.flags[3 + this.id] = 1;\r\n            this.onTraceComplete = onComplete;\r\n            param.command = TraceJob_1.TraceJob.TRACE;\r\n            this.send(param);\r\n        }\r\n    }\r\n    send(data, buffers) {\r\n        this.instance.postMessage(data, buffers);\r\n    }\r\n    terminate() {\r\n    }\r\n}\r\nThread.workerUrl = \"../workers/trace-worker-bootstrap.js\";\r\nexports.Thread = Thread;\r\n"
        },
        {
          "id": 51,
          "identifier": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-client\\src\\views\\ThreeJSView.ts",
          "name": "./packages/render-client/src/views/ThreeJSView.ts",
          "index": 51,
          "index2": 50,
          "size": 1558,
          "cacheable": true,
          "built": false,
          "optional": false,
          "prefetched": false,
          "chunks": [
            0
          ],
          "assets": [],
          "issuer": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-client\\index.ts",
          "issuerId": 36,
          "issuerName": "./packages/render-client/index.ts",
          "failed": false,
          "errors": 7,
          "warnings": 0,
          "reasons": [
            {
              "moduleId": 36,
              "moduleIdentifier": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-client\\index.ts",
              "module": "./packages/render-client/index.ts",
              "moduleName": "./packages/render-client/index.ts",
              "type": "cjs require",
              "userRequest": "./src/views/ThreeJSView",
              "loc": "11:9-43"
            }
          ],
          "usedExports": true,
          "providedExports": null,
          "optimizationBailout": [],
          "depth": 1,
          "source": "\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nclass ThreeJSView {\r\n    constructor(width, height, container, appContainer) {\r\n        this.width = width;\r\n        this.height = height;\r\n        this.container = container;\r\n        this.appContainer = appContainer;\r\n        this.camera = new THREE.PerspectiveCamera(45, this.width / this.height, 1, 20000);\r\n        this.camera.up = new THREE.Vector3(0, 1, 0);\r\n        this.camera.position.y = 10;\r\n        this.camera.position.z = 10;\r\n        this.camera.lookAt(new THREE.Vector3(0, 0, 0));\r\n        this.scene = new THREE.Scene();\r\n        this.scene.position.x = 0;\r\n        this.scene.position.y = 0;\r\n        this.renderer = new THREE.WebGLRenderer();\r\n        this.renderer.setPixelRatio(window.devicePixelRatio);\r\n        this.renderer.setSize(this.width, this.height);\r\n        this.renderer.shadowMap.enabled = true;\r\n        this.renderer.shadowMap.type = THREE.BasicShadowMap;\r\n        this.container.appendChild(this.renderer.domElement);\r\n        this.controls = new THREE[\"EditorControls\"](this.camera, this.appContainer);\r\n        this.controls.addEventListener('change', () => {\r\n            this.render();\r\n            if (this.onCameraChange) {\r\n                this.onCameraChange(this.camera);\r\n            }\r\n        });\r\n    }\r\n    animate() {\r\n        requestAnimationFrame(this.animate.bind(this));\r\n        this.render();\r\n    }\r\n    render() {\r\n        this.renderer.render(this.scene, this.camera);\r\n    }\r\n}\r\nexports.ThreeJSView = ThreeJSView;\r\n"
        },
        {
          "id": 52,
          "identifier": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-client\\src\\views\\GIJSView.ts",
          "name": "./packages/render-client/src/views/GIJSView.ts",
          "index": 52,
          "index2": 51,
          "size": 14130,
          "cacheable": true,
          "built": true,
          "optional": false,
          "prefetched": false,
          "chunks": [
            0
          ],
          "assets": [],
          "issuer": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-client\\index.ts",
          "issuerId": 36,
          "issuerName": "./packages/render-client/index.ts",
          "failed": false,
          "errors": 5,
          "warnings": 0,
          "reasons": [
            {
              "moduleId": 36,
              "moduleIdentifier": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-client\\index.ts",
              "module": "./packages/render-client/index.ts",
              "moduleName": "./packages/render-client/index.ts",
              "type": "cjs require",
              "userRequest": "./src/views/GIJSView",
              "loc": "12:9-40"
            }
          ],
          "usedExports": true,
          "providedExports": null,
          "optimizationBailout": [],
          "depth": 1,
          "source": "\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst GIRenderBase_1 = require(\"../render/GIRenderBase\");\r\nconst Color_1 = require(\"../../../render-core/src/engine/math/Color\");\r\nconst Camera_1 = require(\"../../../render-core/src/engine/scene/Camera\");\r\nconst SharedScene_1 = require(\"../../../render-core/src/engine/scene/SharedScene\");\r\nconst Cube_1 = require(\"../../../render-core/src/engine/scene/shapes/Cube\");\r\nconst Vector3_1 = require(\"../../../render-core/src/engine/math/Vector3\");\r\nconst Sphere_1 = require(\"../../../render-core/src/engine/scene/shapes/Sphere\");\r\nconst LightMaterial_1 = require(\"../../../render-core/src/engine/scene/materials/LightMaterial\");\r\nconst ThreeObjects_1 = require(\"../objects/ThreeObjects\");\r\nconst Mesh_1 = require(\"../../../render-core/src/engine/scene/shapes/Mesh\");\r\nconst Triangle_1 = require(\"../../../render-core/src/engine/scene/shapes/Triangle\");\r\nconst Material_1 = require(\"../../../render-core/src/engine/scene/materials/Material\");\r\nconst TransformedShape_1 = require(\"../../../render-core/src/engine/scene/shapes/TransformedShape\");\r\nconst Attenuation_1 = require(\"../../../render-core/src/engine/scene/materials/Attenuation\");\r\nconst Attenuation_2 = require(\"../../../render-core/src/engine/scene/materials/Attenuation\");\r\nconst Matrix4_1 = require(\"../../../render-core/src/engine/math/Matrix4\");\r\nconst Texture_1 = require(\"../../../render-core/src/engine/scene/materials/Texture\");\r\nclass GIJSView extends GIRenderBase_1.GIRenderBase {\r\n    constructor(width, height, container) {\r\n        super(width, height, container);\r\n        this.width = width;\r\n        this.height = height;\r\n        this.container = container;\r\n        this.identityMatrix = new THREE.Matrix4().identity();\r\n        this.scene = new SharedScene_1.SharedScene(Color_1.Color.hexColor(0x262626));\r\n        this.camera = Camera_1.Camera.lookAt(new Vector3_1.Vector3(0, 0, 0), new Vector3_1.Vector3(0, 0, 0), new Vector3_1.Vector3(0, 1, 0), 45);\r\n        this.cameraSamples = -1;\r\n        this.hitSamples = 1;\r\n        this.bounces = 4;\r\n        this.iterations = 1000000;\r\n        this.blockIterations = 1;\r\n    }\r\n    setThreeJSScene(scene, onInit) {\r\n        this.loadChildren(scene);\r\n        this.render(onInit);\r\n    }\r\n    loadChildren(parent) {\r\n        var child;\r\n        for (var i = 0; i < parent.children.length; i++) {\r\n            child = parent.children[i];\r\n            var obj = this.buildSceneObject(child);\r\n            if (obj) {\r\n                this.scene.add(obj);\r\n            }\r\n            if (obj) {\r\n                if (!(obj.getMaterial(new Vector3_1.Vector3()) instanceof LightMaterial_1.LightMaterial) && child.children.length > 0) {\r\n                    this.loadChildren(child);\r\n                }\r\n            }\r\n            else {\r\n                if (child.children.length > 0) {\r\n                    this.loadChildren(child);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    buildSceneObject(src) {\r\n        switch (src.type) {\r\n            case ThreeObjects_1.ThreeObjects.Mesh:\r\n                var material = GIJSView.getMaterial(src.material);\r\n                var shape = this.buildGeometry(src.geometry, material, src.smooth);\r\n                var matrixWorld = src.matrixWorld;\r\n                if (matrixWorld.equals(this.identityMatrix)) {\r\n                    return shape;\r\n                }\r\n                else {\r\n                    var mat = Matrix4_1.Matrix4.fromTHREEJS(matrixWorld.elements);\r\n                    return TransformedShape_1.TransformedShape.newTransformedShape(shape, mat);\r\n                }\r\n            case ThreeObjects_1.ThreeObjects.PointLight:\r\n                return this.getLight(src);\r\n        }\r\n        return null;\r\n    }\r\n    buildGeometry(geometry, material, smooth = false) {\r\n        if (geometry[\"_bufferGeometry\"]) {\r\n            geometry = geometry[\"_bufferGeometry\"];\r\n        }\r\n        var triangles = [];\r\n        if (!geometry.attributes) {\r\n            var vertices = geometry.vertices;\r\n            var faces = geometry.faces;\r\n            if (vertices && faces) {\r\n                for (var i = 0; i < faces.length; i++) {\r\n                    var face = faces[i];\r\n                    var triangle = new Triangle_1.Triangle();\r\n                    triangle.material = material;\r\n                    triangle.v1 = new Vector3_1.Vector3(vertices[face.a].x, vertices[face.a].y, vertices[face.a].z);\r\n                    triangle.v2 = new Vector3_1.Vector3(vertices[face.b].x, vertices[face.b].y, vertices[face.b].z);\r\n                    triangle.v3 = new Vector3_1.Vector3(vertices[face.c].x, vertices[face.c].y, vertices[face.c].z);\r\n                    triangle.n1 = new Vector3_1.Vector3();\r\n                    triangle.n2 = new Vector3_1.Vector3();\r\n                    triangle.n3 = new Vector3_1.Vector3();\r\n                    triangle.updateBox();\r\n                    triangle.fixNormals();\r\n                    triangles.push(triangle);\r\n                }\r\n            }\r\n            else {\r\n                return null;\r\n            }\r\n        }\r\n        else {\r\n            var positions = geometry.attributes[\"position\"].array;\r\n            if (geometry.attributes[\"uv\"]) {\r\n                var uv = geometry.attributes[\"uv\"].array;\r\n            }\r\n            var normals;\r\n            if (geometry.attributes[\"normal\"]) {\r\n                normals = geometry.attributes[\"normal\"].array;\r\n            }\r\n            else {\r\n                normals = this.computeNormals(positions);\r\n            }\r\n            var triCount = 0;\r\n            var indexAttribute = geometry.getIndex();\r\n            if (indexAttribute) {\r\n                var indices = indexAttribute.array;\r\n                var uvIndex = 0;\r\n                for (var i = 0; i < indices.length; i = i + 3) {\r\n                    triCount++;\r\n                    var a;\r\n                    var b;\r\n                    var c;\r\n                    a = indices[i];\r\n                    b = indices[i + 1];\r\n                    c = indices[i + 2];\r\n                    if (triCount % 2 !== 0) {\r\n                        a = indices[i];\r\n                        b = indices[i + 1];\r\n                        c = indices[i + 2];\r\n                    }\r\n                    else {\r\n                        c = indices[i];\r\n                        b = indices[i + 1];\r\n                        a = indices[i + 2];\r\n                    }\r\n                    var ax = a * 3;\r\n                    var ay = (a * 3) + 1;\r\n                    var az = (a * 3) + 2;\r\n                    var bx = b * 3;\r\n                    var by = (b * 3) + 1;\r\n                    var bz = (b * 3) + 2;\r\n                    var cx = c * 3;\r\n                    var cy = (c * 3) + 1;\r\n                    var cz = (c * 3) + 2;\r\n                    var au = a * 2;\r\n                    var av = (a * 2) + 1;\r\n                    var bu = b * 2;\r\n                    var bv = (b * 2) + 1;\r\n                    var cu = c * 2;\r\n                    var cv = (c * 2) + 1;\r\n                    var triangle = new Triangle_1.Triangle();\r\n                    triangle.material = material;\r\n                    triangle.v1 = new Vector3_1.Vector3(positions[ax], positions[ay], positions[az]);\r\n                    triangle.v2 = new Vector3_1.Vector3(positions[bx], positions[by], positions[bz]);\r\n                    triangle.v3 = new Vector3_1.Vector3(positions[cx], positions[cy], positions[cz]);\r\n                    triangle.n1 = new Vector3_1.Vector3(normals[ax], normals[ay], normals[az]);\r\n                    triangle.n2 = new Vector3_1.Vector3(normals[bx], normals[by], normals[bz]);\r\n                    triangle.n3 = new Vector3_1.Vector3(normals[cx], normals[cy], normals[cz]);\r\n                    if (uv) {\r\n                        triangle.t1 = new Vector3_1.Vector3(uv[au], uv[av], 0);\r\n                        triangle.t2 = new Vector3_1.Vector3(uv[bu], uv[bv], 0);\r\n                        triangle.t3 = new Vector3_1.Vector3(uv[cu], uv[cv], 0);\r\n                    }\r\n                    triangle.fixNormals();\r\n                    triangle.updateBox();\r\n                    triangles.push(triangle);\r\n                    uvIndex += 2;\r\n                }\r\n            }\r\n            else {\r\n                uvIndex = 0;\r\n                for (var i = 0; i < positions.length; i = i + 9) {\r\n                    var triangle = new Triangle_1.Triangle();\r\n                    triangle.material = material;\r\n                    triangle.v1 = new Vector3_1.Vector3(positions[i], positions[i + 1], positions[i + 2]);\r\n                    triangle.v2 = new Vector3_1.Vector3(positions[i + 3], positions[i + 4], positions[i + 5]);\r\n                    triangle.v3 = new Vector3_1.Vector3(positions[i + 6], positions[i + 7], positions[i + 8]);\r\n                    triangle.n1 = new Vector3_1.Vector3(normals[i], normals[i + 1], normals[i + 2]);\r\n                    triangle.n2 = new Vector3_1.Vector3(normals[i + 3], normals[i + 4], normals[i + 5]);\r\n                    triangle.n3 = new Vector3_1.Vector3(normals[i + 6], normals[i + 7], normals[i + 8]);\r\n                    if (uv) {\r\n                        triangle.t1 = new Vector3_1.Vector3(uv[uvIndex], uv[uvIndex + 1], 0);\r\n                        triangle.t2 = new Vector3_1.Vector3(uv[uvIndex + 2], uv[uvIndex + 3], 0);\r\n                        triangle.t3 = new Vector3_1.Vector3(uv[uvIndex + 4], uv[uvIndex + 5], 0);\r\n                    }\r\n                    triangle.fixNormals();\r\n                    triangle.updateBox();\r\n                    triangles.push(triangle);\r\n                    uvIndex += 6;\r\n                }\r\n            }\r\n        }\r\n        var mesh = Mesh_1.Mesh.newMesh(triangles);\r\n        if (smooth) {\r\n            mesh.smoothNormals();\r\n        }\r\n        return mesh;\r\n    }\r\n    computeNormals(positions) {\r\n        return new Float32Array(positions.length);\r\n    }\r\n    updateCamera(camera) {\r\n        this.camera.p.setFromJson(camera.position);\r\n        this.camera.m = 1 / Math.tan(camera.fov * Math.PI / 360);\r\n        let e = camera.matrix.elements;\r\n        let x = [-e[0], -e[1], -e[2]];\r\n        let y = [e[4], e[5], e[6]];\r\n        let z = [-e[8], -e[9], -e[10]];\r\n        this.camera.u.setFromArray(x);\r\n        this.camera.v.setFromArray(y);\r\n        this.camera.w.setFromArray(z);\r\n        this.dirty = true;\r\n        if (this.renderer) {\r\n            this.renderer.traceManager.stop();\r\n        }\r\n    }\r\n    static getMaterial(srcMaterial) {\r\n        if (srcMaterial instanceof THREE.MultiMaterial) {\r\n            srcMaterial = srcMaterial.materials[0];\r\n        }\r\n        var material = new Material_1.Material(Color_1.Color.hexColor(srcMaterial.color.getHex()));\r\n        material.ior = srcMaterial.ior ? srcMaterial.ior : 1;\r\n        material.tint = srcMaterial.tint ? srcMaterial.tint : 0;\r\n        material.gloss = srcMaterial.gloss ? srcMaterial.gloss : 0;\r\n        material.emittance = srcMaterial.emittance ? srcMaterial.emittance : 0;\r\n        material.transparent = srcMaterial.transparent;\r\n        material.attenuation = Attenuation_1.Attenuation.fromJson(srcMaterial.attenuation);\r\n        if (srcMaterial.map) {\r\n            if (srcMaterial.map.image && srcMaterial.map.image.length == 0) {\r\n                var image = srcMaterial.map.mipmaps[0];\r\n                material.texture = new Texture_1.Texture();\r\n                material.texture.setImageData(image.width, image.height, image.data);\r\n                material.texture.sourceFile = srcMaterial.map.uuid;\r\n            }\r\n            else if (srcMaterial.map.image) {\r\n                material.texture = new Texture_1.Texture(srcMaterial.map.image);\r\n            }\r\n        }\r\n        if (srcMaterial.normalMap) {\r\n            if (srcMaterial.normalMap.image && srcMaterial.normalMap.image.length == 0) {\r\n                var image = srcMaterial.normalMap.mipmaps[0];\r\n                material.normalTexture = new Texture_1.Texture();\r\n                material.normalTexture.setImageData(image.width, image.height, image.data);\r\n                material.normalTexture.sourceFile = srcMaterial.normalMap.uuid;\r\n            }\r\n            else if (srcMaterial.normalMap.image) {\r\n                material.normalTexture = new Texture_1.Texture(srcMaterial.normalMap.image);\r\n            }\r\n        }\r\n        if (srcMaterial.bumpMap) {\r\n            if (srcMaterial.bumpMap.image && srcMaterial.bumpMap.image.length == 0) {\r\n                var image = srcMaterial.bumpMap.mipmaps[0];\r\n                material.bumpTexture = new Texture_1.Texture();\r\n                material.bumpTexture.setImageData(image.width, image.height, image.data);\r\n                material.bumpTexture.sourceFile = srcMaterial.bumpMap.uuid;\r\n            }\r\n            else if (srcMaterial.bumpMap.image) {\r\n                material.bumpTexture = new Texture_1.Texture(srcMaterial.bumpMap.image);\r\n            }\r\n        }\r\n        return material;\r\n    }\r\n    getLight(src) {\r\n        if (src.children.length > 0) {\r\n            var lightGeometry = src.children[0].geometry;\r\n            if (lightGeometry instanceof THREE.SphereGeometry) {\r\n                var _radius = lightGeometry.parameters.radius;\r\n            }\r\n            else if (lightGeometry instanceof THREE.PlaneGeometry) {\r\n                var width = lightGeometry.parameters.width;\r\n                var height = lightGeometry.parameters.height;\r\n            }\r\n        }\r\n        var material = new LightMaterial_1.LightMaterial(Color_1.Color.hexColor(src.color.getHex()), src.intensity, new Attenuation_2.LinearAttenuation(src.distance));\r\n        if (_radius) {\r\n            var shape = Sphere_1.Sphere.newSphere(new Vector3_1.Vector3(src.position.x, src.position.y, src.position.z), _radius, material);\r\n        }\r\n        else {\r\n            shape = Cube_1.Cube.newCube(new Vector3_1.Vector3(-width / 2, src.position.y, -height / 2), new Vector3_1.Vector3(width / 2, src.position.y + 1, height / 2), material);\r\n        }\r\n        return shape;\r\n    }\r\n}\r\nexports.GIJSView = GIJSView;\r\n"
        }
      ],
      "filteredModules": 0,
      "origins": [
        {
          "moduleId": 36,
          "module": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-client\\index.ts",
          "moduleIdentifier": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-client\\index.ts",
          "moduleName": "./packages/render-client/index.ts",
          "loc": "",
          "name": "xray",
          "reasons": []
        }
      ]
    }
  ],
  "modules": [
    {
      "id": 0,
      "identifier": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-core\\src\\engine\\scene\\materials\\Material.ts",
      "name": "./packages/render-core/src/engine/scene/materials/Material.ts",
      "index": 25,
      "index2": 23,
      "size": 5391,
      "cacheable": true,
      "built": false,
      "optional": false,
      "prefetched": false,
      "chunks": [
        0
      ],
      "assets": [],
      "issuer": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-core\\src\\engine\\scene\\SharedScene.ts",
      "issuerId": 25,
      "issuerName": "./packages/render-core/src/engine/scene/SharedScene.ts",
      "failed": false,
      "errors": 0,
      "warnings": 0,
      "reasons": [
        {
          "moduleId": 11,
          "moduleIdentifier": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-core\\src\\engine\\scene\\shapes\\Triangle.ts",
          "module": "./packages/render-core/src/engine/scene/shapes/Triangle.ts",
          "moduleName": "./packages/render-core/src/engine/scene/shapes/Triangle.ts",
          "type": "cjs require",
          "userRequest": "../materials/Material",
          "loc": "3:19-51"
        },
        {
          "moduleId": 16,
          "moduleIdentifier": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-core\\src\\engine\\scene\\shapes\\Cube.ts",
          "module": "./packages/render-core/src/engine/scene/shapes/Cube.ts",
          "moduleName": "./packages/render-core/src/engine/scene/shapes/Cube.ts",
          "type": "cjs require",
          "userRequest": "../materials/Material",
          "loc": "4:19-51"
        },
        {
          "moduleId": 17,
          "moduleIdentifier": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-core\\src\\engine\\scene\\materials\\MaterialUtils.ts",
          "module": "./packages/render-core/src/engine/scene/materials/MaterialUtils.ts",
          "moduleName": "./packages/render-core/src/engine/scene/materials/MaterialUtils.ts",
          "type": "cjs require",
          "userRequest": "./Material",
          "loc": "3:19-40"
        },
        {
          "moduleId": 17,
          "moduleIdentifier": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-core\\src\\engine\\scene\\materials\\MaterialUtils.ts",
          "module": "./packages/render-core/src/engine/scene/materials/MaterialUtils.ts",
          "moduleName": "./packages/render-core/src/engine/scene/materials/MaterialUtils.ts",
          "type": "cjs require",
          "userRequest": "./Material",
          "loc": "4:19-40"
        },
        {
          "moduleId": 18,
          "moduleIdentifier": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-core\\src\\engine\\scene\\shapes\\Sphere.ts",
          "module": "./packages/render-core/src/engine/scene/shapes/Sphere.ts",
          "moduleName": "./packages/render-core/src/engine/scene/shapes/Sphere.ts",
          "type": "cjs require",
          "userRequest": "../materials/Material",
          "loc": "4:19-51"
        },
        {
          "moduleId": 25,
          "moduleIdentifier": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-core\\src\\engine\\scene\\SharedScene.ts",
          "module": "./packages/render-core/src/engine/scene/SharedScene.ts",
          "moduleName": "./packages/render-core/src/engine/scene/SharedScene.ts",
          "type": "cjs require",
          "userRequest": "./materials/Material",
          "loc": "5:19-50"
        },
        {
          "moduleId": 28,
          "moduleIdentifier": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-core\\src\\engine\\scene\\materials\\LightMaterial.ts",
          "module": "./packages/render-core/src/engine/scene/materials/LightMaterial.ts",
          "moduleName": "./packages/render-core/src/engine/scene/materials/LightMaterial.ts",
          "type": "cjs require",
          "userRequest": "./Material",
          "loc": "4:19-40"
        },
        {
          "moduleId": 28,
          "moduleIdentifier": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-core\\src\\engine\\scene\\materials\\LightMaterial.ts",
          "module": "./packages/render-core/src/engine/scene/materials/LightMaterial.ts",
          "moduleName": "./packages/render-core/src/engine/scene/materials/LightMaterial.ts",
          "type": "cjs require",
          "userRequest": "./Material",
          "loc": "3:19-40"
        },
        {
          "moduleId": 45,
          "moduleIdentifier": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-core\\src\\engine\\scene\\materials\\DiffuseMaterial.ts",
          "module": "./packages/render-core/src/engine/scene/materials/DiffuseMaterial.ts",
          "moduleName": "./packages/render-core/src/engine/scene/materials/DiffuseMaterial.ts",
          "type": "cjs require",
          "userRequest": "./Material",
          "loc": "5:19-40"
        },
        {
          "moduleId": 45,
          "moduleIdentifier": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-core\\src\\engine\\scene\\materials\\DiffuseMaterial.ts",
          "module": "./packages/render-core/src/engine/scene/materials/DiffuseMaterial.ts",
          "moduleName": "./packages/render-core/src/engine/scene/materials/DiffuseMaterial.ts",
          "type": "cjs require",
          "userRequest": "./Material",
          "loc": "3:19-40"
        },
        {
          "moduleId": 46,
          "moduleIdentifier": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-core\\src\\engine\\scene\\materials\\SpecularMaterial.ts",
          "module": "./packages/render-core/src/engine/scene/materials/SpecularMaterial.ts",
          "moduleName": "./packages/render-core/src/engine/scene/materials/SpecularMaterial.ts",
          "type": "cjs require",
          "userRequest": "./Material",
          "loc": "5:19-40"
        },
        {
          "moduleId": 46,
          "moduleIdentifier": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-core\\src\\engine\\scene\\materials\\SpecularMaterial.ts",
          "module": "./packages/render-core/src/engine/scene/materials/SpecularMaterial.ts",
          "moduleName": "./packages/render-core/src/engine/scene/materials/SpecularMaterial.ts",
          "type": "cjs require",
          "userRequest": "./Material",
          "loc": "3:19-40"
        },
        {
          "moduleId": 47,
          "moduleIdentifier": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-core\\src\\engine\\scene\\materials\\ClearMaterial.ts",
          "module": "./packages/render-core/src/engine/scene/materials/ClearMaterial.ts",
          "moduleName": "./packages/render-core/src/engine/scene/materials/ClearMaterial.ts",
          "type": "cjs require",
          "userRequest": "./Material",
          "loc": "6:19-40"
        },
        {
          "moduleId": 47,
          "moduleIdentifier": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-core\\src\\engine\\scene\\materials\\ClearMaterial.ts",
          "module": "./packages/render-core/src/engine/scene/materials/ClearMaterial.ts",
          "moduleName": "./packages/render-core/src/engine/scene/materials/ClearMaterial.ts",
          "type": "cjs require",
          "userRequest": "./Material",
          "loc": "3:19-40"
        },
        {
          "moduleId": 48,
          "moduleIdentifier": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-core\\src\\engine\\scene\\materials\\GlossyMaterial.ts",
          "module": "./packages/render-core/src/engine/scene/materials/GlossyMaterial.ts",
          "moduleName": "./packages/render-core/src/engine/scene/materials/GlossyMaterial.ts",
          "type": "cjs require",
          "userRequest": "./Material",
          "loc": "5:19-40"
        },
        {
          "moduleId": 48,
          "moduleIdentifier": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-core\\src\\engine\\scene\\materials\\GlossyMaterial.ts",
          "module": "./packages/render-core/src/engine/scene/materials/GlossyMaterial.ts",
          "moduleName": "./packages/render-core/src/engine/scene/materials/GlossyMaterial.ts",
          "type": "cjs require",
          "userRequest": "./Material",
          "loc": "3:19-40"
        },
        {
          "moduleId": 52,
          "moduleIdentifier": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-client\\src\\views\\GIJSView.ts",
          "module": "./packages/render-client/src/views/GIJSView.ts",
          "moduleName": "./packages/render-client/src/views/GIJSView.ts",
          "type": "cjs require",
          "userRequest": "../../../render-core/src/engine/scene/materials/Material",
          "loc": "14:19-86"
        }
      ],
      "usedExports": true,
      "providedExports": null,
      "optimizationBailout": [],
      "depth": 2,
      "source": "\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst Color_1 = require(\"../../math/Color\");\r\nconst Texture_1 = require(\"./Texture\");\r\nconst Attenuation_1 = require(\"./Attenuation\");\r\nconst Attenuation_2 = require(\"./Attenuation\");\r\nvar MaterialType;\r\n(function (MaterialType) {\r\n    MaterialType[MaterialType[\"GENERIC\"] = 0] = \"GENERIC\";\r\n    MaterialType[MaterialType[\"DIFFUSE\"] = 1] = \"DIFFUSE\";\r\n    MaterialType[MaterialType[\"SPECULAR\"] = 2] = \"SPECULAR\";\r\n    MaterialType[MaterialType[\"CLEAR\"] = 3] = \"CLEAR\";\r\n    MaterialType[MaterialType[\"GLOSSY\"] = 4] = \"GLOSSY\";\r\n    MaterialType[MaterialType[\"EMISSIVE\"] = 5] = \"EMISSIVE\";\r\n})(MaterialType = exports.MaterialType || (exports.MaterialType = {}));\r\nclass Material {\r\n    constructor(color = new Color_1.Color(), texture, normalTexture, bumpTexture, bumpMultiplier, emittance, attenuation = Attenuation_2.NoAttenuation, ior, gloss, tint, transparent) {\r\n        this.color = color;\r\n        this.texture = texture;\r\n        this.normalTexture = normalTexture;\r\n        this.bumpTexture = bumpTexture;\r\n        this.bumpMultiplier = bumpMultiplier;\r\n        this.emittance = emittance;\r\n        this.attenuation = attenuation;\r\n        this.ior = ior;\r\n        this.gloss = gloss;\r\n        this.tint = tint;\r\n        this.transparent = transparent;\r\n        this.type = MaterialType.GENERIC;\r\n        this.index = Material.map.push(this) - 1;\r\n    }\r\n    clone() {\r\n        var material = new Material(this.color.clone(), this.texture, this.normalTexture, this.bumpTexture, this.bumpMultiplier, this.emittance, this.attenuation.clone(), this.ior, this.gloss, this.tint, this.transparent);\r\n        material.type = this.type;\r\n        return material;\r\n    }\r\n    directRead(memory, offset) {\r\n        offset = this.color.directRead(memory, offset);\r\n        this.bumpMultiplier = memory[offset++];\r\n        this.emittance = memory[offset++];\r\n        offset = this.attenuation.directRead(memory, offset);\r\n        this.ior = memory[offset++];\r\n        this.gloss = memory[offset++];\r\n        this.tint = memory[offset++];\r\n        this.transparent = memory[offset++] == 1;\r\n        return offset;\r\n    }\r\n    directWrite(memory, offset) {\r\n        offset = this.color.directWrite(memory, offset);\r\n        memory[offset++] = this.bumpMultiplier;\r\n        memory[offset++] = this.emittance;\r\n        offset = this.attenuation.directWrite(memory, offset);\r\n        memory[offset++] = this.ior;\r\n        memory[offset++] = this.gloss;\r\n        memory[offset++] = this.tint;\r\n        memory[offset++] = this.transparent ? 1 : 0;\r\n        return offset;\r\n    }\r\n    read(memory) {\r\n        this.color.read(memory);\r\n        this.bumpMultiplier = memory.readFloat();\r\n        this.emittance = memory.readFloat();\r\n        this.attenuation.read(memory);\r\n        this.ior = memory.readFloat();\r\n        this.gloss = memory.readFloat();\r\n        this.tint = memory.readFloat();\r\n        this.transparent = memory.readBoolean();\r\n        var hasTexture = memory.readBoolean();\r\n        if (hasTexture) {\r\n            this.texture = Texture_1.Texture.getTexture(memory.readUTF());\r\n        }\r\n        var hasNormalTexture = memory.readBoolean();\r\n        if (hasNormalTexture) {\r\n            this.normalTexture = Texture_1.Texture.getTexture(memory.readUTF());\r\n        }\r\n        return memory.position;\r\n    }\r\n    write(memory) {\r\n        this.color.write(memory);\r\n        memory.writeFloat(this.bumpMultiplier);\r\n        memory.writeFloat(this.emittance);\r\n        this.attenuation.write(memory);\r\n        memory.writeFloat(this.ior);\r\n        memory.writeFloat(this.gloss);\r\n        memory.writeFloat(this.tint);\r\n        memory.writeBoolean(this.transparent);\r\n        if (this.texture) {\r\n            memory.writeBoolean(true);\r\n            memory.writeUTF(this.texture.sourceFile);\r\n        }\r\n        else {\r\n            memory.writeBoolean(false);\r\n        }\r\n        if (this.normalTexture) {\r\n            memory.writeBoolean(true);\r\n            memory.writeUTF(this.normalTexture.sourceFile);\r\n        }\r\n        else {\r\n            memory.writeBoolean(false);\r\n        }\r\n        return memory.position;\r\n    }\r\n    static get estimatedMemory() {\r\n        return Material.SIZE * Material.map.length + 1;\r\n    }\r\n    ;\r\n    static directWrite(memory, offset) {\r\n        memory[offset++] = Material.map.length;\r\n        Material.map.forEach(function (material) {\r\n            offset = material.directWrite(memory, offset);\r\n        });\r\n        return offset;\r\n    }\r\n    static directRestore(memory, offset = 0) {\r\n        var numMaterials = memory[offset++];\r\n        for (var i = 0; i < numMaterials; i++) {\r\n            offset = new Material().directRead(memory, offset);\r\n        }\r\n        return offset;\r\n    }\r\n    static write(memory) {\r\n        memory.writeUnsignedInt(Material.map.length);\r\n        Material.map.forEach(function (material) {\r\n            material.write(memory);\r\n        });\r\n        return memory.position;\r\n    }\r\n    static restore(memory) {\r\n        var numMaterials = memory.readUnsignedInt();\r\n        for (var i = 0; i < numMaterials; i++) {\r\n            new Material().read(memory);\r\n        }\r\n        return memory.position;\r\n    }\r\n}\r\nMaterial.SIZE = Color_1.Color.SIZE + Attenuation_1.Attenuation.SIZE + 6;\r\nMaterial.map = [];\r\nexports.Material = Material;\r\n"
    },
    {
      "id": 1,
      "identifier": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-core\\src\\engine\\math\\Vector3.ts",
      "name": "./packages/render-core/src/engine/math/Vector3.ts",
      "index": 7,
      "index2": 7,
      "size": 5069,
      "cacheable": true,
      "built": false,
      "optional": false,
      "prefetched": false,
      "chunks": [
        0
      ],
      "assets": [],
      "issuer": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-client\\src\\render\\HeadlessRenderBase.ts",
      "issuerId": 38,
      "issuerName": "./packages/render-client/src/render/HeadlessRenderBase.ts",
      "failed": false,
      "errors": 0,
      "warnings": 0,
      "reasons": [
        {
          "moduleId": 5,
          "moduleIdentifier": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-core\\src\\engine\\scene\\shapes\\Box.ts",
          "module": "./packages/render-core/src/engine/scene/shapes/Box.ts",
          "moduleName": "./packages/render-core/src/engine/scene/shapes/Box.ts",
          "type": "cjs require",
          "userRequest": "../../math/Vector3",
          "loc": "3:18-47"
        },
        {
          "moduleId": 8,
          "moduleIdentifier": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-core\\src\\engine\\math\\Ray.ts",
          "module": "./packages/render-core/src/engine/math/Ray.ts",
          "moduleName": "./packages/render-core/src/engine/math/Ray.ts",
          "type": "cjs require",
          "userRequest": "./Vector3",
          "loc": "3:18-38"
        },
        {
          "moduleId": 10,
          "moduleIdentifier": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-core\\src\\engine\\scene\\materials\\Texture.ts",
          "module": "./packages/render-core/src/engine/scene/materials/Texture.ts",
          "moduleName": "./packages/render-core/src/engine/scene/materials/Texture.ts",
          "type": "cjs require",
          "userRequest": "../../math/Vector3",
          "loc": "4:18-47"
        },
        {
          "moduleId": 11,
          "moduleIdentifier": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-core\\src\\engine\\scene\\shapes\\Triangle.ts",
          "module": "./packages/render-core/src/engine/scene/shapes/Triangle.ts",
          "moduleName": "./packages/render-core/src/engine/scene/shapes/Triangle.ts",
          "type": "cjs require",
          "userRequest": "../../math/Vector3",
          "loc": "5:18-47"
        },
        {
          "moduleId": 12,
          "moduleIdentifier": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-core\\src\\engine\\math\\Matrix4.ts",
          "module": "./packages/render-core/src/engine/math/Matrix4.ts",
          "moduleName": "./packages/render-core/src/engine/math/Matrix4.ts",
          "type": "cjs require",
          "userRequest": "./Vector3",
          "loc": "3:18-38"
        },
        {
          "moduleId": 16,
          "moduleIdentifier": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-core\\src\\engine\\scene\\shapes\\Cube.ts",
          "module": "./packages/render-core/src/engine/scene/shapes/Cube.ts",
          "moduleName": "./packages/render-core/src/engine/scene/shapes/Cube.ts",
          "type": "cjs require",
          "userRequest": "../../math/Vector3",
          "loc": "3:18-47"
        },
        {
          "moduleId": 18,
          "moduleIdentifier": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-core\\src\\engine\\scene\\shapes\\Sphere.ts",
          "module": "./packages/render-core/src/engine/scene/shapes/Sphere.ts",
          "moduleName": "./packages/render-core/src/engine/scene/shapes/Sphere.ts",
          "type": "cjs require",
          "userRequest": "../../math/Vector3",
          "loc": "3:18-47"
        },
        {
          "moduleId": 19,
          "moduleIdentifier": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-core\\src\\engine\\scene\\shapes\\Mesh.ts",
          "module": "./packages/render-core/src/engine/scene/shapes/Mesh.ts",
          "moduleName": "./packages/render-core/src/engine/scene/shapes/Mesh.ts",
          "type": "cjs require",
          "userRequest": "../../math/Vector3",
          "loc": "5:18-47"
        },
        {
          "moduleId": 24,
          "moduleIdentifier": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-core\\src\\engine\\scene\\Camera.ts",
          "module": "./packages/render-core/src/engine/scene/Camera.ts",
          "moduleName": "./packages/render-core/src/engine/scene/Camera.ts",
          "type": "cjs require",
          "userRequest": "../math/Vector3",
          "loc": "3:18-44"
        },
        {
          "moduleId": 38,
          "moduleIdentifier": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-client\\src\\render\\HeadlessRenderBase.ts",
          "module": "./packages/render-client/src/render/HeadlessRenderBase.ts",
          "moduleName": "./packages/render-client/src/render/HeadlessRenderBase.ts",
          "type": "cjs require",
          "userRequest": "../../../render-core/src/engine/math/Vector3",
          "loc": "6:18-73"
        },
        {
          "moduleId": 41,
          "moduleIdentifier": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-core\\src\\engine\\scene\\Scene.ts",
          "module": "./packages/render-core/src/engine/scene/Scene.ts",
          "moduleName": "./packages/render-core/src/engine/scene/Scene.ts",
          "type": "cjs require",
          "userRequest": "../math/Vector3",
          "loc": "6:18-44"
        },
        {
          "moduleId": 52,
          "moduleIdentifier": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-client\\src\\views\\GIJSView.ts",
          "module": "./packages/render-client/src/views/GIJSView.ts",
          "moduleName": "./packages/render-client/src/views/GIJSView.ts",
          "type": "cjs require",
          "userRequest": "../../../render-core/src/engine/math/Vector3",
          "loc": "8:18-73"
        }
      ],
      "usedExports": true,
      "providedExports": null,
      "optimizationBailout": [],
      "depth": 2,
      "source": "\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst DirectMemory_1 = require(\"../../pointer/src/DirectMemory\");\r\nclass Vector3 {\r\n    constructor(x = 0, y = 0, z = 0) {\r\n        this.x = x;\r\n        this.y = y;\r\n        this.z = z;\r\n        this.memorySize = Vector3.SIZE;\r\n        this.data = new Float32Array(4);\r\n        this.update();\r\n    }\r\n    update() {\r\n        this.data[0] = this.x;\r\n        this.data[1] = this.y;\r\n        this.data[2] = this.z;\r\n    }\r\n    sync() {\r\n        this.x = this.data[0];\r\n        this.y = this.data[1];\r\n        this.z = this.data[2];\r\n    }\r\n    static fromJson(v) {\r\n        if (v) {\r\n            return new Vector3(v.x, v.y, v.z);\r\n        }\r\n        else {\r\n            return null;\r\n        }\r\n    }\r\n    setFromArray(a, offset = 0) {\r\n        this.x = a[offset];\r\n        this.y = a[offset + 1];\r\n        this.z = a[offset + 2];\r\n        this.update();\r\n    }\r\n    setFromJson(a) {\r\n        this.x = a.x;\r\n        this.y = a.y;\r\n        this.z = a.z;\r\n        this.update();\r\n    }\r\n    length() {\r\n        return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z);\r\n    }\r\n    dot(b) {\r\n        return this.x * b.x + this.y * b.y + this.z * b.z;\r\n    }\r\n    cross(b) {\r\n        let x = this.y * b.z - this.z * b.y;\r\n        let y = this.z * b.x - this.x * b.z;\r\n        let z = this.x * b.y - this.y * b.x;\r\n        return new Vector3(x, y, z);\r\n    }\r\n    normalize() {\r\n        let d = this.length();\r\n        return new Vector3(this.x / d, this.y / d, this.z / d);\r\n    }\r\n    add(b) {\r\n        return new Vector3(this.x + b.x, this.y + b.y, this.z + b.z);\r\n    }\r\n    sub(b) {\r\n        return new Vector3(this.x - b.x, this.y - b.y, this.z - b.z);\r\n    }\r\n    mul(b) {\r\n        return new Vector3(this.x * b.x, this.y * b.y, this.z * b.z);\r\n    }\r\n    div(b) {\r\n        return new Vector3(this.x / b.x, this.y / b.y, this.z / b.z);\r\n    }\r\n    mulScalar(b) {\r\n        return new Vector3(this.x * b, this.y * b, this.z * b);\r\n    }\r\n    divScalar(b) {\r\n        return new Vector3(this.x / b, this.y / b, this.z / b);\r\n    }\r\n    min(b) {\r\n        return new Vector3(Math.min(this.x, b.x), Math.min(this.y, b.y), Math.min(this.z, b.z));\r\n    }\r\n    max(b) {\r\n        return new Vector3(Math.max(this.x, b.x), Math.max(this.y, b.y), Math.max(this.z, b.z));\r\n    }\r\n    minAxis() {\r\n        let x = Math.abs(this.x);\r\n        let y = Math.abs(this.y);\r\n        let z = Math.abs(this.z);\r\n        if (x <= y && x <= z) {\r\n            return new Vector3(1, 0, 0);\r\n        }\r\n        else if (y <= x && y <= z) {\r\n            return new Vector3(0, 1, 0);\r\n        }\r\n        return new Vector3(0, 0, 1);\r\n    }\r\n    minComponent() {\r\n        return Math.min(Math.min(this.x, this.y), this.z);\r\n    }\r\n    reflect(i) {\r\n        return i.sub(this.mulScalar(2 * this.dot(i)));\r\n    }\r\n    refract(i, n1, n2) {\r\n        let nr = n1 / n2;\r\n        let cosI = -this.dot(i);\r\n        let sinT2 = nr * nr * (1 - cosI * cosI);\r\n        if (sinT2 > 1) {\r\n            return new Vector3();\r\n        }\r\n        let cosT = Math.sqrt(1 - sinT2);\r\n        return i.mulScalar(nr).add(this.mulScalar(nr * cosI - cosT));\r\n    }\r\n    reflectance(i, n1, n2) {\r\n        let nr = n1 / n2;\r\n        let cosI = -this.dot(i);\r\n        let sinT2 = nr * nr * (1 - cosI * cosI);\r\n        if (sinT2 > 1) {\r\n            return 1;\r\n        }\r\n        let cosT = Math.sqrt(1 - sinT2);\r\n        let rOrth = (n1 * cosI - n2 * cosT) / (n1 * cosI + n2 * cosT);\r\n        let rPar = (n2 * cosI - n1 * cosT) / (n2 * cosI + n1 * cosT);\r\n        return (rOrth * rOrth + rPar * rPar) / 2;\r\n    }\r\n    toString() {\r\n        return \"(\" + this.x + \",\" + this.y + \",\" + this.z + \")\";\r\n    }\r\n    equals(v) {\r\n        return this.x == v.x && this.y == v.y && this.z == v.z;\r\n    }\r\n    isZero() {\r\n        return this.x == 0 && this.y == 0 && this.z == 0;\r\n    }\r\n    directWrite(memory, offset) {\r\n        memory[offset++] = this.x;\r\n        memory[offset++] = this.y;\r\n        memory[offset++] = this.z;\r\n        return offset;\r\n    }\r\n    directRead(memory, offset) {\r\n        this.x = memory[offset++];\r\n        this.y = memory[offset++];\r\n        this.z = memory[offset++];\r\n        return offset;\r\n    }\r\n    read(memory) {\r\n        this.x = memory.readFloat();\r\n        this.y = memory.readFloat();\r\n        this.z = memory.readFloat();\r\n        return memory.position;\r\n    }\r\n    write(memory) {\r\n        memory.writeFloat(this.x);\r\n        memory.writeFloat(this.y);\r\n        memory.writeFloat(this.z);\r\n        return memory.position;\r\n    }\r\n    isNullVector() {\r\n        return this.x == DirectMemory_1.DirectMemory.MIN_FLOAT32_VALUE &&\r\n            this.y == DirectMemory_1.DirectMemory.MIN_FLOAT32_VALUE &&\r\n            this.z == DirectMemory_1.DirectMemory.MIN_FLOAT32_VALUE;\r\n    }\r\n}\r\nVector3.SIZE = 3;\r\nVector3.NullVector = new Vector3(DirectMemory_1.DirectMemory.MIN_FLOAT32_VALUE, DirectMemory_1.DirectMemory.MIN_FLOAT32_VALUE, DirectMemory_1.DirectMemory.MIN_FLOAT32_VALUE);\r\nexports.Vector3 = Vector3;\r\n"
    },
    {
      "id": 2,
      "identifier": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-core\\src\\engine\\math\\Color.ts",
      "name": "./packages/render-core/src/engine/math/Color.ts",
      "index": 4,
      "index2": 2,
      "size": 3497,
      "cacheable": true,
      "built": false,
      "optional": false,
      "prefetched": false,
      "chunks": [
        0
      ],
      "assets": [],
      "issuer": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-client\\src\\display\\CanvasDisplay.ts",
      "issuerId": 23,
      "issuerName": "./packages/render-client/src/display/CanvasDisplay.ts",
      "failed": false,
      "errors": 0,
      "warnings": 0,
      "reasons": [
        {
          "moduleId": 0,
          "moduleIdentifier": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-core\\src\\engine\\scene\\materials\\Material.ts",
          "module": "./packages/render-core/src/engine/scene/materials/Material.ts",
          "moduleName": "./packages/render-core/src/engine/scene/materials/Material.ts",
          "type": "cjs require",
          "userRequest": "../../math/Color",
          "loc": "3:16-43"
        },
        {
          "moduleId": 10,
          "moduleIdentifier": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-core\\src\\engine\\scene\\materials\\Texture.ts",
          "module": "./packages/render-core/src/engine/scene/materials/Texture.ts",
          "moduleName": "./packages/render-core/src/engine/scene/materials/Texture.ts",
          "type": "cjs require",
          "userRequest": "../../math/Color",
          "loc": "3:16-43"
        },
        {
          "moduleId": 17,
          "moduleIdentifier": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-core\\src\\engine\\scene\\materials\\MaterialUtils.ts",
          "module": "./packages/render-core/src/engine/scene/materials/MaterialUtils.ts",
          "moduleName": "./packages/render-core/src/engine/scene/materials/MaterialUtils.ts",
          "type": "cjs require",
          "userRequest": "../../math/Color",
          "loc": "5:16-43"
        },
        {
          "moduleId": 19,
          "moduleIdentifier": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-core\\src\\engine\\scene\\shapes\\Mesh.ts",
          "module": "./packages/render-core/src/engine/scene/shapes/Mesh.ts",
          "moduleName": "./packages/render-core/src/engine/scene/shapes/Mesh.ts",
          "type": "cjs require",
          "userRequest": "../../math/Color",
          "loc": "6:16-43"
        },
        {
          "moduleId": 23,
          "moduleIdentifier": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-client\\src\\display\\CanvasDisplay.ts",
          "module": "./packages/render-client/src/display/CanvasDisplay.ts",
          "moduleName": "./packages/render-client/src/display/CanvasDisplay.ts",
          "type": "cjs require",
          "userRequest": "../../../render-core/src/engine/math/Color",
          "loc": "3:16-69"
        },
        {
          "moduleId": 25,
          "moduleIdentifier": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-core\\src\\engine\\scene\\SharedScene.ts",
          "module": "./packages/render-core/src/engine/scene/SharedScene.ts",
          "moduleName": "./packages/render-core/src/engine/scene/SharedScene.ts",
          "type": "cjs require",
          "userRequest": "../math/Color",
          "loc": "3:16-40"
        },
        {
          "moduleId": 38,
          "moduleIdentifier": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-client\\src\\render\\HeadlessRenderBase.ts",
          "module": "./packages/render-client/src/render/HeadlessRenderBase.ts",
          "moduleName": "./packages/render-client/src/render/HeadlessRenderBase.ts",
          "type": "cjs require",
          "userRequest": "../../../render-core/src/engine/math/Color",
          "loc": "3:16-69"
        },
        {
          "moduleId": 41,
          "moduleIdentifier": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-core\\src\\engine\\scene\\Scene.ts",
          "module": "./packages/render-core/src/engine/scene/Scene.ts",
          "moduleName": "./packages/render-core/src/engine/scene/Scene.ts",
          "type": "cjs require",
          "userRequest": "../math/Color",
          "loc": "3:16-40"
        },
        {
          "moduleId": 47,
          "moduleIdentifier": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-core\\src\\engine\\scene\\materials\\ClearMaterial.ts",
          "module": "./packages/render-core/src/engine/scene/materials/ClearMaterial.ts",
          "moduleName": "./packages/render-core/src/engine/scene/materials/ClearMaterial.ts",
          "type": "cjs require",
          "userRequest": "../../math/Color",
          "loc": "4:16-43"
        },
        {
          "moduleId": 52,
          "moduleIdentifier": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-client\\src\\views\\GIJSView.ts",
          "module": "./packages/render-client/src/views/GIJSView.ts",
          "moduleName": "./packages/render-client/src/views/GIJSView.ts",
          "type": "cjs require",
          "userRequest": "../../../render-core/src/engine/math/Color",
          "loc": "4:16-69"
        }
      ],
      "usedExports": true,
      "providedExports": null,
      "optimizationBailout": [],
      "depth": 2,
      "source": "\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nclass Color {\r\n    constructor(r = 0, g = 0, b = 0) {\r\n        this.r = r;\r\n        this.g = g;\r\n        this.b = b;\r\n    }\r\n    directWrite(mem, offset) {\r\n        mem[offset++] = this.r;\r\n        mem[offset++] = this.g;\r\n        mem[offset++] = this.b;\r\n        return offset;\r\n    }\r\n    directRead(mem, offset) {\r\n        this.r = mem[offset++];\r\n        this.g = mem[offset++];\r\n        this.b = mem[offset++];\r\n        return offset;\r\n    }\r\n    read(memory) {\r\n        this.r = memory.readFloat();\r\n        this.g = memory.readFloat();\r\n        this.b = memory.readFloat();\r\n        return memory.position;\r\n    }\r\n    write(memory) {\r\n        memory.writeFloat(this.r);\r\n        memory.writeFloat(this.g);\r\n        memory.writeFloat(this.b);\r\n        return memory.position;\r\n    }\r\n    static fromJson(color) {\r\n        if (color) {\r\n            return new Color(color.r, color.g, color.b);\r\n        }\r\n        else {\r\n            return null;\r\n        }\r\n    }\r\n    static hexColor(hex) {\r\n        var red = ((hex >> 16) & 255) / 255;\r\n        var green = ((hex >> 8) & 255) / 255;\r\n        var blue = (hex & 255) / 255;\r\n        return new Color(red, green, blue).pow(2.2);\r\n    }\r\n    static newColor(c) {\r\n        return new Color(c.r / 65535, c.g / 65535, c.b / 65535);\r\n    }\r\n    RGBA() {\r\n        let a = this;\r\n        let _c = new Uint8Array(3);\r\n        _c[0] = Math.max(0, Math.min(255, a.r * 255));\r\n        _c[1] = Math.max(0, Math.min(255, a.g * 255));\r\n        _c[2] = Math.max(0, Math.min(255, a.b * 255));\r\n        return { r: _c[0], g: _c[1], b: _c[2], a: 255 };\r\n    }\r\n    isBlack() {\r\n        return this.r === 0 && this.g === 0 && this.b === 0;\r\n    }\r\n    isWhite() {\r\n        return this.r === 1 && this.g === 1 && this.b === 1;\r\n    }\r\n    add(b) {\r\n        return new Color(this.r + b.r, this.g + b.g, this.b + b.b);\r\n    }\r\n    sub(b) {\r\n        return new Color(this.r - b.r, this.g - b.g, this.b - b.b);\r\n    }\r\n    mul(b) {\r\n        return new Color(this.r * b.r, this.g * b.g, this.b * b.b);\r\n    }\r\n    mulScalar(b) {\r\n        return new Color(this.r * b, this.g * b, this.b * b);\r\n    }\r\n    divScalar(b) {\r\n        return new Color(this.r / b, this.g / b, this.b / b);\r\n    }\r\n    min(b) {\r\n        return new Color(Math.min(this.r, b.r), Math.min(this.g, b.g), Math.min(this.b, b.b));\r\n    }\r\n    max(b) {\r\n        return new Color(Math.max(this.r, b.r), Math.max(this.g, b.g), Math.max(this.b, b.b));\r\n    }\r\n    pow(b) {\r\n        return new Color(Math.pow(this.r, b), Math.pow(this.g, b), Math.pow(this.b, b));\r\n    }\r\n    mix(b, pct) {\r\n        let a = this.mulScalar(1 - pct);\r\n        b = b.mulScalar(pct);\r\n        return a.add(b);\r\n    }\r\n    set(r, g, b) {\r\n        this.r = r;\r\n        this.g = g;\r\n        this.b = b;\r\n        return this;\r\n    }\r\n    clone() {\r\n        return new Color(this.r, this.g, this.b);\r\n    }\r\n    static random() {\r\n        return new Color(Math.random(), Math.random(), Math.random());\r\n    }\r\n    static randomBrightColor() {\r\n        var i = Math.round(Math.random() * Color.brightColors.length);\r\n        return Color.brightColors[i];\r\n    }\r\n}\r\nColor.SIZE = 3;\r\nColor.brightColors = [\r\n    Color.hexColor(0xFF00FF),\r\n    Color.hexColor(0x84FF00),\r\n    Color.hexColor(0xFF0084),\r\n    Color.hexColor(0x00FFFF),\r\n    Color.hexColor(0x00FF84),\r\n    Color.hexColor(0xDD40FF),\r\n    Color.hexColor(0xFFFF00)\r\n];\r\nexports.Color = Color;\r\n"
    },
    {
      "id": 3,
      "identifier": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-core\\src\\engine\\math\\Hit.ts",
      "name": "./packages/render-core/src/engine/math/Hit.ts",
      "index": 19,
      "index2": 14,
      "size": 1118,
      "cacheable": true,
      "built": false,
      "optional": false,
      "prefetched": false,
      "chunks": [
        0
      ],
      "assets": [],
      "issuer": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-core\\src\\engine\\scene\\shapes\\Cube.ts",
      "issuerId": 16,
      "issuerName": "./packages/render-core/src/engine/scene/shapes/Cube.ts",
      "failed": false,
      "errors": 0,
      "warnings": 0,
      "reasons": [
        {
          "moduleId": 11,
          "moduleIdentifier": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-core\\src\\engine\\scene\\shapes\\Triangle.ts",
          "module": "./packages/render-core/src/engine/scene/shapes/Triangle.ts",
          "moduleName": "./packages/render-core/src/engine/scene/shapes/Triangle.ts",
          "type": "cjs require",
          "userRequest": "../../math/Hit",
          "loc": "6:14-39"
        },
        {
          "moduleId": 11,
          "moduleIdentifier": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-core\\src\\engine\\scene\\shapes\\Triangle.ts",
          "module": "./packages/render-core/src/engine/scene/shapes/Triangle.ts",
          "moduleName": "./packages/render-core/src/engine/scene/shapes/Triangle.ts",
          "type": "cjs require",
          "userRequest": "../../math/Hit",
          "loc": "8:14-39"
        },
        {
          "moduleId": 16,
          "moduleIdentifier": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-core\\src\\engine\\scene\\shapes\\Cube.ts",
          "module": "./packages/render-core/src/engine/scene/shapes/Cube.ts",
          "moduleName": "./packages/render-core/src/engine/scene/shapes/Cube.ts",
          "type": "cjs require",
          "userRequest": "../../math/Hit",
          "loc": "7:14-39"
        },
        {
          "moduleId": 16,
          "moduleIdentifier": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-core\\src\\engine\\scene\\shapes\\Cube.ts",
          "module": "./packages/render-core/src/engine/scene/shapes/Cube.ts",
          "moduleName": "./packages/render-core/src/engine/scene/shapes/Cube.ts",
          "type": "cjs require",
          "userRequest": "../../math/Hit",
          "loc": "8:14-39"
        },
        {
          "moduleId": 18,
          "moduleIdentifier": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-core\\src\\engine\\scene\\shapes\\Sphere.ts",
          "module": "./packages/render-core/src/engine/scene/shapes/Sphere.ts",
          "moduleName": "./packages/render-core/src/engine/scene/shapes/Sphere.ts",
          "type": "cjs require",
          "userRequest": "../../math/Hit",
          "loc": "6:14-39"
        },
        {
          "moduleId": 18,
          "moduleIdentifier": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-core\\src\\engine\\scene\\shapes\\Sphere.ts",
          "module": "./packages/render-core/src/engine/scene/shapes/Sphere.ts",
          "moduleName": "./packages/render-core/src/engine/scene/shapes/Sphere.ts",
          "type": "cjs require",
          "userRequest": "../../math/Hit",
          "loc": "7:14-39"
        },
        {
          "moduleId": 26,
          "moduleIdentifier": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-core\\src\\engine\\scene\\tree\\Tree.ts",
          "module": "./packages/render-core/src/engine/scene/tree/Tree.ts",
          "moduleName": "./packages/render-core/src/engine/scene/tree/Tree.ts",
          "type": "cjs require",
          "userRequest": "../../math/Hit",
          "loc": "5:14-39"
        },
        {
          "moduleId": 29,
          "moduleIdentifier": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-core\\src\\engine\\scene\\tree\\SharedTree.ts",
          "module": "./packages/render-core/src/engine/scene/tree/SharedTree.ts",
          "moduleName": "./packages/render-core/src/engine/scene/tree/SharedTree.ts",
          "type": "cjs require",
          "userRequest": "../../math/Hit",
          "loc": "4:14-39"
        },
        {
          "moduleId": 30,
          "moduleIdentifier": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-core\\src\\engine\\scene\\tree\\SharedNode.ts",
          "module": "./packages/render-core/src/engine/scene/tree/SharedNode.ts",
          "moduleName": "./packages/render-core/src/engine/scene/tree/SharedNode.ts",
          "type": "cjs require",
          "userRequest": "../../math/Hit",
          "loc": "4:14-39"
        },
        {
          "moduleId": 42,
          "moduleIdentifier": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-core\\src\\engine\\scene\\tree\\Node.ts",
          "module": "./packages/render-core/src/engine/scene/tree/Node.ts",
          "moduleName": "./packages/render-core/src/engine/scene/tree/Node.ts",
          "type": "cjs require",
          "userRequest": "../../math/Hit",
          "loc": "4:14-39"
        }
      ],
      "usedExports": true,
      "providedExports": null,
      "optimizationBailout": [],
      "depth": 3,
      "source": "\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst Constants_1 = require(\"./Constants\");\r\nconst HitInfo_1 = require(\"./HitInfo\");\r\nconst Ray_1 = require(\"./Ray\");\r\nclass Hit {\r\n    constructor(shape, T, info) {\r\n        this.shape = shape;\r\n        this.T = T;\r\n        this.info = info;\r\n    }\r\n    ok() {\r\n        return this.T < Constants_1.INF;\r\n    }\r\n    getInfo(ray) {\r\n        if (this.info) {\r\n            return this.info;\r\n        }\r\n        let shape = this.shape;\r\n        let position = ray.position(this.T);\r\n        let normal = shape.getNormal(position);\r\n        let color = shape.getColor(position);\r\n        let material = shape.getMaterial(position);\r\n        let inside = false;\r\n        if (normal.dot(ray.direction) > 0) {\r\n            normal = normal.mulScalar(-1);\r\n            inside = true;\r\n        }\r\n        ray = new Ray_1.Ray(position, normal);\r\n        this.info = new HitInfo_1.HitInfo(shape, position, normal, ray, color, material, inside);\r\n        return this.info;\r\n    }\r\n}\r\nexports.Hit = Hit;\r\nexports.NoHit = new Hit(null, Constants_1.INF);\r\n"
    },
    {
      "id": 4,
      "identifier": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-core\\src\\engine\\scene\\materials\\Attenuation.ts",
      "name": "./packages/render-core/src/engine/scene/materials/Attenuation.ts",
      "index": 29,
      "index2": 22,
      "size": 2105,
      "cacheable": true,
      "built": false,
      "optional": false,
      "prefetched": false,
      "chunks": [
        0
      ],
      "assets": [],
      "issuer": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-core\\src\\engine\\scene\\materials\\Material.ts",
      "issuerId": 0,
      "issuerName": "./packages/render-core/src/engine/scene/materials/Material.ts",
      "failed": false,
      "errors": 0,
      "warnings": 0,
      "reasons": [
        {
          "moduleId": 0,
          "moduleIdentifier": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-core\\src\\engine\\scene\\materials\\Material.ts",
          "module": "./packages/render-core/src/engine/scene/materials/Material.ts",
          "moduleName": "./packages/render-core/src/engine/scene/materials/Material.ts",
          "type": "cjs require",
          "userRequest": "./Attenuation",
          "loc": "5:22-46"
        },
        {
          "moduleId": 0,
          "moduleIdentifier": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-core\\src\\engine\\scene\\materials\\Material.ts",
          "module": "./packages/render-core/src/engine/scene/materials/Material.ts",
          "moduleName": "./packages/render-core/src/engine/scene/materials/Material.ts",
          "type": "cjs require",
          "userRequest": "./Attenuation",
          "loc": "6:22-46"
        },
        {
          "moduleId": 17,
          "moduleIdentifier": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-core\\src\\engine\\scene\\materials\\MaterialUtils.ts",
          "module": "./packages/render-core/src/engine/scene/materials/MaterialUtils.ts",
          "moduleName": "./packages/render-core/src/engine/scene/materials/MaterialUtils.ts",
          "type": "cjs require",
          "userRequest": "./Attenuation",
          "loc": "7:22-46"
        },
        {
          "moduleId": 45,
          "moduleIdentifier": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-core\\src\\engine\\scene\\materials\\DiffuseMaterial.ts",
          "module": "./packages/render-core/src/engine/scene/materials/DiffuseMaterial.ts",
          "moduleName": "./packages/render-core/src/engine/scene/materials/DiffuseMaterial.ts",
          "type": "cjs require",
          "userRequest": "./Attenuation",
          "loc": "4:22-46"
        },
        {
          "moduleId": 46,
          "moduleIdentifier": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-core\\src\\engine\\scene\\materials\\SpecularMaterial.ts",
          "module": "./packages/render-core/src/engine/scene/materials/SpecularMaterial.ts",
          "moduleName": "./packages/render-core/src/engine/scene/materials/SpecularMaterial.ts",
          "type": "cjs require",
          "userRequest": "./Attenuation",
          "loc": "4:22-46"
        },
        {
          "moduleId": 47,
          "moduleIdentifier": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-core\\src\\engine\\scene\\materials\\ClearMaterial.ts",
          "module": "./packages/render-core/src/engine/scene/materials/ClearMaterial.ts",
          "moduleName": "./packages/render-core/src/engine/scene/materials/ClearMaterial.ts",
          "type": "cjs require",
          "userRequest": "./Attenuation",
          "loc": "5:22-46"
        },
        {
          "moduleId": 48,
          "moduleIdentifier": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-core\\src\\engine\\scene\\materials\\GlossyMaterial.ts",
          "module": "./packages/render-core/src/engine/scene/materials/GlossyMaterial.ts",
          "moduleName": "./packages/render-core/src/engine/scene/materials/GlossyMaterial.ts",
          "type": "cjs require",
          "userRequest": "./Attenuation",
          "loc": "4:22-46"
        },
        {
          "moduleId": 52,
          "moduleIdentifier": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-client\\src\\views\\GIJSView.ts",
          "module": "./packages/render-client/src/views/GIJSView.ts",
          "moduleName": "./packages/render-client/src/views/GIJSView.ts",
          "type": "cjs require",
          "userRequest": "../../../render-core/src/engine/scene/materials/Attenuation",
          "loc": "16:22-92"
        },
        {
          "moduleId": 52,
          "moduleIdentifier": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-client\\src\\views\\GIJSView.ts",
          "module": "./packages/render-client/src/views/GIJSView.ts",
          "moduleName": "./packages/render-client/src/views/GIJSView.ts",
          "type": "cjs require",
          "userRequest": "../../../render-core/src/engine/scene/materials/Attenuation",
          "loc": "17:22-92"
        }
      ],
      "usedExports": true,
      "providedExports": null,
      "optimizationBailout": [],
      "depth": 2,
      "source": "\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nclass Attenuation {\r\n    constructor(constant = 1, linear = 0, quadratic = 0) {\r\n        this.constant = constant;\r\n        this.linear = linear;\r\n        this.quadratic = quadratic;\r\n    }\r\n    static fromJson(attenuation) {\r\n        if (!attenuation) {\r\n            return exports.NoAttenuation;\r\n        }\r\n        else {\r\n            return new Attenuation(attenuation.constant, attenuation.linear, attenuation.quadratic);\r\n        }\r\n    }\r\n    compute(d) {\r\n        return 1 / (this.constant + this.linear * d + this.quadratic * d * d);\r\n    }\r\n    set(attenation) {\r\n        this.constant = attenation.constant;\r\n        this.linear = attenation.linear;\r\n        this.quadratic = attenation.quadratic;\r\n        return this;\r\n    }\r\n    clone() {\r\n        return new Attenuation(this.constant, this.linear, this.quadratic);\r\n    }\r\n    directWrite(mem, offset) {\r\n        mem[offset++] = this.constant;\r\n        mem[offset++] = this.linear;\r\n        mem[offset++] = this.quadratic;\r\n        return offset;\r\n    }\r\n    directRead(mem, offset) {\r\n        this.constant = mem[offset++];\r\n        this.linear = mem[offset++];\r\n        this.quadratic = mem[offset++];\r\n        return offset;\r\n    }\r\n    read(memory) {\r\n        this.constant = memory.readFloat();\r\n        this.linear = memory.readFloat();\r\n        this.quadratic = memory.readFloat();\r\n        return memory.position;\r\n    }\r\n    write(memory) {\r\n        memory.writeFloat(this.constant);\r\n        memory.writeFloat(this.linear);\r\n        memory.writeFloat(this.quadratic);\r\n        return memory.position;\r\n    }\r\n}\r\nAttenuation.SIZE = 3;\r\nexports.Attenuation = Attenuation;\r\nexports.NoAttenuation = new Attenuation(1, 0, 0);\r\nclass LinearAttenuation extends Attenuation {\r\n    constructor(value) {\r\n        super(1, value, 0);\r\n    }\r\n}\r\nexports.LinearAttenuation = LinearAttenuation;\r\nclass QuadraticAttenuation extends Attenuation {\r\n    constructor(value) {\r\n        super(1, 0, value);\r\n    }\r\n}\r\nexports.QuadraticAttenuation = QuadraticAttenuation;\r\n"
    },
    {
      "id": 5,
      "identifier": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-core\\src\\engine\\scene\\shapes\\Box.ts",
      "name": "./packages/render-core/src/engine/scene/shapes/Box.ts",
      "index": 16,
      "index2": 12,
      "size": 3607,
      "cacheable": true,
      "built": true,
      "optional": false,
      "prefetched": false,
      "chunks": [
        0
      ],
      "assets": [],
      "issuer": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-core\\src\\engine\\scene\\SharedScene.ts",
      "issuerId": 25,
      "issuerName": "./packages/render-core/src/engine/scene/SharedScene.ts",
      "failed": false,
      "errors": 1,
      "warnings": 0,
      "reasons": [
        {
          "moduleId": 11,
          "moduleIdentifier": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-core\\src\\engine\\scene\\shapes\\Triangle.ts",
          "module": "./packages/render-core/src/engine/scene/shapes/Triangle.ts",
          "moduleName": "./packages/render-core/src/engine/scene/shapes/Triangle.ts",
          "type": "cjs require",
          "userRequest": "./Box",
          "loc": "4:14-30"
        },
        {
          "moduleId": 12,
          "moduleIdentifier": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-core\\src\\engine\\math\\Matrix4.ts",
          "module": "./packages/render-core/src/engine/math/Matrix4.ts",
          "moduleName": "./packages/render-core/src/engine/math/Matrix4.ts",
          "type": "cjs require",
          "userRequest": "../scene/shapes/Box",
          "loc": "4:14-44"
        },
        {
          "moduleId": 16,
          "moduleIdentifier": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-core\\src\\engine\\scene\\shapes\\Cube.ts",
          "module": "./packages/render-core/src/engine/scene/shapes/Cube.ts",
          "moduleName": "./packages/render-core/src/engine/scene/shapes/Cube.ts",
          "type": "cjs require",
          "userRequest": "./Box",
          "loc": "5:14-30"
        },
        {
          "moduleId": 18,
          "moduleIdentifier": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-core\\src\\engine\\scene\\shapes\\Sphere.ts",
          "module": "./packages/render-core/src/engine/scene/shapes/Sphere.ts",
          "moduleName": "./packages/render-core/src/engine/scene/shapes/Sphere.ts",
          "type": "cjs require",
          "userRequest": "./Box",
          "loc": "5:14-30"
        },
        {
          "moduleId": 19,
          "moduleIdentifier": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-core\\src\\engine\\scene\\shapes\\Mesh.ts",
          "module": "./packages/render-core/src/engine/scene/shapes/Mesh.ts",
          "moduleName": "./packages/render-core/src/engine/scene/shapes/Mesh.ts",
          "type": "cjs require",
          "userRequest": "./Box",
          "loc": "9:14-30"
        },
        {
          "moduleId": 25,
          "moduleIdentifier": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-core\\src\\engine\\scene\\SharedScene.ts",
          "module": "./packages/render-core/src/engine/scene/SharedScene.ts",
          "moduleName": "./packages/render-core/src/engine/scene/SharedScene.ts",
          "type": "cjs require",
          "userRequest": "./shapes/Box",
          "loc": "9:14-37"
        },
        {
          "moduleId": 26,
          "moduleIdentifier": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-core\\src\\engine\\scene\\tree\\Tree.ts",
          "module": "./packages/render-core/src/engine/scene/tree/Tree.ts",
          "moduleName": "./packages/render-core/src/engine/scene/tree/Tree.ts",
          "type": "cjs require",
          "userRequest": "../shapes/Box",
          "loc": "3:14-38"
        },
        {
          "moduleId": 29,
          "moduleIdentifier": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-core\\src\\engine\\scene\\tree\\SharedTree.ts",
          "module": "./packages/render-core/src/engine/scene/tree/SharedTree.ts",
          "moduleName": "./packages/render-core/src/engine/scene/tree/SharedTree.ts",
          "type": "cjs require",
          "userRequest": "../shapes/Box",
          "loc": "3:14-38"
        }
      ],
      "usedExports": true,
      "providedExports": null,
      "optimizationBailout": [],
      "depth": 3,
      "source": "\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst Vector3_1 = require(\"../../math/Vector3\");\r\nconst Axis_1 = require(\"../Axis\");\r\nclass Box {\r\n    constructor(min = new Vector3_1.Vector3(), max = new Vector3_1.Vector3()) {\r\n        this.min = min;\r\n        this.max = max;\r\n        this.memorySize = Box.SIZE;\r\n    }\r\n    directWrite(memory, offset) {\r\n        offset = this.min.directWrite(memory, offset);\r\n        offset = this.max.directWrite(memory, offset);\r\n        return offset;\r\n    }\r\n    directRead(memory, offset) {\r\n        offset = this.min.directRead(memory, offset);\r\n        offset = this.max.directRead(memory, offset);\r\n        return offset;\r\n    }\r\n    read(memory) {\r\n        this.min.read(memory);\r\n        this.max.read(memory);\r\n        return memory.position;\r\n    }\r\n    write(memory) {\r\n        this.min.write(memory);\r\n        this.max.write(memory);\r\n        return memory.position;\r\n    }\r\n    static fromJson(box) {\r\n        return new Box(Vector3_1.Vector3.fromJson(box.min), Vector3_1.Vector3.fromJson(box.max));\r\n    }\r\n    static boxForShapes(shapes) {\r\n        if (shapes.length == 0) {\r\n            return new Box();\r\n        }\r\n        var box = shapes[0].box;\r\n        shapes.forEach(function (shape) {\r\n            box = box.extend(shape.box);\r\n        });\r\n        return box;\r\n    }\r\n    static boxForTriangles(shapes) {\r\n        if (shapes.length == 0) {\r\n            return new Box();\r\n        }\r\n        var box = shapes[0].box;\r\n        shapes.forEach(function (shape) {\r\n            box = box.extend(shape.box);\r\n        });\r\n        return box;\r\n    }\r\n    anchor(anchor) {\r\n        return this.min.add(this.size().mul(anchor));\r\n    }\r\n    center() {\r\n        return this.anchor(new Vector3_1.Vector3(0.5, 0.5, 0.5));\r\n    }\r\n    size() {\r\n        return this.max.sub(this.min);\r\n    }\r\n    extend(b) {\r\n        return new Box(this.min.min(b.min), this.max.max(b.max));\r\n    }\r\n    intersect(r) {\r\n        var x1 = (this.min.x - r.origin.x) / r.direction.x;\r\n        var y1 = (this.min.y - r.origin.y) / r.direction.y;\r\n        var z1 = (this.min.z - r.origin.z) / r.direction.z;\r\n        var x2 = (this.max.x - r.origin.x) / r.direction.x;\r\n        var y2 = (this.max.y - r.origin.y) / r.direction.y;\r\n        var z2 = (this.max.z - r.origin.z) / r.direction.z;\r\n        if (x1 > x2) {\r\n            let _x1 = x1;\r\n            x1 = x2;\r\n            x2 = _x1;\r\n        }\r\n        if (y1 > y2) {\r\n            let _y1 = y1;\r\n            y1 = y2;\r\n            y2 = _y1;\r\n        }\r\n        if (z1 > z2) {\r\n            let _z1 = z1;\r\n            z1 = z2;\r\n            z2 = _z1;\r\n        }\r\n        var t1 = Math.max(Math.max(x1, y1), z1);\r\n        var t2 = Math.min(Math.min(x2, y2), z2);\r\n        return { min: t1, max: t2 };\r\n    }\r\n    partition(axis, point) {\r\n        var left;\r\n        var right;\r\n        switch (axis) {\r\n            case Axis_1.Axis.AxisX:\r\n                left = this.min.x <= point;\r\n                right = this.max.x >= point;\r\n                break;\r\n            case Axis_1.Axis.AxisY:\r\n                left = this.min.y <= point;\r\n                right = this.max.y >= point;\r\n                break;\r\n            case Axis_1.Axis.AxisZ:\r\n                left = this.min.z <= point;\r\n                right = this.max.z >= point;\r\n                break;\r\n        }\r\n        return { left: left, right: right };\r\n    }\r\n    toString() {\r\n        return \"Box(min:\" + this.min.toString() + \", max:\" + this.max.toString() + \")\";\r\n    }\r\n}\r\nBox.SIZE = Vector3_1.Vector3.SIZE * 2;\r\nexports.Box = Box;\r\n"
    },
    {
      "id": 6,
      "identifier": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-core\\src\\engine\\scene\\shapes\\Shape.ts",
      "name": "./packages/render-core/src/engine/scene/shapes/Shape.ts",
      "index": 23,
      "index2": 39,
      "size": 3749,
      "cacheable": true,
      "built": true,
      "optional": false,
      "prefetched": false,
      "chunks": [
        0
      ],
      "assets": [],
      "issuer": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-core\\src\\engine\\scene\\SharedScene.ts",
      "issuerId": 25,
      "issuerName": "./packages/render-core/src/engine/scene/SharedScene.ts",
      "failed": false,
      "errors": 28,
      "warnings": 0,
      "reasons": [
        {
          "moduleId": 11,
          "moduleIdentifier": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-core\\src\\engine\\scene\\shapes\\Triangle.ts",
          "module": "./packages/render-core/src/engine/scene/shapes/Triangle.ts",
          "moduleName": "./packages/render-core/src/engine/scene/shapes/Triangle.ts",
          "type": "cjs require",
          "userRequest": "./Shape",
          "loc": "10:16-34"
        },
        {
          "moduleId": 16,
          "moduleIdentifier": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-core\\src\\engine\\scene\\shapes\\Cube.ts",
          "module": "./packages/render-core/src/engine/scene/shapes/Cube.ts",
          "moduleName": "./packages/render-core/src/engine/scene/shapes/Cube.ts",
          "type": "cjs require",
          "userRequest": "./Shape",
          "loc": "9:16-34"
        },
        {
          "moduleId": 18,
          "moduleIdentifier": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-core\\src\\engine\\scene\\shapes\\Sphere.ts",
          "module": "./packages/render-core/src/engine/scene/shapes/Sphere.ts",
          "moduleName": "./packages/render-core/src/engine/scene/shapes/Sphere.ts",
          "type": "cjs require",
          "userRequest": "./Shape",
          "loc": "8:16-34"
        },
        {
          "moduleId": 19,
          "moduleIdentifier": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-core\\src\\engine\\scene\\shapes\\Mesh.ts",
          "module": "./packages/render-core/src/engine/scene/shapes/Mesh.ts",
          "moduleName": "./packages/render-core/src/engine/scene/shapes/Mesh.ts",
          "type": "cjs require",
          "userRequest": "./Shape",
          "loc": "10:16-34"
        },
        {
          "moduleId": 21,
          "moduleIdentifier": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-core\\src\\engine\\scene\\shapes\\TransformedShape.ts",
          "module": "./packages/render-core/src/engine/scene/shapes/TransformedShape.ts",
          "moduleName": "./packages/render-core/src/engine/scene/shapes/TransformedShape.ts",
          "type": "cjs require",
          "userRequest": "./Shape",
          "loc": "4:16-34"
        },
        {
          "moduleId": 25,
          "moduleIdentifier": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-core\\src\\engine\\scene\\SharedScene.ts",
          "module": "./packages/render-core/src/engine/scene/SharedScene.ts",
          "moduleName": "./packages/render-core/src/engine/scene/SharedScene.ts",
          "type": "cjs require",
          "userRequest": "./shapes/Shape",
          "loc": "6:16-41"
        },
        {
          "moduleId": 41,
          "moduleIdentifier": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-core\\src\\engine\\scene\\Scene.ts",
          "module": "./packages/render-core/src/engine/scene/Scene.ts",
          "moduleName": "./packages/render-core/src/engine/scene/Scene.ts",
          "type": "cjs require",
          "userRequest": "./shapes/Shape",
          "loc": "8:16-41"
        }
      ],
      "usedExports": true,
      "providedExports": null,
      "optimizationBailout": [],
      "depth": 3,
      "source": "\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst Cube_1 = require(\"./Cube\");\r\nconst Sphere_1 = require(\"./Sphere\");\r\nconst Mesh_1 = require(\"./Mesh\");\r\nconst Triangle_1 = require(\"./Triangle\");\r\nconst TransformedShape_1 = require(\"./TransformedShape\");\r\nvar ShapeType;\r\n(function (ShapeType) {\r\n    ShapeType[ShapeType[\"TRIANGLE\"] = 0] = \"TRIANGLE\";\r\n    ShapeType[ShapeType[\"CUBE\"] = 1] = \"CUBE\";\r\n    ShapeType[ShapeType[\"SPHERE\"] = 2] = \"SPHERE\";\r\n    ShapeType[ShapeType[\"MESH\"] = 3] = \"MESH\";\r\n    ShapeType[ShapeType[\"TRANSFORMED_SHAPE\"] = 4] = \"TRANSFORMED_SHAPE\";\r\n})(ShapeType = exports.ShapeType || (exports.ShapeType = {}));\r\nfunction ShapesfromJson(shapes) {\r\n    var _shapes = [];\r\n    shapes.forEach(function (shape) {\r\n        switch (shape.type) {\r\n            case ShapeType.CUBE:\r\n                _shapes.push(Cube_1.Cube.fromJson(shape));\r\n                break;\r\n            case ShapeType.SPHERE:\r\n                _shapes.push(Sphere_1.Sphere.fromJson(shape));\r\n                break;\r\n            case ShapeType.MESH:\r\n                _shapes.push(Mesh_1.Mesh.fromJson(shape));\r\n                break;\r\n            case ShapeType.TRANSFORMED_SHAPE:\r\n                _shapes.push(TransformedShape_1.TransformedShape.fromJson(shape));\r\n                break;\r\n            case ShapeType.TRIANGLE:\r\n                _shapes.push(Triangle_1.Triangle.fromJson(shape));\r\n                break;\r\n        }\r\n    });\r\n    return _shapes;\r\n}\r\nexports.ShapesfromJson = ShapesfromJson;\r\nfunction ShapefromJson(shape) {\r\n    switch (shape.type) {\r\n        case ShapeType.CUBE:\r\n            return Cube_1.Cube.fromJson(shape);\r\n        case ShapeType.SPHERE:\r\n            return Sphere_1.Sphere.fromJson(shape);\r\n        case ShapeType.MESH:\r\n            return Mesh_1.Mesh.fromJson(shape);\r\n        case ShapeType.TRANSFORMED_SHAPE:\r\n            return TransformedShape_1.TransformedShape.fromJson(shape);\r\n        case ShapeType.TRIANGLE:\r\n            return Triangle_1.Triangle.fromJson(shape);\r\n    }\r\n}\r\nexports.ShapefromJson = ShapefromJson;\r\nfunction directRestoreShape(memory, offset, container) {\r\n    var type = memory[offset++];\r\n    switch (type) {\r\n        case ShapeType.CUBE:\r\n            var cube = new Cube_1.Cube();\r\n            container.push(cube);\r\n            return cube.directRead(memory, offset);\r\n        case ShapeType.SPHERE:\r\n            var sphere = new Sphere_1.Sphere();\r\n            container.push(sphere);\r\n            return sphere.directRead(memory, offset);\r\n        case ShapeType.MESH:\r\n            var mesh = new Mesh_1.Mesh();\r\n            container.push(mesh);\r\n            return mesh.directRead(memory, offset);\r\n        case ShapeType.TRANSFORMED_SHAPE:\r\n            var shape = new TransformedShape_1.TransformedShape();\r\n            container.push(shape);\r\n            return shape.directRead(memory, offset);\r\n    }\r\n}\r\nexports.directRestoreShape = directRestoreShape;\r\nfunction restoreShape(memory, container) {\r\n    var type = memory.readByte();\r\n    switch (type) {\r\n        case ShapeType.CUBE:\r\n            var cube = new Cube_1.Cube();\r\n            container.push(cube);\r\n            return cube.read(memory);\r\n        case ShapeType.SPHERE:\r\n            var sphere = new Sphere_1.Sphere();\r\n            container.push(sphere);\r\n            return sphere.read(memory);\r\n        case ShapeType.MESH:\r\n            var mesh = new Mesh_1.Mesh();\r\n            container.push(mesh);\r\n            return mesh.read(memory);\r\n        case ShapeType.TRANSFORMED_SHAPE:\r\n            var shape = new TransformedShape_1.TransformedShape();\r\n            container.push(shape);\r\n            return shape.read(memory);\r\n    }\r\n}\r\nexports.restoreShape = restoreShape;\r\n"
    },
    {
      "id": 7,
      "identifier": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-core\\src\\engine\\utils\\MapUtils.ts",
      "name": "./packages/render-core/src/engine/utils/MapUtils.ts",
      "index": 21,
      "index2": 15,
      "size": 580,
      "cacheable": true,
      "built": false,
      "optional": false,
      "prefetched": false,
      "chunks": [
        0
      ],
      "assets": [],
      "issuer": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-core\\src\\engine\\scene\\Scene.ts",
      "issuerId": 41,
      "issuerName": "./packages/render-core/src/engine/scene/Scene.ts",
      "failed": false,
      "errors": 0,
      "warnings": 0,
      "reasons": [
        {
          "moduleId": 19,
          "moduleIdentifier": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-core\\src\\engine\\scene\\shapes\\Mesh.ts",
          "module": "./packages/render-core/src/engine/scene/shapes/Mesh.ts",
          "moduleName": "./packages/render-core/src/engine/scene/shapes/Mesh.ts",
          "type": "cjs require",
          "userRequest": "../../utils/MapUtils",
          "loc": "7:19-50"
        },
        {
          "moduleId": 30,
          "moduleIdentifier": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-core\\src\\engine\\scene\\tree\\SharedNode.ts",
          "module": "./packages/render-core/src/engine/scene/tree/SharedNode.ts",
          "moduleName": "./packages/render-core/src/engine/scene/tree/SharedNode.ts",
          "type": "cjs require",
          "userRequest": "../../utils/MapUtils",
          "loc": "5:19-50"
        },
        {
          "moduleId": 30,
          "moduleIdentifier": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-core\\src\\engine\\scene\\tree\\SharedNode.ts",
          "module": "./packages/render-core/src/engine/scene/tree/SharedNode.ts",
          "moduleName": "./packages/render-core/src/engine/scene/tree/SharedNode.ts",
          "type": "cjs require",
          "userRequest": "../../utils/MapUtils",
          "loc": "6:19-50"
        },
        {
          "moduleId": 41,
          "moduleIdentifier": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-core\\src\\engine\\scene\\Scene.ts",
          "module": "./packages/render-core/src/engine/scene/Scene.ts",
          "moduleName": "./packages/render-core/src/engine/scene/Scene.ts",
          "type": "cjs require",
          "userRequest": "../utils/MapUtils",
          "loc": "5:19-47"
        },
        {
          "moduleId": 42,
          "moduleIdentifier": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-core\\src\\engine\\scene\\tree\\Node.ts",
          "module": "./packages/render-core/src/engine/scene/tree/Node.ts",
          "moduleName": "./packages/render-core/src/engine/scene/tree/Node.ts",
          "type": "cjs require",
          "userRequest": "../../utils/MapUtils",
          "loc": "5:19-50"
        },
        {
          "moduleId": 42,
          "moduleIdentifier": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-core\\src\\engine\\scene\\tree\\Node.ts",
          "module": "./packages/render-core/src/engine/scene/tree/Node.ts",
          "moduleName": "./packages/render-core/src/engine/scene/tree/Node.ts",
          "type": "cjs require",
          "userRequest": "../../utils/MapUtils",
          "loc": "6:19-50"
        }
      ],
      "usedExports": true,
      "providedExports": null,
      "optimizationBailout": [],
      "depth": 3,
      "source": "\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nfunction append(slice, ...elements) {\r\n    if (slice == undefined) {\r\n        return elements;\r\n    }\r\n    else {\r\n        slice.push.apply(slice, elements);\r\n    }\r\n    return slice;\r\n}\r\nexports.append = append;\r\nfunction sortAscending(slice) {\r\n    slice.sort(function (a, b) {\r\n        return a - b;\r\n    });\r\n}\r\nexports.sortAscending = sortAscending;\r\nfunction sortDescending(slice) {\r\n    slice.sort(function (a, b) {\r\n        return b - a;\r\n    });\r\n}\r\nexports.sortDescending = sortDescending;\r\n"
    },
    {
      "id": 8,
      "identifier": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-core\\src\\engine\\math\\Ray.ts",
      "name": "./packages/render-core/src/engine/math/Ray.ts",
      "index": 11,
      "index2": 9,
      "size": 3012,
      "cacheable": true,
      "built": false,
      "optional": false,
      "prefetched": false,
      "chunks": [
        0
      ],
      "assets": [],
      "issuer": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-core\\src\\engine\\scene\\Camera.ts",
      "issuerId": 24,
      "issuerName": "./packages/render-core/src/engine/scene/Camera.ts",
      "failed": false,
      "errors": 0,
      "warnings": 0,
      "reasons": [
        {
          "moduleId": 3,
          "moduleIdentifier": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-core\\src\\engine\\math\\Hit.ts",
          "module": "./packages/render-core/src/engine/math/Hit.ts",
          "moduleName": "./packages/render-core/src/engine/math/Hit.ts",
          "type": "cjs require",
          "userRequest": "./Ray",
          "loc": "5:14-30"
        },
        {
          "moduleId": 12,
          "moduleIdentifier": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-core\\src\\engine\\math\\Matrix4.ts",
          "module": "./packages/render-core/src/engine/math/Matrix4.ts",
          "moduleName": "./packages/render-core/src/engine/math/Matrix4.ts",
          "type": "cjs require",
          "userRequest": "./Ray",
          "loc": "5:14-30"
        },
        {
          "moduleId": 21,
          "moduleIdentifier": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-core\\src\\engine\\scene\\shapes\\TransformedShape.ts",
          "module": "./packages/render-core/src/engine/scene/shapes/TransformedShape.ts",
          "moduleName": "./packages/render-core/src/engine/scene/shapes/TransformedShape.ts",
          "type": "cjs require",
          "userRequest": "../../math/Ray",
          "loc": "3:14-39"
        },
        {
          "moduleId": 24,
          "moduleIdentifier": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-core\\src\\engine\\scene\\Camera.ts",
          "module": "./packages/render-core/src/engine/scene/Camera.ts",
          "moduleName": "./packages/render-core/src/engine/scene/Camera.ts",
          "type": "cjs require",
          "userRequest": "../math/Ray",
          "loc": "4:14-36"
        },
        {
          "moduleId": 41,
          "moduleIdentifier": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-core\\src\\engine\\scene\\Scene.ts",
          "module": "./packages/render-core/src/engine/scene/Scene.ts",
          "moduleName": "./packages/render-core/src/engine/scene/Scene.ts",
          "type": "cjs require",
          "userRequest": "../math/Ray",
          "loc": "7:14-36"
        }
      ],
      "usedExports": true,
      "providedExports": null,
      "optimizationBailout": [],
      "depth": 3,
      "source": "\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst Vector3_1 = require(\"./Vector3\");\r\nconst Constants_1 = require(\"./Constants\");\r\nclass Ray {\r\n    constructor(origin = new Vector3_1.Vector3(), direction = new Vector3_1.Vector3()) {\r\n        this.origin = origin;\r\n        this.direction = direction;\r\n        this.data = new Float32Array([\r\n            origin.x, origin.y, origin.z,\r\n            direction.x, direction.y, direction.z\r\n        ]);\r\n    }\r\n    position(t) {\r\n        return this.origin.add(this.direction.mulScalar(t));\r\n    }\r\n    reflect(i) {\r\n        return new Ray(this.origin, this.direction.reflect(i.direction));\r\n    }\r\n    Refract(i, n1, n2) {\r\n        return new Ray(this.origin, this.direction.refract(i.direction, n1, n2));\r\n    }\r\n    reflectance(i, n1, n2) {\r\n        return this.direction.reflectance(i.direction, n1, n2);\r\n    }\r\n    weightedBounce(u, v) {\r\n        var m1 = Math.sqrt(u);\r\n        var m2 = Math.sqrt(1 - u);\r\n        var a = v * 2 * Math.PI;\r\n        var q = new Vector3_1.Vector3(u - 0.5, v - 0.5, u + v - 1);\r\n        var s = this.direction.cross(q.normalize());\r\n        var t = this.direction.cross(s);\r\n        var d = new Vector3_1.Vector3();\r\n        d = d.add(s.mulScalar(m1 * Math.cos(a)));\r\n        d = d.add(t.mulScalar(m1 * Math.sin(a)));\r\n        d = d.add(this.direction.mulScalar(m2));\r\n        return new Ray(this.origin, d);\r\n    }\r\n    coneBounce(theta, u, v) {\r\n        if (theta < Constants_1.EPS) {\r\n            return this;\r\n        }\r\n        theta = theta * (1 - (2 * Math.acos(u) / Math.PI));\r\n        var m1 = Math.sin(theta);\r\n        var m2 = Math.cos(theta);\r\n        var a = v * 2 * Math.PI;\r\n        var s = this.direction.cross(this.direction.minAxis());\r\n        var t = this.direction.cross(s);\r\n        var d = new Vector3_1.Vector3();\r\n        d = d.add(s.mulScalar(m1 * Math.cos(a)));\r\n        d = d.add(t.mulScalar(m1 * Math.sin(a)));\r\n        d = d.add(this.direction.mulScalar(m2));\r\n        return new Ray(this.origin, d);\r\n    }\r\n    bounce(info, p, u, v) {\r\n        var n = info.ray;\r\n        var n1 = 1.0;\r\n        var n2 = info.material.ior;\r\n        if (info.inside) {\r\n            var _n1 = n1;\r\n            n1 = n2;\r\n            n2 = _n1;\r\n        }\r\n        if (p < n.reflectance(this, n1, n2)) {\r\n            var reflected = n.reflect(this);\r\n            var ray = reflected.coneBounce(info.material.gloss, u, v);\r\n            return { ray: ray, reflected: true };\r\n        }\r\n        else if (info.material.transparent) {\r\n            var refracted = n.Refract(this, n1, n2);\r\n            var ray = refracted.coneBounce(info.material.gloss, u, v);\r\n            return { ray: ray, reflected: true };\r\n        }\r\n        else {\r\n            var ray = n.weightedBounce(u, v);\r\n            return { ray: ray, reflected: false };\r\n        }\r\n    }\r\n    toString() {\r\n        return \"Ray:\" + this.origin.toString() + \" -> \" + this.direction.toString();\r\n    }\r\n}\r\nexports.Ray = Ray;\r\n"
    },
    {
      "id": 9,
      "identifier": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-core\\src\\engine\\math\\Constants.ts",
      "name": "./packages/render-core/src/engine/math/Constants.ts",
      "index": 12,
      "index2": 8,
      "size": 309,
      "cacheable": true,
      "built": false,
      "optional": false,
      "prefetched": false,
      "chunks": [
        0
      ],
      "assets": [],
      "issuer": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-core\\src\\engine\\math\\Ray.ts",
      "issuerId": 8,
      "issuerName": "./packages/render-core/src/engine/math/Ray.ts",
      "failed": false,
      "errors": 0,
      "warnings": 0,
      "reasons": [
        {
          "moduleId": 3,
          "moduleIdentifier": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-core\\src\\engine\\math\\Hit.ts",
          "module": "./packages/render-core/src/engine/math/Hit.ts",
          "moduleName": "./packages/render-core/src/engine/math/Hit.ts",
          "type": "cjs require",
          "userRequest": "./Constants",
          "loc": "3:20-42"
        },
        {
          "moduleId": 8,
          "moduleIdentifier": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-core\\src\\engine\\math\\Ray.ts",
          "module": "./packages/render-core/src/engine/math/Ray.ts",
          "moduleName": "./packages/render-core/src/engine/math/Ray.ts",
          "type": "cjs require",
          "userRequest": "./Constants",
          "loc": "4:20-42"
        },
        {
          "moduleId": 11,
          "moduleIdentifier": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-core\\src\\engine\\scene\\shapes\\Triangle.ts",
          "module": "./packages/render-core/src/engine/scene/shapes/Triangle.ts",
          "moduleName": "./packages/render-core/src/engine/scene/shapes/Triangle.ts",
          "type": "cjs require",
          "userRequest": "../../math/Constants",
          "loc": "7:20-51"
        },
        {
          "moduleId": 16,
          "moduleIdentifier": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-core\\src\\engine\\scene\\shapes\\Cube.ts",
          "module": "./packages/render-core/src/engine/scene/shapes/Cube.ts",
          "moduleName": "./packages/render-core/src/engine/scene/shapes/Cube.ts",
          "type": "cjs require",
          "userRequest": "../../math/Constants",
          "loc": "6:20-51"
        }
      ],
      "usedExports": true,
      "providedExports": null,
      "optimizationBailout": [],
      "depth": 3,
      "source": "\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.INF = 1e9;\r\nexports.EPS = 1e-9;\r\nexports.shift = 64 - 11 - 1;\r\nexports.uvnan = 0x7FF8000000000001;\r\nexports.uvinf = 0x7FF0000000000000;\r\nexports.uvneginf = 0xFFF0000000000000;\r\nexports.mask = 0x7FF;\r\nexports.bias = 1023;\r\n"
    },
    {
      "id": 10,
      "identifier": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-core\\src\\engine\\scene\\materials\\Texture.ts",
      "name": "./packages/render-core/src/engine/scene/materials/Texture.ts",
      "index": 26,
      "index2": 21,
      "size": 7199,
      "cacheable": true,
      "built": false,
      "optional": false,
      "prefetched": false,
      "chunks": [
        0
      ],
      "assets": [],
      "issuer": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-core\\src\\engine\\scene\\SharedScene.ts",
      "issuerId": 25,
      "issuerName": "./packages/render-core/src/engine/scene/SharedScene.ts",
      "failed": false,
      "errors": 3,
      "warnings": 0,
      "reasons": [
        {
          "moduleId": 0,
          "moduleIdentifier": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-core\\src\\engine\\scene\\materials\\Material.ts",
          "module": "./packages/render-core/src/engine/scene/materials/Material.ts",
          "moduleName": "./packages/render-core/src/engine/scene/materials/Material.ts",
          "type": "cjs require",
          "userRequest": "./Texture",
          "loc": "4:18-38"
        },
        {
          "moduleId": 17,
          "moduleIdentifier": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-core\\src\\engine\\scene\\materials\\MaterialUtils.ts",
          "module": "./packages/render-core/src/engine/scene/materials/MaterialUtils.ts",
          "moduleName": "./packages/render-core/src/engine/scene/materials/MaterialUtils.ts",
          "type": "cjs require",
          "userRequest": "./Texture",
          "loc": "6:18-38"
        },
        {
          "moduleId": 25,
          "moduleIdentifier": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-core\\src\\engine\\scene\\SharedScene.ts",
          "module": "./packages/render-core/src/engine/scene/SharedScene.ts",
          "moduleName": "./packages/render-core/src/engine/scene/SharedScene.ts",
          "type": "cjs require",
          "userRequest": "./materials/Texture",
          "loc": "11:18-48"
        },
        {
          "moduleId": 52,
          "moduleIdentifier": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-client\\src\\views\\GIJSView.ts",
          "module": "./packages/render-client/src/views/GIJSView.ts",
          "moduleName": "./packages/render-client/src/views/GIJSView.ts",
          "type": "cjs require",
          "userRequest": "../../../render-core/src/engine/scene/materials/Texture",
          "loc": "19:18-84"
        }
      ],
      "usedExports": true,
      "providedExports": null,
      "optimizationBailout": [],
      "depth": 2,
      "source": "\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst Color_1 = require(\"../../math/Color\");\r\nconst Vector3_1 = require(\"../../math/Vector3\");\r\nconst ImageLoader_1 = require(\"../../data/ImageLoader\");\r\nconst MathUtils_1 = require(\"../../utils/MathUtils\");\r\nclass Texture extends ImageLoader_1.ImageLoader {\r\n    constructor(arg) {\r\n        super();\r\n        try {\r\n            if (importScripts) {\r\n                return;\r\n            }\r\n        }\r\n        catch (e) {\r\n        }\r\n        if (!Texture.ctx) {\r\n            var canvas = document.createElement(\"canvas\");\r\n            canvas.width = 4096;\r\n            canvas.height = 4096;\r\n            Texture.ctx = canvas.getContext(\"2d\");\r\n        }\r\n        if (arg) {\r\n            if (typeof arg === \"string\") {\r\n                this.load(arg);\r\n            }\r\n            else if (arg instanceof HTMLImageElement) {\r\n                this.setImage(arg);\r\n            }\r\n        }\r\n    }\r\n    static getTexture(url) {\r\n        var texture = Texture.list[Texture.map.get(url)];\r\n        if (texture) {\r\n            return texture;\r\n        }\r\n        else {\r\n            return new Texture(url);\r\n        }\r\n    }\r\n    static setTexture(url, texture) {\r\n        texture.index = Texture.list.push(texture) - 1;\r\n        Texture.map.set(url, texture.index);\r\n        return texture;\r\n    }\r\n    static fromJson(texture) {\r\n        if (texture) {\r\n            var _texture = new Texture();\r\n            _texture.data = texture.data;\r\n            _texture.pixels = texture.pixels;\r\n            return _texture;\r\n        }\r\n        else {\r\n            return null;\r\n        }\r\n    }\r\n    read(memory) {\r\n        this.sourceFile = memory.readUTF();\r\n        this.width = memory.readUnsignedInt();\r\n        this.height = memory.readUnsignedInt();\r\n        this.data = [];\r\n        for (var i = 0; i < this.width * this.height; i++) {\r\n            var color = new Color_1.Color();\r\n            color.read(memory);\r\n            this.data.push(color);\r\n        }\r\n        Texture.setTexture(this.sourceFile, this);\r\n        return memory.position;\r\n    }\r\n    write(memory) {\r\n        memory.writeUTF(this.sourceFile);\r\n        memory.writeUnsignedInt(this.width);\r\n        memory.writeUnsignedInt(this.height);\r\n        for (var i = 0; i < this.width * this.height; i++) {\r\n            this.data[i].write(memory);\r\n        }\r\n        return memory.position;\r\n    }\r\n    bilinearSample(u, v) {\r\n        let w = this.width - 1;\r\n        let h = this.height - 1;\r\n        let Xx = MathUtils_1.MathUtils.Modf(u * w);\r\n        let Yy = MathUtils_1.MathUtils.Modf(v * h);\r\n        let X = Xx.int;\r\n        let x = Xx.frac;\r\n        let Y = Yy.int;\r\n        let y = Yy.frac;\r\n        let x0 = X;\r\n        let y0 = Y;\r\n        let x1 = x0 + 1;\r\n        let y1 = y0 + 1;\r\n        let i00 = y0 * this.width + x0;\r\n        let i01 = y1 * this.width + x0;\r\n        let i10 = y0 * this.width + x1;\r\n        let i11 = y1 * this.width + x1;\r\n        let c00 = this.data[i00 >= this.data.length ? this.data.length - 1 : i00];\r\n        let c01 = this.data[i01 >= this.data.length ? this.data.length - 1 : i01];\r\n        let c10 = this.data[i10 >= this.data.length ? this.data.length - 1 : i10];\r\n        let c11 = this.data[i11 >= this.data.length ? this.data.length - 1 : i11];\r\n        let c = new Color_1.Color();\r\n        c = c.add(c00.mulScalar((1 - x) * (1 - y)));\r\n        c = c.add(c10.mulScalar(x * (1 - y)));\r\n        c = c.add(c01.mulScalar((1 - x) * y));\r\n        c = c.add(c11.mulScalar(x * y));\r\n        if (c.isBlack()) {\r\n        }\r\n        return c;\r\n    }\r\n    sample(u, v) {\r\n        u = MathUtils_1.MathUtils.fract(MathUtils_1.MathUtils.fract(u) + 1);\r\n        v = MathUtils_1.MathUtils.fract(MathUtils_1.MathUtils.fract(v) + 1);\r\n        return this.bilinearSample(u, 1 - v);\r\n    }\r\n    normalSample(u, v) {\r\n        let c = this.sample(u, v);\r\n        return new Vector3_1.Vector3(c.r * 2 - 1, c.g * 2 - 1, c.b * 2 - 1).normalize();\r\n    }\r\n    bumpSample(u, v) {\r\n        u = MathUtils_1.MathUtils.fract(MathUtils_1.MathUtils.fract(u) + 1);\r\n        v = MathUtils_1.MathUtils.fract(MathUtils_1.MathUtils.fract(v) + 1);\r\n        v = 1 - v;\r\n        let x = Math.round(u * this.width);\r\n        let y = Math.round(v * this.height);\r\n        let x1 = MathUtils_1.MathUtils.clampInt(x - 1, 0, this.width - 1);\r\n        let x2 = MathUtils_1.MathUtils.clampInt(x + 1, 0, this.width - 1);\r\n        let y1 = MathUtils_1.MathUtils.clampInt(y - 1, 0, this.height - 1);\r\n        let y2 = MathUtils_1.MathUtils.clampInt(y + 1, 0, this.height - 1);\r\n        let cx = this.data[y * this.width + x1].sub(this.data[y * this.width + x2]);\r\n        let cy = this.data[y1 * this.width + x].sub(this.data[y2 * this.width + x]);\r\n        return new Vector3_1.Vector3(cx.r, cy.r, 0);\r\n    }\r\n    load(url, onLoad, onProgress, onError) {\r\n        this.sourceFile = url;\r\n        let texture = Texture.getTexture(url);\r\n        if (texture) {\r\n            this.index = texture.index;\r\n            this.data = texture.data;\r\n            this.image = texture.image;\r\n            this.pixels = texture.pixels;\r\n            this.sourceFile = texture.sourceFile;\r\n            if (onLoad) {\r\n                onLoad(this.data);\r\n            }\r\n            return this.image;\r\n        }\r\n        return super.load(url, function (image) {\r\n            this.setImage(image);\r\n            if (onLoad) {\r\n                onLoad(this.pixels);\r\n            }\r\n        }.bind(this), onProgress, onError);\r\n    }\r\n    setImage(image) {\r\n        this.sourceFile = image.currentSrc;\r\n        Texture.setTexture(this.sourceFile, this);\r\n        Texture.ctx.drawImage(image, 0, 0);\r\n        let pixels = Texture.ctx.getImageData(0, 0, image.width, image.height).data;\r\n        this.setImageData(image.width, image.height, pixels);\r\n        this.image = image;\r\n    }\r\n    setImageData(width, height, pixels) {\r\n        this.data = [];\r\n        for (var y = 0; y < height; y++) {\r\n            for (var x = 0; x < width; x++) {\r\n                var pi = y * (width * 4) + (x * 4);\r\n                var index = y * width + x;\r\n                var rgba = {\r\n                    r: pixels[pi],\r\n                    g: pixels[pi + 1],\r\n                    b: pixels[pi + 2],\r\n                    a: pixels[pi + 3],\r\n                };\r\n                this.data[index] = new Color_1.Color(rgba.r / 255, rgba.g / 255, rgba.b / 255);\r\n            }\r\n        }\r\n        this.width = width;\r\n        this.height = height;\r\n        this.pixels = pixels;\r\n    }\r\n    static write(memory) {\r\n        memory.writeUnsignedInt(Texture.list.length);\r\n        Texture.list.forEach(function (texture) {\r\n            texture.write(memory);\r\n        });\r\n        return memory.position;\r\n    }\r\n    static restore(memory) {\r\n        var numTextures = memory.readUnsignedInt();\r\n        for (var i = 0; i < numTextures; i++) {\r\n            var tex = new Texture();\r\n            tex.read(memory);\r\n        }\r\n        console.info(numTextures + \" Textures restored\");\r\n        return memory.position;\r\n    }\r\n}\r\nTexture.list = [];\r\nTexture.map = new Map();\r\nexports.Texture = Texture;\r\n"
    },
    {
      "id": 11,
      "identifier": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-core\\src\\engine\\scene\\shapes\\Triangle.ts",
      "name": "./packages/render-core/src/engine/scene/shapes/Triangle.ts",
      "index": 38,
      "index2": 34,
      "size": 14370,
      "cacheable": true,
      "built": true,
      "optional": false,
      "prefetched": false,
      "chunks": [
        0
      ],
      "assets": [],
      "issuer": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-core\\src\\engine\\scene\\shapes\\Shape.ts",
      "issuerId": 6,
      "issuerName": "./packages/render-core/src/engine/scene/shapes/Shape.ts",
      "failed": false,
      "errors": 15,
      "warnings": 0,
      "reasons": [
        {
          "moduleId": 6,
          "moduleIdentifier": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-core\\src\\engine\\scene\\shapes\\Shape.ts",
          "module": "./packages/render-core/src/engine/scene/shapes/Shape.ts",
          "moduleName": "./packages/render-core/src/engine/scene/shapes/Shape.ts",
          "type": "cjs require",
          "userRequest": "./Triangle",
          "loc": "6:19-40"
        },
        {
          "moduleId": 19,
          "moduleIdentifier": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-core\\src\\engine\\scene\\shapes\\Mesh.ts",
          "module": "./packages/render-core/src/engine/scene/shapes/Mesh.ts",
          "moduleName": "./packages/render-core/src/engine/scene/shapes/Mesh.ts",
          "type": "cjs require",
          "userRequest": "./Triangle",
          "loc": "3:19-40"
        },
        {
          "moduleId": 41,
          "moduleIdentifier": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-core\\src\\engine\\scene\\Scene.ts",
          "module": "./packages/render-core/src/engine/scene/Scene.ts",
          "moduleName": "./packages/render-core/src/engine/scene/Scene.ts",
          "type": "cjs require",
          "userRequest": "./shapes/Triangle",
          "loc": "13:19-47"
        },
        {
          "moduleId": 52,
          "moduleIdentifier": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-client\\src\\views\\GIJSView.ts",
          "module": "./packages/render-client/src/views/GIJSView.ts",
          "moduleName": "./packages/render-client/src/views/GIJSView.ts",
          "type": "cjs require",
          "userRequest": "../../../render-core/src/engine/scene/shapes/Triangle",
          "loc": "13:19-83"
        }
      ],
      "usedExports": true,
      "providedExports": null,
      "optimizationBailout": [],
      "depth": 2,
      "source": "\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst Material_1 = require(\"../materials/Material\");\r\nconst Box_1 = require(\"./Box\");\r\nconst Vector3_1 = require(\"../../math/Vector3\");\r\nconst Hit_1 = require(\"../../math/Hit\");\r\nconst Constants_1 = require(\"../../math/Constants\");\r\nconst Hit_2 = require(\"../../math/Hit\");\r\nconst Matrix4_1 = require(\"../../math/Matrix4\");\r\nconst Shape_1 = require(\"./Shape\");\r\nconst MaterialUtils_1 = require(\"../materials/MaterialUtils\");\r\nconst ByteArrayBase_1 = require(\"../../../pointer/src/ByteArrayBase\");\r\nclass Triangle {\r\n    constructor(material = null, box = new Box_1.Box(), v1 = new Vector3_1.Vector3(), v2 = new Vector3_1.Vector3(), v3 = new Vector3_1.Vector3(), n1 = new Vector3_1.Vector3(), n2 = new Vector3_1.Vector3(), n3 = new Vector3_1.Vector3(), t1 = new Vector3_1.Vector3(), t2 = new Vector3_1.Vector3(), t3 = new Vector3_1.Vector3()) {\r\n        this.material = material;\r\n        this.box = box;\r\n        this.v1 = v1;\r\n        this.v2 = v2;\r\n        this.v3 = v3;\r\n        this.n1 = n1;\r\n        this.n2 = n2;\r\n        this.n3 = n3;\r\n        this.t1 = t1;\r\n        this.t2 = t2;\r\n        this.t3 = t3;\r\n        this.type = Shape_1.ShapeType.TRIANGLE;\r\n        this.memorySize = Triangle.SIZE;\r\n        this.data = new Float32Array([\r\n            v1.x, v1.y, v1.z, 0,\r\n            v2.x, v2.y, v2.z, 0,\r\n            v3.x, v3.y, v3.z, 0,\r\n            n1.x, n1.y, n1.z, 0,\r\n            n2.x, n2.y, n2.z, 0,\r\n            n3.x, n3.y, n3.z, 0,\r\n            t1.x, t1.y, t1.z, 0,\r\n            t2.x, t2.y, t2.z, 0,\r\n            t3.x, t3.y, t3.z, 0\r\n        ]);\r\n    }\r\n    update() {\r\n        this.data[0] = this.v1.x;\r\n        this.data[1] = this.v1.y;\r\n        this.data[2] = this.v1.z;\r\n        this.data[3] = 0;\r\n        this.data[4] = this.v2.x;\r\n        this.data[5] = this.v2.y;\r\n        this.data[6] = this.v2.z;\r\n        this.data[7] = 0;\r\n        this.data[8] = this.v3.x;\r\n        this.data[9] = this.v3.y;\r\n        this.data[10] = this.v3.z;\r\n        this.data[11] = 0;\r\n        this.data[12] = this.n1.x;\r\n        this.data[13] = this.n1.y;\r\n        this.data[14] = this.n1.z;\r\n        this.data[15] = 0;\r\n        this.data[16] = this.n2.x;\r\n        this.data[17] = this.n2.y;\r\n        this.data[18] = this.n2.z;\r\n        this.data[19] = 0;\r\n        this.data[20] = this.n3.x;\r\n        this.data[21] = this.n3.y;\r\n        this.data[22] = this.n3.z;\r\n        this.data[23] = 0;\r\n        this.data[24] = this.t1.x;\r\n        this.data[25] = this.t1.y;\r\n        this.data[26] = this.t1.z;\r\n        this.data[27] = 0;\r\n        this.data[28] = this.t2.x;\r\n        this.data[29] = this.t2.y;\r\n        this.data[30] = this.t2.z;\r\n        this.data[31] = 0;\r\n        this.data[32] = this.t3.x;\r\n        this.data[33] = this.t3.y;\r\n        this.data[34] = this.t3.z;\r\n        this.data[35] = 0;\r\n    }\r\n    directRead(memory, offset) {\r\n        offset++;\r\n        var materialIndex = memory[offset++];\r\n        var material = Material_1.Material.map[materialIndex];\r\n        if (material) {\r\n            this.material = material;\r\n        }\r\n        this.index = memory[offset++];\r\n        offset = this.v1.directRead(memory, offset);\r\n        offset = this.v2.directRead(memory, offset);\r\n        offset = this.v3.directRead(memory, offset);\r\n        offset = this.n1.directRead(memory, offset);\r\n        offset = this.n2.directRead(memory, offset);\r\n        offset = this.n3.directRead(memory, offset);\r\n        if (this.t1) {\r\n            offset = this.t1.directRead(memory, offset);\r\n        }\r\n        else {\r\n            offset = offset + Vector3_1.Vector3.SIZE;\r\n        }\r\n        if (this.t2) {\r\n            offset = this.t2.directRead(memory, offset);\r\n        }\r\n        else {\r\n            offset = offset + Vector3_1.Vector3.SIZE;\r\n        }\r\n        if (this.t3) {\r\n            offset = this.t3.directRead(memory, offset);\r\n        }\r\n        else {\r\n            offset = offset + Vector3_1.Vector3.SIZE;\r\n        }\r\n        this.updateBox();\r\n        return offset;\r\n    }\r\n    directWrite(memory, offset) {\r\n        memory[offset++] = this.type;\r\n        memory[offset++] = this.material.index;\r\n        memory[offset++] = this.index;\r\n        offset = this.v1.directWrite(memory, offset);\r\n        offset = this.v2.directWrite(memory, offset);\r\n        offset = this.v3.directWrite(memory, offset);\r\n        offset = this.n1.directWrite(memory, offset);\r\n        offset = this.n2.directWrite(memory, offset);\r\n        offset = this.n3.directWrite(memory, offset);\r\n        if (this.t1) {\r\n            offset = this.t1.directWrite(memory, offset);\r\n        }\r\n        else {\r\n            offset = offset + Vector3_1.Vector3.SIZE;\r\n        }\r\n        if (this.t2) {\r\n            offset = this.t2.directWrite(memory, offset);\r\n        }\r\n        else {\r\n            offset = offset + Vector3_1.Vector3.SIZE;\r\n        }\r\n        if (this.t3) {\r\n            offset = this.t3.directWrite(memory, offset);\r\n        }\r\n        else {\r\n            offset = offset + Vector3_1.Vector3.SIZE;\r\n        }\r\n        return offset;\r\n    }\r\n    read(memory) {\r\n        memory.position += ByteArrayBase_1.ByteArrayBase.SIZE_OF_UINT8;\r\n        var materialIndex = memory.readInt();\r\n        var material = Material_1.Material.map[materialIndex];\r\n        if (material) {\r\n            this.material = material;\r\n        }\r\n        this.index = memory.readInt();\r\n        this.v1.read(memory);\r\n        this.v2.read(memory);\r\n        this.v3.read(memory);\r\n        this.n1.read(memory);\r\n        this.n2.read(memory);\r\n        this.n3.read(memory);\r\n        this.t1.read(memory);\r\n        this.t2.read(memory);\r\n        this.t3.read(memory);\r\n        if (this.t1.isNullVector()) {\r\n            this.t1 = null;\r\n        }\r\n        if (this.t2.isNullVector()) {\r\n            this.t2 = null;\r\n        }\r\n        if (this.t3.isNullVector()) {\r\n            this.t3 = null;\r\n        }\r\n        this.updateBox();\r\n        this.update();\r\n        return memory.position;\r\n    }\r\n    write(memory) {\r\n        memory.writeByte(this.type);\r\n        memory.writeInt(this.material.index);\r\n        memory.writeInt(this.index);\r\n        this.v1.write(memory);\r\n        this.v2.write(memory);\r\n        this.v3.write(memory);\r\n        this.n1.write(memory);\r\n        this.n2.write(memory);\r\n        this.n3.write(memory);\r\n        if (this.t1) {\r\n            this.t1.write(memory);\r\n        }\r\n        else {\r\n            Vector3_1.Vector3.NullVector.write(memory);\r\n        }\r\n        if (this.t2) {\r\n            this.t2.write(memory);\r\n        }\r\n        else {\r\n            Vector3_1.Vector3.NullVector.write(memory);\r\n        }\r\n        if (this.t3) {\r\n            this.t3.write(memory);\r\n        }\r\n        else {\r\n            Vector3_1.Vector3.NullVector.write(memory);\r\n        }\r\n        return memory.position;\r\n    }\r\n    static fromJson(triangles) {\r\n        if (triangles instanceof Triangle) {\r\n            var t = triangles;\r\n            return new Triangle(MaterialUtils_1.MaterialUtils.fromJson(t.material), Box_1.Box.fromJson(t.box), Vector3_1.Vector3.fromJson(t.v1), Vector3_1.Vector3.fromJson(t.v2), Vector3_1.Vector3.fromJson(t.v3), Vector3_1.Vector3.fromJson(t.n1), Vector3_1.Vector3.fromJson(t.n2), Vector3_1.Vector3.fromJson(t.n3), Vector3_1.Vector3.fromJson(t.t1), Vector3_1.Vector3.fromJson(t.t2), Vector3_1.Vector3.fromJson(t.t3));\r\n        }\r\n        else {\r\n            var _ts = [];\r\n            var ts = triangles;\r\n            ts.forEach(function (t) {\r\n                _ts.push(new Triangle(MaterialUtils_1.MaterialUtils.fromJson(t.material), Box_1.Box.fromJson(t.box), Vector3_1.Vector3.fromJson(t.v1), Vector3_1.Vector3.fromJson(t.v2), Vector3_1.Vector3.fromJson(t.v3), Vector3_1.Vector3.fromJson(t.n1), Vector3_1.Vector3.fromJson(t.n2), Vector3_1.Vector3.fromJson(t.n3), Vector3_1.Vector3.fromJson(t.t1), Vector3_1.Vector3.fromJson(t.t2), Vector3_1.Vector3.fromJson(t.t3)));\r\n            });\r\n            return _ts;\r\n        }\r\n    }\r\n    static newTriangle(v1, v2, v3, t1, t2, t3, material) {\r\n        var t = new Triangle();\r\n        t.v1 = v1;\r\n        t.v2 = v2;\r\n        t.v3 = v3;\r\n        t.t1 = t1;\r\n        t.t2 = t2;\r\n        t.t3 = t3;\r\n        t.material = material;\r\n        t.updateBox();\r\n        t.update();\r\n        t.fixNormals();\r\n        return t;\r\n    }\r\n    compile() {\r\n    }\r\n    get vertices() {\r\n        return [this.v1, this.v2, this.v3];\r\n    }\r\n    intersectSIMD(r) {\r\n        this.update();\r\n        var _v1 = SIMD.Float32x4.load(this.data, 0);\r\n        var _v2 = SIMD.Float32x4.load(this.data, 4);\r\n        var _v3 = SIMD.Float32x4.load(this.data, 8);\r\n        var _e1 = SIMD.Float32x4.sub(_v2, _v1);\r\n        var _e2 = SIMD.Float32x4.sub(_v3, _v1);\r\n        var _p = r.direction.SIMD_cross(_e2);\r\n        var det = Vector3_1.Vector3.SIMD.dot(_e1, _p);\r\n        if (det > -Constants_1.EPS && det < Constants_1.EPS) {\r\n            return Hit_2.NoHit;\r\n        }\r\n        var inv = 1 / det;\r\n        var _t = r.origin.SIMD_sub(_v1);\r\n        var u = Vector3_1.Vector3.SIMD.dot(_t, _p) * inv;\r\n        if (u < 0 || u > 1) {\r\n            return Hit_2.NoHit;\r\n        }\r\n        var _q = Vector3_1.Vector3.SIMD.cross(_t, _e1);\r\n        var v = r.direction.SIMD_dot(_q) * inv;\r\n        if (v < 0 || u + v > 1) {\r\n            return Hit_2.NoHit;\r\n        }\r\n        var d = Vector3_1.Vector3.SIMD.dot(_e2, _q) * inv;\r\n        if (d < Constants_1.EPS) {\r\n            return Hit_2.NoHit;\r\n        }\r\n        return new Hit_1.Hit(this, d);\r\n    }\r\n    intersect(r) {\r\n        var e1 = this.v2.sub(this.v1);\r\n        var e2 = this.v3.sub(this.v1);\r\n        var p = r.direction.cross(e2);\r\n        var det = e1.dot(p);\r\n        if (det > -Constants_1.EPS && det < Constants_1.EPS) {\r\n            return Hit_2.NoHit;\r\n        }\r\n        var inv = 1 / det;\r\n        var t = r.origin.sub(this.v1);\r\n        var u = t.dot(p) * inv;\r\n        if (u < 0 || u > 1) {\r\n            return Hit_2.NoHit;\r\n        }\r\n        var q = t.cross(e1);\r\n        var v = r.direction.dot(q) * inv;\r\n        if (v < 0 || u + v > 1) {\r\n            return Hit_2.NoHit;\r\n        }\r\n        var d = e2.dot(q) * inv;\r\n        if (d < Constants_1.EPS) {\r\n            return Hit_2.NoHit;\r\n        }\r\n        return new Hit_1.Hit(this, d);\r\n    }\r\n    getColor(p) {\r\n        var t = this;\r\n        if (t.material.texture == null) {\r\n            return t.material.color;\r\n        }\r\n        var _uvw = t.baryCentric(p);\r\n        var u = _uvw.u;\r\n        var v = _uvw.v;\r\n        var w = _uvw.w;\r\n        var n = new Vector3_1.Vector3();\r\n        n = n.add(t.t1.mulScalar(u));\r\n        n = n.add(t.t2.mulScalar(v));\r\n        n = n.add(t.t3.mulScalar(w));\r\n        return t.material.texture.sample(n.x, n.y);\r\n    }\r\n    getMaterial(p) {\r\n        return this.material;\r\n    }\r\n    getNormal(p) {\r\n        var t = this;\r\n        var _uvw = t.baryCentric(p);\r\n        var u = _uvw.u;\r\n        var v = _uvw.v;\r\n        var w = _uvw.w;\r\n        var n = new Vector3_1.Vector3();\r\n        n = n.add(t.n1.mulScalar(u));\r\n        n = n.add(t.n2.mulScalar(v));\r\n        n = n.add(t.n3.mulScalar(w));\r\n        n = n.normalize();\r\n        if (t.material.normalTexture != null) {\r\n            var b = new Vector3_1.Vector3();\r\n            b = b.add(t.t1.mulScalar(u));\r\n            b = b.add(t.t2.mulScalar(v));\r\n            b = b.add(t.t3.mulScalar(w));\r\n            var ns = t.material.normalTexture.normalSample(b.x, b.y);\r\n            var dv1 = t.v2.sub(t.v1);\r\n            var dv2 = t.v3.sub(t.v1);\r\n            var dt1 = t.t2.sub(t.t1);\r\n            var dt2 = t.t3.sub(t.t1);\r\n            var T = dv1.mulScalar(dt2.y).sub(dv2.mulScalar(dt1.y)).normalize();\r\n            var B = dv2.mulScalar(dt1.x).sub(dv1.mulScalar(dt2.x)).normalize();\r\n            var N = T.cross(B);\r\n            var matrix = new Matrix4_1.Matrix4(T.x, B.x, N.x, 0, T.y, B.y, N.y, 0, T.z, B.z, N.z, 0, 0, 0, 0, 1);\r\n            n = matrix.mulDirection(ns);\r\n        }\r\n        if (t.material.bumpTexture != null) {\r\n            var b = new Vector3_1.Vector3();\r\n            b = b.add(t.t1.mulScalar(u));\r\n            b = b.add(t.t2.mulScalar(v));\r\n            b = b.add(t.t3.mulScalar(w));\r\n            var bump = t.material.bumpTexture.bumpSample(b.x, b.y);\r\n            var dv1 = t.v2.sub(t.v1);\r\n            var dv2 = t.v3.sub(t.v1);\r\n            var dt1 = t.t2.sub(t.t1);\r\n            var dt2 = t.t3.sub(t.t1);\r\n            var tangent = dv1.mulScalar(dt2.y).sub(dv2.mulScalar(dt1.y)).normalize();\r\n            var biTangent = dv2.mulScalar(dt1.x).sub(dv1.mulScalar(dt2.x)).normalize();\r\n            n = n.add(tangent.mulScalar(bump.x * t.material.bumpMultiplier));\r\n            n = n.add(biTangent.mulScalar(bump.y * t.material.bumpMultiplier));\r\n        }\r\n        n = n.normalize();\r\n        return n;\r\n    }\r\n    getRandomPoint() {\r\n        return new Vector3_1.Vector3();\r\n    }\r\n    area() {\r\n        var t = this;\r\n        var e1 = t.v2.sub(t.v1);\r\n        var e2 = t.v3.sub(t.v1);\r\n        var n = e1.cross(e2);\r\n        return n.length() / 2;\r\n    }\r\n    baryCentric(p) {\r\n        var t = this;\r\n        var v0 = t.v2.sub(t.v1);\r\n        var v1 = t.v3.sub(t.v1);\r\n        var v2 = p.sub(t.v1);\r\n        var d00 = v0.dot(v0);\r\n        var d01 = v0.dot(v1);\r\n        var d11 = v1.dot(v1);\r\n        var d20 = v2.dot(v0);\r\n        var d21 = v2.dot(v1);\r\n        var d = d00 * d11 - d01 * d01;\r\n        var v = (d11 * d20 - d01 * d21) / d;\r\n        var w = (d00 * d21 - d01 * d20) / d;\r\n        var u = 1 - v - w;\r\n        return { u: u, v: v, w: w };\r\n    }\r\n    updateBox() {\r\n        var t = this;\r\n        var min = t.v1.min(t.v2).min(t.v3);\r\n        var max = t.v1.max(t.v2).max(t.v3);\r\n        t.box = new Box_1.Box(min, max);\r\n    }\r\n    fixNormals() {\r\n        var t = this;\r\n        var e1 = t.v2.sub(t.v1);\r\n        var e2 = t.v3.sub(t.v1);\r\n        var n = e1.cross(e2).normalize();\r\n        var zero = new Vector3_1.Vector3();\r\n        if (t.n1 == undefined || t.n1.equals(zero)) {\r\n            t.n1 = n;\r\n        }\r\n        if (t.n2 == undefined || t.n2.equals(zero)) {\r\n            t.n2 = n;\r\n        }\r\n        if (t.n3 == undefined || t.n3.equals(zero)) {\r\n            t.n3 = n;\r\n        }\r\n    }\r\n}\r\nTriangle.SIZE = Box_1.Box.SIZE + (Vector3_1.Vector3.SIZE * 9) + 2;\r\nexports.Triangle = Triangle;\r\n"
    },
    {
      "id": 12,
      "identifier": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-core\\src\\engine\\math\\Matrix4.ts",
      "name": "./packages/render-core/src/engine/math/Matrix4.ts",
      "index": 39,
      "index2": 32,
      "size": 13067,
      "cacheable": true,
      "built": false,
      "optional": false,
      "prefetched": false,
      "chunks": [
        0
      ],
      "assets": [],
      "issuer": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-core\\src\\engine\\scene\\shapes\\TransformedShape.ts",
      "issuerId": 21,
      "issuerName": "./packages/render-core/src/engine/scene/shapes/TransformedShape.ts",
      "failed": false,
      "errors": 0,
      "warnings": 0,
      "reasons": [
        {
          "moduleId": 11,
          "moduleIdentifier": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-core\\src\\engine\\scene\\shapes\\Triangle.ts",
          "module": "./packages/render-core/src/engine/scene/shapes/Triangle.ts",
          "moduleName": "./packages/render-core/src/engine/scene/shapes/Triangle.ts",
          "type": "cjs require",
          "userRequest": "../../math/Matrix4",
          "loc": "9:18-47"
        },
        {
          "moduleId": 19,
          "moduleIdentifier": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-core\\src\\engine\\scene\\shapes\\Mesh.ts",
          "module": "./packages/render-core/src/engine/scene/shapes/Mesh.ts",
          "moduleName": "./packages/render-core/src/engine/scene/shapes/Mesh.ts",
          "type": "cjs require",
          "userRequest": "../../math/Matrix4",
          "loc": "4:18-47"
        },
        {
          "moduleId": 21,
          "moduleIdentifier": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-core\\src\\engine\\scene\\shapes\\TransformedShape.ts",
          "module": "./packages/render-core/src/engine/scene/shapes/TransformedShape.ts",
          "moduleName": "./packages/render-core/src/engine/scene/shapes/TransformedShape.ts",
          "type": "cjs require",
          "userRequest": "../../math/Matrix4",
          "loc": "5:18-47"
        },
        {
          "moduleId": 52,
          "moduleIdentifier": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-client\\src\\views\\GIJSView.ts",
          "module": "./packages/render-client/src/views/GIJSView.ts",
          "moduleName": "./packages/render-client/src/views/GIJSView.ts",
          "type": "cjs require",
          "userRequest": "../../../render-core/src/engine/math/Matrix4",
          "loc": "18:18-73"
        }
      ],
      "usedExports": true,
      "providedExports": null,
      "optimizationBailout": [],
      "depth": 2,
      "source": "\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst Vector3_1 = require(\"./Vector3\");\r\nconst Box_1 = require(\"../scene/shapes/Box\");\r\nconst Ray_1 = require(\"./Ray\");\r\nclass Matrix4 {\r\n    constructor(x00 = 0, x01 = 0, x02 = 0, x03 = 0, x10 = 0, x11 = 0, x12 = 0, x13 = 0, x20 = 0, x21 = 0, x22 = 0, x23 = 0, x30 = 0, x31 = 0, x32 = 0, x33 = 0) {\r\n        this.x00 = x00;\r\n        this.x01 = x01;\r\n        this.x02 = x02;\r\n        this.x03 = x03;\r\n        this.x10 = x10;\r\n        this.x11 = x11;\r\n        this.x12 = x12;\r\n        this.x13 = x13;\r\n        this.x20 = x20;\r\n        this.x21 = x21;\r\n        this.x22 = x22;\r\n        this.x23 = x23;\r\n        this.x30 = x30;\r\n        this.x31 = x31;\r\n        this.x32 = x32;\r\n        this.x33 = x33;\r\n    }\r\n    directRead(memory, offset) {\r\n        var m = this;\r\n        m.x00 = memory[offset++];\r\n        m.x01 = memory[offset++];\r\n        m.x02 = memory[offset++];\r\n        m.x03 = memory[offset++];\r\n        m.x10 = memory[offset++];\r\n        m.x11 = memory[offset++];\r\n        m.x12 = memory[offset++];\r\n        m.x13 = memory[offset++];\r\n        m.x20 = memory[offset++];\r\n        m.x21 = memory[offset++];\r\n        m.x22 = memory[offset++];\r\n        m.x23 = memory[offset++];\r\n        m.x30 = memory[offset++];\r\n        m.x31 = memory[offset++];\r\n        m.x32 = memory[offset++];\r\n        m.x33 = memory[offset++];\r\n        return offset;\r\n    }\r\n    directWrite(memory, offset) {\r\n        var m = this;\r\n        memory[offset++] = m.x00;\r\n        memory[offset++] = m.x01;\r\n        memory[offset++] = m.x02;\r\n        memory[offset++] = m.x03;\r\n        memory[offset++] = m.x10;\r\n        memory[offset++] = m.x11;\r\n        memory[offset++] = m.x12;\r\n        memory[offset++] = m.x13;\r\n        memory[offset++] = m.x20;\r\n        memory[offset++] = m.x21;\r\n        memory[offset++] = m.x22;\r\n        memory[offset++] = m.x23;\r\n        memory[offset++] = m.x30;\r\n        memory[offset++] = m.x31;\r\n        memory[offset++] = m.x32;\r\n        memory[offset++] = m.x33;\r\n        return offset;\r\n    }\r\n    read(memory) {\r\n        this.x00 = memory.readFloat();\r\n        this.x01 = memory.readFloat();\r\n        this.x02 = memory.readFloat();\r\n        this.x03 = memory.readFloat();\r\n        this.x10 = memory.readFloat();\r\n        this.x11 = memory.readFloat();\r\n        this.x12 = memory.readFloat();\r\n        this.x13 = memory.readFloat();\r\n        this.x20 = memory.readFloat();\r\n        this.x21 = memory.readFloat();\r\n        this.x22 = memory.readFloat();\r\n        this.x23 = memory.readFloat();\r\n        this.x30 = memory.readFloat();\r\n        this.x31 = memory.readFloat();\r\n        this.x32 = memory.readFloat();\r\n        this.x33 = memory.readFloat();\r\n        return memory.position;\r\n    }\r\n    write(memory) {\r\n        memory.writeFloat(this.x00);\r\n        memory.writeFloat(this.x01);\r\n        memory.writeFloat(this.x02);\r\n        memory.writeFloat(this.x03);\r\n        memory.writeFloat(this.x10);\r\n        memory.writeFloat(this.x11);\r\n        memory.writeFloat(this.x12);\r\n        memory.writeFloat(this.x13);\r\n        memory.writeFloat(this.x20);\r\n        memory.writeFloat(this.x21);\r\n        memory.writeFloat(this.x22);\r\n        memory.writeFloat(this.x23);\r\n        memory.writeFloat(this.x30);\r\n        memory.writeFloat(this.x31);\r\n        memory.writeFloat(this.x32);\r\n        memory.writeFloat(this.x33);\r\n        return memory.position;\r\n    }\r\n    static fromJson(m) {\r\n        return new Matrix4(m.x00, m.x01, m.x02, m.x03, m.x10, m.x11, m.x12, m.x13, m.x20, m.x21, m.x22, m.x23, m.x30, m.x31, m.x32, m.x33);\r\n    }\r\n    static fromTHREEJS(e) {\r\n        return new Matrix4(e[0], e[4], e[8], e[12], e[1], e[5], e[9], e[13], e[2], e[6], e[10], e[14], e[3], e[7], e[11], e[15]);\r\n    }\r\n    static identity() {\r\n        return new Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);\r\n    }\r\n    static translate(v) {\r\n        return new Matrix4(1, 0, 0, v.x, 0, 1, 0, v.y, 0, 0, 1, v.z, 0, 0, 0, 1);\r\n    }\r\n    static scale(v) {\r\n        return new Matrix4(v.x, 0, 0, 0, 0, v.y, 0, 0, 0, 0, v.z, 0, 0, 0, 0, 1);\r\n    }\r\n    static rotate(v, a) {\r\n        v = v.normalize();\r\n        var s = Math.sin(a);\r\n        var c = Math.cos(a);\r\n        var m = 1 - c;\r\n        return new Matrix4(m * v.x * v.x + c, m * v.x * v.y + v.z * s, m * v.z * v.x - v.y * s, 0, m * v.x * v.y - v.z * s, m * v.y * v.y + c, m * v.y * v.z + v.x * s, 0, m * v.z * v.x + v.y * s, m * v.y * v.z - v.x * s, m * v.z * v.z + c, 0, 0, 0, 0, 1);\r\n    }\r\n    static frustum(l, r, b, t, n, f) {\r\n        var t1 = 2 * n;\r\n        var t2 = r - l;\r\n        var t3 = t - b;\r\n        var t4 = f - n;\r\n        return new Matrix4(t1 / t2, 0, (r + l) / t2, 0, 0, t1 / t3, (t + b) / t3, 0, 0, 0, (-f - n) / t4, (-t1 * f) / t4, 0, 0, -1, 0);\r\n    }\r\n    static orthographic(l, r, b, t, n, f) {\r\n        return new Matrix4(2 / (r - l), 0, 0, -(r + l) / (r - l), 0, 2 / (t - b), 0, -(t + b) / (t - b), 0, 0, -2 / (f - n), -(f + n) / (f - n), 0, 0, 0, 1);\r\n    }\r\n    static perspective(fov, aspect, near, far) {\r\n        var ymax = near * Math.tan(fov * Math.PI / 360);\r\n        var xmax = ymax * aspect;\r\n        return Matrix4.frustum(-xmax, xmax, -ymax, ymax, near, far);\r\n    }\r\n    static LookAtMatrix(eye, center, up, fovy) {\r\n        up = up.normalize();\r\n        var f = center.sub(eye).normalize();\r\n        var s = f.cross(up);\r\n        var u = s.cross(f);\r\n        var m = new Matrix4(s.x, u.x, -f.x, eye.x, s.y, u.y, -f.y, eye.y, s.z, u.z, -f.z, eye.z, 0, 0, 0, 1);\r\n        return m.inverse();\r\n    }\r\n    translate(v) {\r\n        return Matrix4.translate(v).mul(this);\r\n    }\r\n    scale(v) {\r\n        return Matrix4.scale(v).mul(this);\r\n    }\r\n    rotate(v, a) {\r\n        return Matrix4.rotate(v, a).mul(this);\r\n    }\r\n    frustum(l, r, b, t, n, f) {\r\n        return Matrix4.frustum(l, r, b, t, n, f).mul(this);\r\n    }\r\n    orthographic(l, r, b, t, n, f) {\r\n        return Matrix4.orthographic(l, r, b, t, n, f).mul(this);\r\n    }\r\n    perspective(fov, aspect, near, far) {\r\n        return Matrix4.perspective(fov, aspect, near, far).mul(this);\r\n    }\r\n    mul(b) {\r\n        var a = this;\r\n        var m = new Matrix4();\r\n        m.x00 = a.x00 * b.x00 + a.x01 * b.x10 + a.x02 * b.x20 + a.x03 * b.x30;\r\n        m.x10 = a.x10 * b.x00 + a.x11 * b.x10 + a.x12 * b.x20 + a.x13 * b.x30;\r\n        m.x20 = a.x20 * b.x00 + a.x21 * b.x10 + a.x22 * b.x20 + a.x23 * b.x30;\r\n        m.x30 = a.x30 * b.x00 + a.x31 * b.x10 + a.x32 * b.x20 + a.x33 * b.x30;\r\n        m.x01 = a.x00 * b.x01 + a.x01 * b.x11 + a.x02 * b.x21 + a.x03 * b.x31;\r\n        m.x11 = a.x10 * b.x01 + a.x11 * b.x11 + a.x12 * b.x21 + a.x13 * b.x31;\r\n        m.x21 = a.x20 * b.x01 + a.x21 * b.x11 + a.x22 * b.x21 + a.x23 * b.x31;\r\n        m.x31 = a.x30 * b.x01 + a.x31 * b.x11 + a.x32 * b.x21 + a.x33 * b.x31;\r\n        m.x02 = a.x00 * b.x02 + a.x01 * b.x12 + a.x02 * b.x22 + a.x03 * b.x32;\r\n        m.x12 = a.x10 * b.x02 + a.x11 * b.x12 + a.x12 * b.x22 + a.x13 * b.x32;\r\n        m.x22 = a.x20 * b.x02 + a.x21 * b.x12 + a.x22 * b.x22 + a.x23 * b.x32;\r\n        m.x32 = a.x30 * b.x02 + a.x31 * b.x12 + a.x32 * b.x22 + a.x33 * b.x32;\r\n        m.x03 = a.x00 * b.x03 + a.x01 * b.x13 + a.x02 * b.x23 + a.x03 * b.x33;\r\n        m.x13 = a.x10 * b.x03 + a.x11 * b.x13 + a.x12 * b.x23 + a.x13 * b.x33;\r\n        m.x23 = a.x20 * b.x03 + a.x21 * b.x13 + a.x22 * b.x23 + a.x23 * b.x33;\r\n        m.x33 = a.x30 * b.x03 + a.x31 * b.x13 + a.x32 * b.x23 + a.x33 * b.x33;\r\n        return m;\r\n    }\r\n    mulPosition(b) {\r\n        var a = this;\r\n        var x = a.x00 * b.x + a.x01 * b.y + a.x02 * b.z + a.x03;\r\n        var y = a.x10 * b.x + a.x11 * b.y + a.x12 * b.z + a.x13;\r\n        var z = a.x20 * b.x + a.x21 * b.y + a.x22 * b.z + a.x23;\r\n        return new Vector3_1.Vector3(x, y, z);\r\n    }\r\n    mulDirection(b) {\r\n        var a = this;\r\n        var x = a.x00 * b.x + a.x01 * b.y + a.x02 * b.z;\r\n        var y = a.x10 * b.x + a.x11 * b.y + a.x12 * b.z;\r\n        var z = a.x20 * b.x + a.x21 * b.y + a.x22 * b.z;\r\n        return new Vector3_1.Vector3(x, y, z).normalize();\r\n    }\r\n    mulRay(b) {\r\n        var a = this;\r\n        return new Ray_1.Ray(a.mulPosition(b.origin), a.mulDirection(b.direction));\r\n    }\r\n    mulBox(box) {\r\n        var a = this;\r\n        var r = new Vector3_1.Vector3(a.x00, a.x10, a.x20);\r\n        var u = new Vector3_1.Vector3(a.x01, a.x11, a.x21);\r\n        var b = new Vector3_1.Vector3(a.x02, a.x12, a.x22);\r\n        var t = new Vector3_1.Vector3(a.x03, a.x13, a.x23);\r\n        var xa = r.mulScalar(box.min.x);\r\n        var xb = r.mulScalar(box.max.x);\r\n        var ya = u.mulScalar(box.min.y);\r\n        var yb = u.mulScalar(box.max.y);\r\n        var za = b.mulScalar(box.min.z);\r\n        var zb = b.mulScalar(box.max.z);\r\n        xa = xa.min(xb);\r\n        xb = xa.max(xb);\r\n        ya = ya.min(yb);\r\n        yb = ya.max(yb);\r\n        za = za.min(zb);\r\n        zb = za.max(zb);\r\n        var min = xa.add(ya).add(za).add(t);\r\n        var max = xb.add(yb).add(zb).add(t);\r\n        return new Box_1.Box(min, max);\r\n    }\r\n    transpose() {\r\n        var a = this;\r\n        return new Matrix4(a.x00, a.x10, a.x20, a.x30, a.x01, a.x11, a.x21, a.x31, a.x02, a.x12, a.x22, a.x32, a.x03, a.x13, a.x23, a.x33);\r\n    }\r\n    determinant() {\r\n        var a = this;\r\n        return (a.x00 * a.x11 * a.x22 * a.x33 - a.x00 * a.x11 * a.x23 * a.x32 +\r\n            a.x00 * a.x12 * a.x23 * a.x31 - a.x00 * a.x12 * a.x21 * a.x33 +\r\n            a.x00 * a.x13 * a.x21 * a.x32 - a.x00 * a.x13 * a.x22 * a.x31 -\r\n            a.x01 * a.x12 * a.x23 * a.x30 + a.x01 * a.x12 * a.x20 * a.x33 -\r\n            a.x01 * a.x13 * a.x20 * a.x32 + a.x01 * a.x13 * a.x22 * a.x30 -\r\n            a.x01 * a.x10 * a.x22 * a.x33 + a.x01 * a.x10 * a.x23 * a.x32 +\r\n            a.x02 * a.x13 * a.x20 * a.x31 - a.x02 * a.x13 * a.x21 * a.x30 +\r\n            a.x02 * a.x10 * a.x21 * a.x33 - a.x02 * a.x10 * a.x23 * a.x31 +\r\n            a.x02 * a.x11 * a.x23 * a.x30 - a.x02 * a.x11 * a.x20 * a.x33 -\r\n            a.x03 * a.x10 * a.x21 * a.x32 + a.x03 * a.x10 * a.x22 * a.x31 -\r\n            a.x03 * a.x11 * a.x22 * a.x30 + a.x03 * a.x11 * a.x20 * a.x32 -\r\n            a.x03 * a.x12 * a.x20 * a.x31 + a.x03 * a.x12 * a.x21 * a.x30);\r\n    }\r\n    inverse() {\r\n        var a = this;\r\n        var m = new Matrix4();\r\n        var d = a.determinant();\r\n        m.x00 = (a.x12 * a.x23 * a.x31 - a.x13 * a.x22 * a.x31 + a.x13 * a.x21 * a.x32 - a.x11 * a.x23 * a.x32 - a.x12 * a.x21 * a.x33 + a.x11 * a.x22 * a.x33) / d;\r\n        m.x01 = (a.x03 * a.x22 * a.x31 - a.x02 * a.x23 * a.x31 - a.x03 * a.x21 * a.x32 + a.x01 * a.x23 * a.x32 + a.x02 * a.x21 * a.x33 - a.x01 * a.x22 * a.x33) / d;\r\n        m.x02 = (a.x02 * a.x13 * a.x31 - a.x03 * a.x12 * a.x31 + a.x03 * a.x11 * a.x32 - a.x01 * a.x13 * a.x32 - a.x02 * a.x11 * a.x33 + a.x01 * a.x12 * a.x33) / d;\r\n        m.x03 = (a.x03 * a.x12 * a.x21 - a.x02 * a.x13 * a.x21 - a.x03 * a.x11 * a.x22 + a.x01 * a.x13 * a.x22 + a.x02 * a.x11 * a.x23 - a.x01 * a.x12 * a.x23) / d;\r\n        m.x10 = (a.x13 * a.x22 * a.x30 - a.x12 * a.x23 * a.x30 - a.x13 * a.x20 * a.x32 + a.x10 * a.x23 * a.x32 + a.x12 * a.x20 * a.x33 - a.x10 * a.x22 * a.x33) / d;\r\n        m.x11 = (a.x02 * a.x23 * a.x30 - a.x03 * a.x22 * a.x30 + a.x03 * a.x20 * a.x32 - a.x00 * a.x23 * a.x32 - a.x02 * a.x20 * a.x33 + a.x00 * a.x22 * a.x33) / d;\r\n        m.x12 = (a.x03 * a.x12 * a.x30 - a.x02 * a.x13 * a.x30 - a.x03 * a.x10 * a.x32 + a.x00 * a.x13 * a.x32 + a.x02 * a.x10 * a.x33 - a.x00 * a.x12 * a.x33) / d;\r\n        m.x13 = (a.x02 * a.x13 * a.x20 - a.x03 * a.x12 * a.x20 + a.x03 * a.x10 * a.x22 - a.x00 * a.x13 * a.x22 - a.x02 * a.x10 * a.x23 + a.x00 * a.x12 * a.x23) / d;\r\n        m.x20 = (a.x11 * a.x23 * a.x30 - a.x13 * a.x21 * a.x30 + a.x13 * a.x20 * a.x31 - a.x10 * a.x23 * a.x31 - a.x11 * a.x20 * a.x33 + a.x10 * a.x21 * a.x33) / d;\r\n        m.x21 = (a.x03 * a.x21 * a.x30 - a.x01 * a.x23 * a.x30 - a.x03 * a.x20 * a.x31 + a.x00 * a.x23 * a.x31 + a.x01 * a.x20 * a.x33 - a.x00 * a.x21 * a.x33) / d;\r\n        m.x22 = (a.x01 * a.x13 * a.x30 - a.x03 * a.x11 * a.x30 + a.x03 * a.x10 * a.x31 - a.x00 * a.x13 * a.x31 - a.x01 * a.x10 * a.x33 + a.x00 * a.x11 * a.x33) / d;\r\n        m.x23 = (a.x03 * a.x11 * a.x20 - a.x01 * a.x13 * a.x20 - a.x03 * a.x10 * a.x21 + a.x00 * a.x13 * a.x21 + a.x01 * a.x10 * a.x23 - a.x00 * a.x11 * a.x23) / d;\r\n        m.x30 = (a.x12 * a.x21 * a.x30 - a.x11 * a.x22 * a.x30 - a.x12 * a.x20 * a.x31 + a.x10 * a.x22 * a.x31 + a.x11 * a.x20 * a.x32 - a.x10 * a.x21 * a.x32) / d;\r\n        m.x31 = (a.x01 * a.x22 * a.x30 - a.x02 * a.x21 * a.x30 + a.x02 * a.x20 * a.x31 - a.x00 * a.x22 * a.x31 - a.x01 * a.x20 * a.x32 + a.x00 * a.x21 * a.x32) / d;\r\n        m.x32 = (a.x02 * a.x11 * a.x30 - a.x01 * a.x12 * a.x30 - a.x02 * a.x10 * a.x31 + a.x00 * a.x12 * a.x31 + a.x01 * a.x10 * a.x32 - a.x00 * a.x11 * a.x32) / d;\r\n        m.x33 = (a.x01 * a.x12 * a.x20 - a.x02 * a.x11 * a.x20 + a.x02 * a.x10 * a.x21 - a.x00 * a.x12 * a.x21 - a.x01 * a.x10 * a.x22 + a.x00 * a.x11 * a.x22) / d;\r\n        return m;\r\n    }\r\n}\r\nMatrix4.SIZE = 16;\r\nexports.Matrix4 = Matrix4;\r\n"
    },
    {
      "id": 13,
      "identifier": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-core\\src\\pointer\\src\\DirectMemory.ts",
      "name": "./packages/render-core/src/pointer/src/DirectMemory.ts",
      "index": 8,
      "index2": 6,
      "size": 20683,
      "cacheable": true,
      "built": false,
      "optional": false,
      "prefetched": false,
      "chunks": [
        0
      ],
      "assets": [],
      "issuer": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-core\\src\\engine\\math\\Vector3.ts",
      "issuerId": 1,
      "issuerName": "./packages/render-core/src/engine/math/Vector3.ts",
      "failed": false,
      "errors": 2,
      "warnings": 0,
      "reasons": [
        {
          "moduleId": 1,
          "moduleIdentifier": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-core\\src\\engine\\math\\Vector3.ts",
          "module": "./packages/render-core/src/engine/math/Vector3.ts",
          "moduleName": "./packages/render-core/src/engine/math/Vector3.ts",
          "type": "cjs require",
          "userRequest": "../../pointer/src/DirectMemory",
          "loc": "3:23-64"
        },
        {
          "moduleId": 30,
          "moduleIdentifier": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-core\\src\\engine\\scene\\tree\\SharedNode.ts",
          "module": "./packages/render-core/src/engine/scene/tree/SharedNode.ts",
          "moduleName": "./packages/render-core/src/engine/scene/tree/SharedNode.ts",
          "type": "cjs require",
          "userRequest": "../../../pointer/src/DirectMemory",
          "loc": "9:23-67"
        },
        {
          "moduleId": 49,
          "moduleIdentifier": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-core\\src\\pointer\\src\\Pointer.ts",
          "module": "./packages/render-core/src/pointer/src/Pointer.ts",
          "moduleName": "./packages/render-core/src/pointer/src/Pointer.ts",
          "type": "cjs require",
          "userRequest": "./DirectMemory",
          "loc": "3:23-48"
        }
      ],
      "usedExports": true,
      "providedExports": null,
      "optimizationBailout": [],
      "depth": 3,
      "source": "\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst MemoryUtils_1 = require(\"./MemoryUtils\");\r\nconst UTF8_1 = require(\"./UTF8\");\r\nclass DirectMemory {\r\n    constructor(buffer, offset = 0, length = 0) {\r\n        this.buffer = buffer;\r\n        this.offset = offset;\r\n        this.BUFFER_EXT_SIZE = 32 * 1024 * 1024;\r\n        if (buffer == undefined) {\r\n            buffer = new ArrayBuffer(this.BUFFER_EXT_SIZE);\r\n            this.write_position = 0;\r\n        }\r\n        else if (buffer == null) {\r\n            this.write_position = 0;\r\n        }\r\n        else {\r\n            this.write_position = length > 0 ? length : buffer.byteLength;\r\n        }\r\n        if (buffer) {\r\n            this.data = new Uint8Array(buffer, offset, length > 0 ? length : buffer.byteLength);\r\n        }\r\n        this._position = 0;\r\n        this.endian = DirectMemory.BIG_ENDIAN;\r\n    }\r\n    get phyPosition() {\r\n        return this._position + this.data.byteOffset;\r\n    }\r\n    get bufferOffset() {\r\n        return this.data.byteOffset;\r\n    }\r\n    get position() {\r\n        return this._position;\r\n    }\r\n    set position(value) {\r\n        if (this._position < value) {\r\n            if (!this.validate(this._position - value)) {\r\n                return;\r\n            }\r\n        }\r\n        this._position = value;\r\n        this.write_position = value > this.write_position ? value : this.write_position;\r\n    }\r\n    get length() {\r\n        return this.write_position;\r\n    }\r\n    set length(value) {\r\n        this.validateBuffer(value);\r\n    }\r\n    get bytesAvailable() {\r\n        return this.data.byteLength - this._position;\r\n    }\r\n    clear() {\r\n        this._position = 0;\r\n    }\r\n    setBuffer(buffer, offset = 0, length = 0) {\r\n        if (buffer) {\r\n            this.data = new Uint8Array(buffer, offset, length > 0 ? length : buffer.byteLength);\r\n            this.write_position = length > 0 ? length : buffer.byteLength;\r\n        }\r\n        else {\r\n            this.write_position = 0;\r\n        }\r\n        this._position = 0;\r\n    }\r\n    readBoolean() {\r\n        if (!this.validate(DirectMemory.SIZE_OF_BOOLEAN))\r\n            return null;\r\n        return this.data[this.position++] != 0;\r\n    }\r\n    readByte() {\r\n        if (!this.validate(DirectMemory.SIZE_OF_INT8))\r\n            return null;\r\n        return this.data[this.position++];\r\n    }\r\n    readBytes(_bytes = null, offset = 0, length = 0, createNewBuffer = false) {\r\n        if (length == 0) {\r\n            length = this.bytesAvailable;\r\n        }\r\n        else if (!this.validate(length))\r\n            return null;\r\n        if (createNewBuffer) {\r\n            _bytes = _bytes == null ? new DirectMemory(new ArrayBuffer(length)) : _bytes;\r\n            for (var i = 0; i < length; i++) {\r\n                _bytes.data[i + offset] = this.data[this.position++];\r\n            }\r\n        }\r\n        else {\r\n            _bytes = _bytes == null ? new DirectMemory(null) : _bytes;\r\n            _bytes.setBuffer(this.data.buffer, this.bufferOffset + this.position, length);\r\n            this.position += length;\r\n        }\r\n        return _bytes;\r\n    }\r\n    readDouble() {\r\n        if (!this.validate(DirectMemory.SIZE_OF_FLOAT64))\r\n            return null;\r\n        var value = MemoryUtils_1.MemoryUtils.readFloat64(this.data, this.position, this.endian == DirectMemory.LITTLE_ENDIAN);\r\n        this.position += DirectMemory.SIZE_OF_FLOAT64;\r\n        return value;\r\n    }\r\n    readFloat() {\r\n        if (!this.validate(DirectMemory.SIZE_OF_FLOAT32))\r\n            return null;\r\n        var value = MemoryUtils_1.MemoryUtils.readFloat32(this.data, this.position, this.endian == DirectMemory.LITTLE_ENDIAN);\r\n        this.position += DirectMemory.SIZE_OF_FLOAT32;\r\n        return value;\r\n    }\r\n    readInt() {\r\n        if (!this.validate(DirectMemory.SIZE_OF_INT32))\r\n            return null;\r\n        var value = MemoryUtils_1.MemoryUtils.readInt32(this.data, this.position, this.endian == DirectMemory.LITTLE_ENDIAN);\r\n        this.position += DirectMemory.SIZE_OF_INT32;\r\n        return value;\r\n    }\r\n    readMultiByte(length, charSet) {\r\n        if (!this.validate(length))\r\n            return null;\r\n        throw \"readMultiByte: Not Implemented!\";\r\n    }\r\n    readShort() {\r\n        if (!this.validate(DirectMemory.SIZE_OF_INT16))\r\n            return null;\r\n        var value = MemoryUtils_1.MemoryUtils.readInt16(this.data, this.position, this.endian == DirectMemory.LITTLE_ENDIAN);\r\n        this.position += DirectMemory.SIZE_OF_INT16;\r\n        return value;\r\n    }\r\n    readUnsignedByte() {\r\n        if (!this.validate(DirectMemory.SIZE_OF_UINT8))\r\n            return null;\r\n        return this.data[this.position++];\r\n    }\r\n    readUnsignedInt() {\r\n        if (!this.validate(DirectMemory.SIZE_OF_UINT32))\r\n            return null;\r\n        var value = MemoryUtils_1.MemoryUtils.readUint32(this.data, this.position, this.endian == DirectMemory.LITTLE_ENDIAN);\r\n        this.position += DirectMemory.SIZE_OF_UINT32;\r\n        return value;\r\n    }\r\n    readVariableSizedUnsignedInt() {\r\n        var value;\r\n        var c = this.readUnsignedByte();\r\n        if (c != 0xFF) {\r\n            value = c << 8;\r\n            c = this.readUnsignedByte();\r\n            value |= c;\r\n        }\r\n        else {\r\n            c = this.readUnsignedByte();\r\n            value = c << 16;\r\n            c = this.readUnsignedByte();\r\n            value |= c << 8;\r\n            c = this.readUnsignedByte();\r\n            value |= c;\r\n        }\r\n        return value;\r\n    }\r\n    readU16VX() {\r\n        return (this.readUnsignedByte() << 8) | this.readUnsignedByte();\r\n    }\r\n    readUnsignedShort() {\r\n        if (!this.validate(DirectMemory.SIZE_OF_UINT16))\r\n            return null;\r\n        var value = MemoryUtils_1.MemoryUtils.readUint16(this.data, this.position, this.endian == DirectMemory.LITTLE_ENDIAN);\r\n        this.position += DirectMemory.SIZE_OF_UINT16;\r\n        return value;\r\n    }\r\n    readUTF() {\r\n        if (!this.validate(DirectMemory.SIZE_OF_UINT16))\r\n            return null;\r\n        var length = MemoryUtils_1.MemoryUtils.readUint16(this.data, this.position, this.endian == DirectMemory.LITTLE_ENDIAN);\r\n        this.position += DirectMemory.SIZE_OF_UINT16;\r\n        if (length > 0) {\r\n            return this.readUTFBytes(length);\r\n        }\r\n        else {\r\n            return \"\";\r\n        }\r\n    }\r\n    readUTFBytes(length) {\r\n        if (!this.validate(length))\r\n            return null;\r\n        var _bytes = new Uint8Array(this.buffer, this.bufferOffset + this.position, length);\r\n        this.position += length;\r\n        return UTF8_1.UTF8.decode(_bytes);\r\n    }\r\n    readStandardString(length) {\r\n        if (!this.validate(length))\r\n            return null;\r\n        var str = \"\";\r\n        for (var i = 0; i < length; i++) {\r\n            str += String.fromCharCode(this.data[this.position++]);\r\n        }\r\n        return str;\r\n    }\r\n    readStringTillNull(keepEvenByte = true) {\r\n        var str = \"\";\r\n        var num = 0;\r\n        while (this.bytesAvailable > 0) {\r\n            var _byte = this.data[this.position++];\r\n            num++;\r\n            if (_byte != 0) {\r\n                str += String.fromCharCode(_byte);\r\n            }\r\n            else {\r\n                if (keepEvenByte && num % 2 != 0) {\r\n                    this.position++;\r\n                }\r\n                break;\r\n            }\r\n        }\r\n        return str;\r\n    }\r\n    writeBoolean(value) {\r\n        this.validateBuffer(DirectMemory.SIZE_OF_BOOLEAN);\r\n        this.data[this.position++] = value ? 1 : 0;\r\n    }\r\n    writeByte(value) {\r\n        this.validateBuffer(DirectMemory.SIZE_OF_INT8);\r\n        this.data[this.position++] = value;\r\n    }\r\n    writeUnsignedByte(value) {\r\n        this.validateBuffer(DirectMemory.SIZE_OF_UINT8);\r\n        this.data[this.position++] = value;\r\n    }\r\n    writeBytes(_bytes, offset = 0, length = 0) {\r\n        this.validateBuffer(length);\r\n        length = length > 0 ? length : _bytes.length;\r\n        var tmp_data = new Uint8Array(_bytes.buffer, offset, length);\r\n        for (var i = 0; i < length; i++) {\r\n            this.data[offset + this.position++] = tmp_data[i];\r\n        }\r\n    }\r\n    writeDouble(value) {\r\n        this.validateBuffer(DirectMemory.SIZE_OF_FLOAT64);\r\n        MemoryUtils_1.MemoryUtils.writeFloat64(this.data, this.position, value, this.endian == DirectMemory.LITTLE_ENDIAN);\r\n        this.position += DirectMemory.SIZE_OF_FLOAT64;\r\n    }\r\n    writeFloat(value) {\r\n        this.validateBuffer(DirectMemory.SIZE_OF_FLOAT32);\r\n        MemoryUtils_1.MemoryUtils.writeFloat32(this.data, this.position, value, this.endian == DirectMemory.LITTLE_ENDIAN);\r\n        this.position += DirectMemory.SIZE_OF_FLOAT32;\r\n    }\r\n    writeInt(value) {\r\n        this.validateBuffer(DirectMemory.SIZE_OF_INT32);\r\n        MemoryUtils_1.MemoryUtils.writeInt32(this.data, this.position, value, this.endian == DirectMemory.LITTLE_ENDIAN);\r\n        this.position += DirectMemory.SIZE_OF_INT32;\r\n    }\r\n    writeMultiByte(value, charSet) {\r\n    }\r\n    writeShort(value) {\r\n        this.validateBuffer(DirectMemory.SIZE_OF_INT16);\r\n        MemoryUtils_1.MemoryUtils.writeInt16(this.data, this.position, value, this.endian == DirectMemory.LITTLE_ENDIAN);\r\n        this.position += DirectMemory.SIZE_OF_INT16;\r\n    }\r\n    writeUnsignedShort(value) {\r\n        this.validateBuffer(DirectMemory.SIZE_OF_UINT16);\r\n        MemoryUtils_1.MemoryUtils.writeUint16(this.data, this.position, value, this.endian == DirectMemory.LITTLE_ENDIAN);\r\n        this.position += DirectMemory.SIZE_OF_UINT16;\r\n    }\r\n    writeUnsignedInt(value) {\r\n        this.validateBuffer(DirectMemory.SIZE_OF_UINT32);\r\n        MemoryUtils_1.MemoryUtils.writeUint32(this.data, this.position, value, this.endian == DirectMemory.LITTLE_ENDIAN);\r\n        this.position += DirectMemory.SIZE_OF_UINT32;\r\n    }\r\n    writeUTF(value) {\r\n        var utf8bytes = UTF8_1.UTF8.encode(value);\r\n        var length = utf8bytes.length;\r\n        this.validateBuffer(DirectMemory.SIZE_OF_UINT16 + length);\r\n        MemoryUtils_1.MemoryUtils.writeUint16(this.data, this.position, length, this.endian === DirectMemory.LITTLE_ENDIAN);\r\n        this.position += DirectMemory.SIZE_OF_UINT16;\r\n        this.writeUint8Array(utf8bytes);\r\n    }\r\n    writeUTFBytes(value) {\r\n        this.writeUint8Array(UTF8_1.UTF8.encode(value));\r\n    }\r\n    toString() {\r\n        return \"[DirectMemory] length:\" + this.length + \", bytesAvailable:\" + this.bytesAvailable;\r\n    }\r\n    writeUint8Array(_bytes) {\r\n        this.validateBuffer(this.position + _bytes.length);\r\n        for (var i = 0; i < _bytes.length; i++) {\r\n            this.data[this.position++] = _bytes[i];\r\n        }\r\n    }\r\n    writeUint16Array(_bytes) {\r\n        this.validateBuffer(this.position + _bytes.length);\r\n        for (var i = 0; i < _bytes.length; i++) {\r\n            MemoryUtils_1.MemoryUtils.writeUint16(this.data, this.position, _bytes[i], this.endian === DirectMemory.LITTLE_ENDIAN);\r\n            this.position += DirectMemory.SIZE_OF_UINT16;\r\n        }\r\n    }\r\n    writeUint32Array(_bytes) {\r\n        this.validateBuffer(this.position + _bytes.length);\r\n        for (var i = 0; i < _bytes.length; i++) {\r\n            MemoryUtils_1.MemoryUtils.writeUint32(this.data, this.position, _bytes[i], this.endian === DirectMemory.LITTLE_ENDIAN);\r\n            this.position += DirectMemory.SIZE_OF_UINT32;\r\n        }\r\n    }\r\n    writeInt8Array(_bytes) {\r\n        this.validateBuffer(this.position + _bytes.length);\r\n        for (var i = 0; i < _bytes.length; i++) {\r\n            this.data[this.position++] = _bytes[i];\r\n        }\r\n    }\r\n    writeInt16Array(_bytes) {\r\n        this.validateBuffer(this.position + _bytes.length);\r\n        for (var i = 0; i < _bytes.length; i++) {\r\n            MemoryUtils_1.MemoryUtils.writeInt16(this.data, this.position, _bytes[i], this.endian === DirectMemory.LITTLE_ENDIAN);\r\n            this.position += DirectMemory.SIZE_OF_INT16;\r\n        }\r\n    }\r\n    writeInt32Array(_bytes) {\r\n        this.validateBuffer(this.position + _bytes.length);\r\n        for (var i = 0; i < _bytes.length; i++) {\r\n            MemoryUtils_1.MemoryUtils.writeInt32(this.data, this.position, _bytes[i], this.endian === DirectMemory.LITTLE_ENDIAN);\r\n            this.position += DirectMemory.SIZE_OF_INT32;\r\n        }\r\n    }\r\n    writeFloat32Array(_bytes) {\r\n        this.validateBuffer(this.position + _bytes.length);\r\n        for (var i = 0; i < _bytes.length; i++) {\r\n            MemoryUtils_1.MemoryUtils.writeFloat32(this.data, this.position, _bytes[i], this.endian === DirectMemory.LITTLE_ENDIAN);\r\n            this.position += DirectMemory.SIZE_OF_FLOAT32;\r\n        }\r\n    }\r\n    writeFloat64Array(_bytes) {\r\n        this.validateBuffer(this.position + _bytes.length);\r\n        for (var i = 0; i < _bytes.length; i++) {\r\n            MemoryUtils_1.MemoryUtils.writeFloat64(this.data, this.position, _bytes[i], this.endian === DirectMemory.LITTLE_ENDIAN);\r\n            this.position += DirectMemory.SIZE_OF_FLOAT64;\r\n        }\r\n    }\r\n    readUint8Array(length, createNewBuffer = true) {\r\n        if (!this.validate(length))\r\n            return null;\r\n        if (!createNewBuffer) {\r\n            var result = new Uint8Array(this.buffer, this.bufferOffset + this.position, length);\r\n            this.position += length;\r\n        }\r\n        else {\r\n            result = new Uint8Array(new ArrayBuffer(length));\r\n            for (var i = 0; i < length; i++) {\r\n                result[i] = this.data[this.position];\r\n                this.position += DirectMemory.SIZE_OF_UINT8;\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n    readUint16Array(length, createNewBuffer = true) {\r\n        var size = length * DirectMemory.SIZE_OF_UINT16;\r\n        if (!this.validate(size))\r\n            return null;\r\n        if (!createNewBuffer) {\r\n            var result = new Uint16Array(this.buffer, this.bufferOffset + this.position, length);\r\n            this.position += size;\r\n        }\r\n        else {\r\n            result = new Uint16Array(new ArrayBuffer(size));\r\n            for (var i = 0; i < length; i++) {\r\n                result[i] = MemoryUtils_1.MemoryUtils.readUint16(this.data, this.position, this.endian === DirectMemory.LITTLE_ENDIAN);\r\n                this.position += DirectMemory.SIZE_OF_UINT16;\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n    readUint32Array(length, createNewBuffer = true) {\r\n        var size = length * DirectMemory.SIZE_OF_UINT32;\r\n        if (!this.validate(size))\r\n            return null;\r\n        if (!createNewBuffer) {\r\n            var result = new Uint32Array(this.buffer, this.bufferOffset + this.position, length);\r\n            this.position += size;\r\n        }\r\n        else {\r\n            result = new Uint32Array(new ArrayBuffer(size));\r\n            for (var i = 0; i < length; i++) {\r\n                result[i] = MemoryUtils_1.MemoryUtils.readUint32(this.data, this.position, this.endian === DirectMemory.LITTLE_ENDIAN);\r\n                this.position += DirectMemory.SIZE_OF_UINT32;\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n    readInt8Array(length, createNewBuffer = true) {\r\n        if (!this.validate(length))\r\n            return null;\r\n        if (!createNewBuffer) {\r\n            var result = new Int8Array(this.buffer, this.bufferOffset + this.position, length);\r\n            this.position += length;\r\n        }\r\n        else {\r\n            result = new Int8Array(new ArrayBuffer(length));\r\n            for (var i = 0; i < length; i++) {\r\n                result[i] = this.data[this.position];\r\n                this.position += DirectMemory.SIZE_OF_INT8;\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n    readInt16Array(length, createNewBuffer = true) {\r\n        var size = length * DirectMemory.SIZE_OF_INT16;\r\n        if (!this.validate(size))\r\n            return null;\r\n        if (!createNewBuffer) {\r\n            var result = new Int16Array(this.buffer, this.bufferOffset + this.position, length);\r\n            this.position += size;\r\n        }\r\n        else {\r\n            result = new Int16Array(new ArrayBuffer(size));\r\n            for (var i = 0; i < length; i++) {\r\n                result[i] = MemoryUtils_1.MemoryUtils.readInt16(this.data, this.position, this.endian === DirectMemory.LITTLE_ENDIAN);\r\n                this.position += DirectMemory.SIZE_OF_INT16;\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n    readInt32Array(length, createNewBuffer = true) {\r\n        var size = length * DirectMemory.SIZE_OF_INT32;\r\n        if (!this.validate(size))\r\n            return null;\r\n        if (!createNewBuffer) {\r\n            if ((this.bufferOffset + this.position) % 4 == 0) {\r\n                var result = new Int32Array(this.buffer, this.bufferOffset + this.position, length);\r\n                this.position += size;\r\n            }\r\n            else {\r\n                var tmp = new Uint8Array(new ArrayBuffer(size));\r\n                for (var i = 0; i < size; i++) {\r\n                    tmp[i] = this.data[this.position];\r\n                    this.position += DirectMemory.SIZE_OF_UINT8;\r\n                }\r\n                result = new Int32Array(tmp.buffer);\r\n            }\r\n        }\r\n        else {\r\n            result = new Int32Array(new ArrayBuffer(size));\r\n            for (var i = 0; i < length; i++) {\r\n                result[i] = MemoryUtils_1.MemoryUtils.readInt32(this.data, this.position, this.endian === DirectMemory.LITTLE_ENDIAN);\r\n                this.position += DirectMemory.SIZE_OF_INT32;\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n    readFloat32Array(length, createNewBuffer = true) {\r\n        var size = length * DirectMemory.SIZE_OF_FLOAT32;\r\n        if (!this.validate(size))\r\n            return null;\r\n        if (!createNewBuffer) {\r\n            if ((this.bufferOffset + this.position) % 4 == 0) {\r\n                var result = new Float32Array(this.buffer, this.bufferOffset + this.position, length);\r\n                this.position += size;\r\n            }\r\n            else {\r\n                var tmp = new Uint8Array(new ArrayBuffer(size));\r\n                for (var i = 0; i < size; i++) {\r\n                    tmp[i] = this.data[this.position];\r\n                    this.position += DirectMemory.SIZE_OF_UINT8;\r\n                }\r\n                result = new Float32Array(tmp.buffer);\r\n            }\r\n        }\r\n        else {\r\n            result = new Float32Array(new ArrayBuffer(size));\r\n            for (var i = 0; i < length; i++) {\r\n                result[i] = MemoryUtils_1.MemoryUtils.readFloat32(this.data, this.position, this.endian === DirectMemory.LITTLE_ENDIAN);\r\n                this.position += DirectMemory.SIZE_OF_FLOAT32;\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n    readFloat64Array(length, createNewBuffer = true) {\r\n        var size = length * DirectMemory.SIZE_OF_FLOAT64;\r\n        if (!this.validate(size))\r\n            return null;\r\n        if (!createNewBuffer) {\r\n            var result = new Float64Array(this.buffer, this.position, length);\r\n            this.position += size;\r\n        }\r\n        else {\r\n            result = new Float64Array(new ArrayBuffer(size));\r\n            for (var i = 0; i < length; i++) {\r\n                result[i] = MemoryUtils_1.MemoryUtils.readFloat64(this.data, this.position, this.endian === DirectMemory.LITTLE_ENDIAN);\r\n                this.position += DirectMemory.SIZE_OF_FLOAT64;\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n    validate(len) {\r\n        if (this.data.byteLength > 0 && this._position + len <= this.data.byteLength) {\r\n            return true;\r\n        }\r\n        else {\r\n            throw \"Error #2030: End of file was encountered\";\r\n        }\r\n    }\r\n    validateBuffer(len) {\r\n        this.write_position = len > this.write_position ? len : this.write_position;\r\n        if (this.data.byteLength < len) {\r\n            var tmp = new Uint8Array(new SharedArrayBuffer(len + this.BUFFER_EXT_SIZE));\r\n            tmp.set(new Uint8Array(this.data.buffer));\r\n            this.data.buffer = tmp.buffer;\r\n        }\r\n    }\r\n}\r\nDirectMemory.BIG_ENDIAN = \"bigEndian\";\r\nDirectMemory.LITTLE_ENDIAN = \"littleEndian\";\r\nDirectMemory.MIN_FLOAT32_VALUE = 1.1754943508222875e-38;\r\nDirectMemory.SIZE_OF_BOOLEAN = 1;\r\nDirectMemory.SIZE_OF_INT8 = 1;\r\nDirectMemory.SIZE_OF_INT16 = 2;\r\nDirectMemory.SIZE_OF_INT32 = 4;\r\nDirectMemory.SIZE_OF_INT64 = 8;\r\nDirectMemory.SIZE_OF_UINT8 = 1;\r\nDirectMemory.SIZE_OF_UINT16 = 2;\r\nDirectMemory.SIZE_OF_UINT32 = 4;\r\nDirectMemory.SIZE_OF_UINT64 = 8;\r\nDirectMemory.SIZE_OF_FLOAT32 = 4;\r\nDirectMemory.SIZE_OF_FLOAT64 = 8;\r\nexports.DirectMemory = DirectMemory;\r\n"
    },
    {
      "id": 14,
      "identifier": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-core\\src\\engine\\scene\\Axis.ts",
      "name": "./packages/render-core/src/engine/scene/Axis.ts",
      "index": 17,
      "index2": 11,
      "size": 325,
      "cacheable": true,
      "built": false,
      "optional": false,
      "prefetched": false,
      "chunks": [
        0
      ],
      "assets": [],
      "issuer": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-core\\src\\engine\\scene\\shapes\\Box.ts",
      "issuerId": 5,
      "issuerName": "./packages/render-core/src/engine/scene/shapes/Box.ts",
      "failed": false,
      "errors": 0,
      "warnings": 0,
      "reasons": [
        {
          "moduleId": 5,
          "moduleIdentifier": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-core\\src\\engine\\scene\\shapes\\Box.ts",
          "module": "./packages/render-core/src/engine/scene/shapes/Box.ts",
          "moduleName": "./packages/render-core/src/engine/scene/shapes/Box.ts",
          "type": "cjs require",
          "userRequest": "../Axis",
          "loc": "4:15-33"
        },
        {
          "moduleId": 30,
          "moduleIdentifier": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-core\\src\\engine\\scene\\tree\\SharedNode.ts",
          "module": "./packages/render-core/src/engine/scene/tree/SharedNode.ts",
          "moduleName": "./packages/render-core/src/engine/scene/tree/SharedNode.ts",
          "type": "cjs require",
          "userRequest": "../Axis",
          "loc": "3:15-33"
        },
        {
          "moduleId": 42,
          "moduleIdentifier": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-core\\src\\engine\\scene\\tree\\Node.ts",
          "module": "./packages/render-core/src/engine/scene/tree/Node.ts",
          "moduleName": "./packages/render-core/src/engine/scene/tree/Node.ts",
          "type": "cjs require",
          "userRequest": "../Axis",
          "loc": "3:15-33"
        }
      ],
      "usedExports": true,
      "providedExports": null,
      "optimizationBailout": [],
      "depth": 4,
      "source": "\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar Axis;\r\n(function (Axis) {\r\n    Axis[Axis[\"AxisNone\"] = 0] = \"AxisNone\";\r\n    Axis[Axis[\"AxisX\"] = 1] = \"AxisX\";\r\n    Axis[Axis[\"AxisY\"] = 2] = \"AxisY\";\r\n    Axis[Axis[\"AxisZ\"] = 3] = \"AxisZ\";\r\n})(Axis = exports.Axis || (exports.Axis = {}));\r\n"
    },
    {
      "id": 15,
      "identifier": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-core\\src\\engine\\utils\\MathUtils.ts",
      "name": "./packages/render-core/src/engine/utils/MathUtils.ts",
      "index": 22,
      "index2": 16,
      "size": 1025,
      "cacheable": true,
      "built": false,
      "optional": false,
      "prefetched": false,
      "chunks": [
        0
      ],
      "assets": [],
      "issuer": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-core\\src\\engine\\scene\\materials\\Texture.ts",
      "issuerId": 10,
      "issuerName": "./packages/render-core/src/engine/scene/materials/Texture.ts",
      "failed": false,
      "errors": 0,
      "warnings": 0,
      "reasons": [
        {
          "moduleId": 10,
          "moduleIdentifier": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-core\\src\\engine\\scene\\materials\\Texture.ts",
          "module": "./packages/render-core/src/engine/scene/materials/Texture.ts",
          "moduleName": "./packages/render-core/src/engine/scene/materials/Texture.ts",
          "type": "cjs require",
          "userRequest": "../../utils/MathUtils",
          "loc": "6:20-52"
        },
        {
          "moduleId": 30,
          "moduleIdentifier": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-core\\src\\engine\\scene\\tree\\SharedNode.ts",
          "module": "./packages/render-core/src/engine/scene/tree/SharedNode.ts",
          "moduleName": "./packages/render-core/src/engine/scene/tree/SharedNode.ts",
          "type": "cjs require",
          "userRequest": "../../utils/MathUtils",
          "loc": "7:20-52"
        },
        {
          "moduleId": 42,
          "moduleIdentifier": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-core\\src\\engine\\scene\\tree\\Node.ts",
          "module": "./packages/render-core/src/engine/scene/tree/Node.ts",
          "moduleName": "./packages/render-core/src/engine/scene/tree/Node.ts",
          "type": "cjs require",
          "userRequest": "../../utils/MathUtils",
          "loc": "7:20-52"
        }
      ],
      "usedExports": true,
      "providedExports": null,
      "optimizationBailout": [],
      "depth": 3,
      "source": "\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nclass MathUtils {\r\n    static radians(degrees) {\r\n        return degrees * Math.PI / 180;\r\n    }\r\n    static degrees(radians) {\r\n        return radians * 180 / Math.PI;\r\n    }\r\n    static median(items) {\r\n        let n = items.length;\r\n        if (n == 0) {\r\n            return 0;\r\n        }\r\n        else if (n % 2 == 1) {\r\n            return items[n / 2];\r\n        }\r\n        else {\r\n            var a = items[n / 2 - 1];\r\n            var b = items[n / 2];\r\n            return (a + b) / 2;\r\n        }\r\n    }\r\n    static fract(x) {\r\n        let n = MathUtils.Modf(x);\r\n        return n.frac;\r\n    }\r\n    static Modf(f) {\r\n        var int = Math.floor(f);\r\n        var frac = f - int;\r\n        return { int: int, frac: frac };\r\n    }\r\n    static clampInt(x, lo, hi) {\r\n        if (x < lo) {\r\n            return lo;\r\n        }\r\n        if (x > hi) {\r\n            return hi;\r\n        }\r\n        return x;\r\n    }\r\n}\r\nexports.MathUtils = MathUtils;\r\n"
    },
    {
      "id": 16,
      "identifier": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-core\\src\\engine\\scene\\shapes\\Cube.ts",
      "name": "./packages/render-core/src/engine/scene/shapes/Cube.ts",
      "index": 24,
      "index2": 30,
      "size": 4135,
      "cacheable": true,
      "built": false,
      "optional": false,
      "prefetched": false,
      "chunks": [
        0
      ],
      "assets": [],
      "issuer": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-core\\src\\engine\\scene\\shapes\\Shape.ts",
      "issuerId": 6,
      "issuerName": "./packages/render-core/src/engine/scene/shapes/Shape.ts",
      "failed": false,
      "errors": 3,
      "warnings": 0,
      "reasons": [
        {
          "moduleId": 6,
          "moduleIdentifier": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-core\\src\\engine\\scene\\shapes\\Shape.ts",
          "module": "./packages/render-core/src/engine/scene/shapes/Shape.ts",
          "moduleName": "./packages/render-core/src/engine/scene/shapes/Shape.ts",
          "type": "cjs require",
          "userRequest": "./Cube",
          "loc": "3:15-32"
        },
        {
          "moduleId": 41,
          "moduleIdentifier": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-core\\src\\engine\\scene\\Scene.ts",
          "module": "./packages/render-core/src/engine/scene/Scene.ts",
          "moduleName": "./packages/render-core/src/engine/scene/Scene.ts",
          "type": "cjs require",
          "userRequest": "./shapes/Cube",
          "loc": "9:15-39"
        },
        {
          "moduleId": 52,
          "moduleIdentifier": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-client\\src\\views\\GIJSView.ts",
          "module": "./packages/render-client/src/views/GIJSView.ts",
          "moduleName": "./packages/render-client/src/views/GIJSView.ts",
          "type": "cjs require",
          "userRequest": "../../../render-core/src/engine/scene/shapes/Cube",
          "loc": "7:15-75"
        }
      ],
      "usedExports": true,
      "providedExports": null,
      "optimizationBailout": [],
      "depth": 2,
      "source": "\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst Vector3_1 = require(\"../../math/Vector3\");\r\nconst Material_1 = require(\"../materials/Material\");\r\nconst Box_1 = require(\"./Box\");\r\nconst Constants_1 = require(\"../../math/Constants\");\r\nconst Hit_1 = require(\"../../math/Hit\");\r\nconst Hit_2 = require(\"../../math/Hit\");\r\nconst Shape_1 = require(\"./Shape\");\r\nconst MaterialUtils_1 = require(\"../materials/MaterialUtils\");\r\nclass Cube {\r\n    constructor(min = new Vector3_1.Vector3(), max = new Vector3_1.Vector3(), material = null, box = null) {\r\n        this.min = min;\r\n        this.max = max;\r\n        this.material = material;\r\n        this.box = box;\r\n        this.type = Shape_1.ShapeType.CUBE;\r\n        this.memorySize = (Vector3_1.Vector3.SIZE * 2) + 2;\r\n    }\r\n    write(memory) {\r\n        memory.writeByte(this.type);\r\n        this.min.write(memory);\r\n        this.max.write(memory);\r\n        memory.writeInt(this.material.index);\r\n        return memory.position;\r\n    }\r\n    read(memory) {\r\n        this.min.read(memory);\r\n        this.max.read(memory);\r\n        var materialIndex = memory.readInt();\r\n        this.box = new Box_1.Box(this.min, this.max);\r\n        var material = Material_1.Material.map[materialIndex];\r\n        if (material) {\r\n            this.material = material;\r\n        }\r\n        return memory.position;\r\n    }\r\n    directWrite(memory, offset) {\r\n        memory[offset++] = this.type;\r\n        offset = this.min.directWrite(memory, offset);\r\n        offset = this.max.directWrite(memory, offset);\r\n        memory[offset++] = this.material.index;\r\n        return offset;\r\n    }\r\n    directRead(memory, offset) {\r\n        offset = this.min.directRead(memory, offset);\r\n        offset = this.max.directRead(memory, offset);\r\n        this.box = new Box_1.Box(this.min, this.max);\r\n        this.material.index = memory[offset++];\r\n        var material = Material_1.Material.map[this.material.index];\r\n        if (material) {\r\n            this.material = material;\r\n        }\r\n        return offset;\r\n    }\r\n    static fromJson(shape) {\r\n        return new Cube(Vector3_1.Vector3.fromJson(shape.min), Vector3_1.Vector3.fromJson(shape.max), MaterialUtils_1.MaterialUtils.fromJson(shape.material), Box_1.Box.fromJson(shape.box));\r\n    }\r\n    static newCube(min, max, material) {\r\n        var box = new Box_1.Box(min, max);\r\n        return new Cube(min, max, material, box);\r\n    }\r\n    compile() {\r\n    }\r\n    intersect(r) {\r\n        var n = this.min.sub(r.origin).div(r.direction);\r\n        var f = this.max.sub(r.origin).div(r.direction);\r\n        let _n = n;\r\n        n = _n.min(f);\r\n        f = _n.max(f);\r\n        var t0 = Math.max(Math.max(n.x, n.y), n.z);\r\n        var t1 = Math.min(Math.min(f.x, f.y), f.z);\r\n        if (t0 > 0 && t0 < t1) {\r\n            return new Hit_1.Hit(this, t0);\r\n        }\r\n        return Hit_2.NoHit;\r\n    }\r\n    getColor(p) {\r\n        return this.material.color;\r\n    }\r\n    getMaterial(p) {\r\n        return this.material;\r\n    }\r\n    getNormal(p) {\r\n        if (p.x < this.min.x + Constants_1.EPS) {\r\n            return new Vector3_1.Vector3(-1, 0, 0);\r\n        }\r\n        else if (p.x > this.max.x - Constants_1.EPS) {\r\n            return new Vector3_1.Vector3(1, 0, 0);\r\n        }\r\n        else if (p.y < this.min.y + Constants_1.EPS) {\r\n            return new Vector3_1.Vector3(0, -1, 0);\r\n        }\r\n        else if (p.y > this.max.y - Constants_1.EPS) {\r\n            return new Vector3_1.Vector3(0, 1, 0);\r\n        }\r\n        else if (p.z < this.min.z + Constants_1.EPS) {\r\n            return new Vector3_1.Vector3(0, 0, -1);\r\n        }\r\n        else if (p.z > this.max.z - Constants_1.EPS) {\r\n            return new Vector3_1.Vector3(0, 0, 1);\r\n        }\r\n        return new Vector3_1.Vector3(0, 1, 0);\r\n    }\r\n    getRandomPoint() {\r\n        var x = this.min.x + Math.random() * (this.max.x - this.min.x);\r\n        var y = this.min.y + Math.random() * (this.max.y - this.min.y);\r\n        var z = this.min.z + Math.random() * (this.max.z - this.min.z);\r\n        return new Vector3_1.Vector3(x, y, z);\r\n    }\r\n}\r\nexports.Cube = Cube;\r\n"
    },
    {
      "id": 17,
      "identifier": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-core\\src\\engine\\scene\\materials\\MaterialUtils.ts",
      "name": "./packages/render-core/src/engine/scene/materials/MaterialUtils.ts",
      "index": 30,
      "index2": 29,
      "size": 2147,
      "cacheable": true,
      "built": false,
      "optional": false,
      "prefetched": false,
      "chunks": [
        0
      ],
      "assets": [],
      "issuer": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-core\\src\\engine\\scene\\shapes\\Cube.ts",
      "issuerId": 16,
      "issuerName": "./packages/render-core/src/engine/scene/shapes/Cube.ts",
      "failed": false,
      "errors": 0,
      "warnings": 0,
      "reasons": [
        {
          "moduleId": 11,
          "moduleIdentifier": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-core\\src\\engine\\scene\\shapes\\Triangle.ts",
          "module": "./packages/render-core/src/engine/scene/shapes/Triangle.ts",
          "moduleName": "./packages/render-core/src/engine/scene/shapes/Triangle.ts",
          "type": "cjs require",
          "userRequest": "../materials/MaterialUtils",
          "loc": "11:24-61"
        },
        {
          "moduleId": 16,
          "moduleIdentifier": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-core\\src\\engine\\scene\\shapes\\Cube.ts",
          "module": "./packages/render-core/src/engine/scene/shapes/Cube.ts",
          "moduleName": "./packages/render-core/src/engine/scene/shapes/Cube.ts",
          "type": "cjs require",
          "userRequest": "../materials/MaterialUtils",
          "loc": "10:24-61"
        },
        {
          "moduleId": 18,
          "moduleIdentifier": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-core\\src\\engine\\scene\\shapes\\Sphere.ts",
          "module": "./packages/render-core/src/engine/scene/shapes/Sphere.ts",
          "moduleName": "./packages/render-core/src/engine/scene/shapes/Sphere.ts",
          "type": "cjs require",
          "userRequest": "../materials/MaterialUtils",
          "loc": "9:24-61"
        }
      ],
      "usedExports": true,
      "providedExports": null,
      "optimizationBailout": [],
      "depth": 3,
      "source": "\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst Material_1 = require(\"./Material\");\r\nconst Material_2 = require(\"./Material\");\r\nconst Color_1 = require(\"../../math/Color\");\r\nconst Texture_1 = require(\"./Texture\");\r\nconst Attenuation_1 = require(\"./Attenuation\");\r\nconst DiffuseMaterial_1 = require(\"./DiffuseMaterial\");\r\nconst SpecularMaterial_1 = require(\"./SpecularMaterial\");\r\nconst ClearMaterial_1 = require(\"./ClearMaterial\");\r\nconst GlossyMaterial_1 = require(\"./GlossyMaterial\");\r\nconst LightMaterial_1 = require(\"./LightMaterial\");\r\nclass MaterialUtils {\r\n    static fromJson(material) {\r\n        if (!material)\r\n            return null;\r\n        switch (material.type) {\r\n            case Material_2.MaterialType.GENERIC:\r\n                return new Material_1.Material(Color_1.Color.fromJson(material.color), Texture_1.Texture.fromJson(material.texture), Texture_1.Texture.fromJson(material.normalTexture), Texture_1.Texture.fromJson(material.bumpTexture), material.bumpMultiplier, material.emittance, Attenuation_1.Attenuation.fromJson(material.attenuation), material.index, material.gloss, material.tint, material.transparent);\r\n            case Material_2.MaterialType.DIFFUSE:\r\n                return new DiffuseMaterial_1.DiffuseMaterial(Color_1.Color.fromJson(material.color));\r\n            case Material_2.MaterialType.SPECULAR:\r\n                return new SpecularMaterial_1.SpecularMaterial(Color_1.Color.fromJson(material.color), material.index);\r\n            case Material_2.MaterialType.CLEAR:\r\n                return new ClearMaterial_1.ClearMaterial(material.index, material.gloss);\r\n            case Material_2.MaterialType.GLOSSY:\r\n                return new GlossyMaterial_1.GlossyMaterial(Color_1.Color.fromJson(material.color), material.index, material.gloss);\r\n            case Material_2.MaterialType.EMISSIVE:\r\n                return new LightMaterial_1.LightMaterial(Color_1.Color.fromJson(material.color), material.emittance, Attenuation_1.Attenuation.fromJson(material.attenuation));\r\n        }\r\n    }\r\n}\r\nMaterialUtils.debug = true;\r\nexports.MaterialUtils = MaterialUtils;\r\n"
    },
    {
      "id": 18,
      "identifier": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-core\\src\\engine\\scene\\shapes\\Sphere.ts",
      "name": "./packages/render-core/src/engine/scene/shapes/Sphere.ts",
      "index": 36,
      "index2": 31,
      "size": 4717,
      "cacheable": true,
      "built": false,
      "optional": false,
      "prefetched": false,
      "chunks": [
        0
      ],
      "assets": [],
      "issuer": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-core\\src\\engine\\scene\\shapes\\Shape.ts",
      "issuerId": 6,
      "issuerName": "./packages/render-core/src/engine/scene/shapes/Shape.ts",
      "failed": false,
      "errors": 3,
      "warnings": 0,
      "reasons": [
        {
          "moduleId": 6,
          "moduleIdentifier": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-core\\src\\engine\\scene\\shapes\\Shape.ts",
          "module": "./packages/render-core/src/engine/scene/shapes/Shape.ts",
          "moduleName": "./packages/render-core/src/engine/scene/shapes/Shape.ts",
          "type": "cjs require",
          "userRequest": "./Sphere",
          "loc": "4:17-36"
        },
        {
          "moduleId": 41,
          "moduleIdentifier": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-core\\src\\engine\\scene\\Scene.ts",
          "module": "./packages/render-core/src/engine/scene/Scene.ts",
          "moduleName": "./packages/render-core/src/engine/scene/Scene.ts",
          "type": "cjs require",
          "userRequest": "./shapes/Sphere",
          "loc": "10:17-43"
        },
        {
          "moduleId": 52,
          "moduleIdentifier": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-client\\src\\views\\GIJSView.ts",
          "module": "./packages/render-client/src/views/GIJSView.ts",
          "moduleName": "./packages/render-client/src/views/GIJSView.ts",
          "type": "cjs require",
          "userRequest": "../../../render-core/src/engine/scene/shapes/Sphere",
          "loc": "9:17-79"
        }
      ],
      "usedExports": true,
      "providedExports": null,
      "optimizationBailout": [],
      "depth": 2,
      "source": "\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst Vector3_1 = require(\"../../math/Vector3\");\r\nconst Material_1 = require(\"../materials/Material\");\r\nconst Box_1 = require(\"./Box\");\r\nconst Hit_1 = require(\"../../math/Hit\");\r\nconst Hit_2 = require(\"../../math/Hit\");\r\nconst Shape_1 = require(\"./Shape\");\r\nconst MaterialUtils_1 = require(\"../materials/MaterialUtils\");\r\nclass Sphere {\r\n    constructor(center = new Vector3_1.Vector3(), radius = 1, material = null, box = null) {\r\n        this.center = center;\r\n        this.radius = radius;\r\n        this.material = material;\r\n        this.box = box;\r\n        this.type = Shape_1.ShapeType.SPHERE;\r\n        this.memorySize = Vector3_1.Vector3.SIZE + 3;\r\n        if (!box && center) {\r\n            var min = new Vector3_1.Vector3(center.x - radius, center.y - radius, center.z - radius);\r\n            var max = new Vector3_1.Vector3(center.x + radius, center.y + radius, center.z + radius);\r\n            this.box = new Box_1.Box(min, max);\r\n        }\r\n    }\r\n    directRead(memory, offset) {\r\n        offset = this.center.directRead(memory, offset);\r\n        this.radius = memory[offset++];\r\n        var min = new Vector3_1.Vector3(this.center.x - this.radius, this.center.y - this.radius, this.center.z - this.radius);\r\n        var max = new Vector3_1.Vector3(this.center.x + this.radius, this.center.y + this.radius, this.center.z + this.radius);\r\n        this.box = new Box_1.Box(min, max);\r\n        var materialIndex = memory[offset++];\r\n        var material = Material_1.Material.map[materialIndex];\r\n        if (material) {\r\n            this.material = material;\r\n        }\r\n        return offset;\r\n    }\r\n    directWrite(memory, offset) {\r\n        memory[offset++] = this.type;\r\n        offset = this.center.directWrite(memory, offset);\r\n        memory[offset++] = this.radius;\r\n        memory[offset++] = this.material.index;\r\n        return offset;\r\n    }\r\n    read(memory) {\r\n        this.center.read(memory);\r\n        this.radius = memory.readFloat();\r\n        var min = new Vector3_1.Vector3(this.center.x - this.radius, this.center.y - this.radius, this.center.z - this.radius);\r\n        var max = new Vector3_1.Vector3(this.center.x + this.radius, this.center.y + this.radius, this.center.z + this.radius);\r\n        this.box = new Box_1.Box(min, max);\r\n        var materialIndex = memory.readInt();\r\n        var material = Material_1.Material.map[materialIndex];\r\n        if (material) {\r\n            this.material = material;\r\n        }\r\n        return memory.position;\r\n    }\r\n    write(memory) {\r\n        memory.writeByte(this.type);\r\n        this.center.write(memory);\r\n        memory.writeFloat(this.radius);\r\n        memory.writeInt(this.material.index);\r\n        return memory.position;\r\n    }\r\n    static fromJson(sphere) {\r\n        return new Sphere(Vector3_1.Vector3.fromJson(sphere.center), sphere.radius, MaterialUtils_1.MaterialUtils.fromJson(sphere.material), Box_1.Box.fromJson(sphere.box));\r\n    }\r\n    static newSphere(center, radius, material) {\r\n        var min = new Vector3_1.Vector3(center.x - radius, center.y - radius, center.z - radius);\r\n        var max = new Vector3_1.Vector3(center.x + radius, center.y + radius, center.z + radius);\r\n        var box = new Box_1.Box(min, max);\r\n        return new Sphere(center, radius, material, box);\r\n    }\r\n    compile() {\r\n    }\r\n    intersect(r) {\r\n        var to = r.origin.sub(this.center);\r\n        var b = to.dot(r.direction);\r\n        var c = to.dot(to) - this.radius * this.radius;\r\n        var d = b * b - c;\r\n        if (d > 0) {\r\n            d = Math.sqrt(d);\r\n            var t1 = -b - d;\r\n            if (t1 > 0) {\r\n                return new Hit_1.Hit(this, t1);\r\n            }\r\n        }\r\n        return Hit_2.NoHit;\r\n    }\r\n    getColor(p) {\r\n        if (this.material.texture == null) {\r\n            return this.material.color;\r\n        }\r\n        var u = Math.atan2(p.z, p.x);\r\n        var v = Math.atan2(p.y, new Vector3_1.Vector3(p.x, 0, p.z).length());\r\n        u = (u + Math.PI) / (2 * Math.PI);\r\n        v = 1 - (v + Math.PI / 2) / Math.PI;\r\n        return this.material.texture.sample(u, v);\r\n    }\r\n    getMaterial(p) {\r\n        return this.material;\r\n    }\r\n    getNormal(p) {\r\n        return p.sub(this.center).normalize();\r\n    }\r\n    getRandomPoint() {\r\n        while (true) {\r\n            var x = Math.random() * 2 - 1;\r\n            var y = Math.random() * 2 - 1;\r\n            var z = Math.random() * 2 - 1;\r\n            var v = new Vector3_1.Vector3(x, y, z);\r\n            if (v.length() <= 1) {\r\n                return v.mulScalar(this.radius).add(this.center);\r\n            }\r\n        }\r\n    }\r\n}\r\nexports.Sphere = Sphere;\r\n"
    },
    {
      "id": 19,
      "identifier": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-core\\src\\engine\\scene\\shapes\\Mesh.ts",
      "name": "./packages/render-core/src/engine/scene/shapes/Mesh.ts",
      "index": 37,
      "index2": 37,
      "size": 6425,
      "cacheable": true,
      "built": true,
      "optional": false,
      "prefetched": false,
      "chunks": [
        0
      ],
      "assets": [],
      "issuer": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-core\\src\\engine\\scene\\shapes\\Shape.ts",
      "issuerId": 6,
      "issuerName": "./packages/render-core/src/engine/scene/shapes/Shape.ts",
      "failed": false,
      "errors": 5,
      "warnings": 0,
      "reasons": [
        {
          "moduleId": 6,
          "moduleIdentifier": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-core\\src\\engine\\scene\\shapes\\Shape.ts",
          "module": "./packages/render-core/src/engine/scene/shapes/Shape.ts",
          "moduleName": "./packages/render-core/src/engine/scene/shapes/Shape.ts",
          "type": "cjs require",
          "userRequest": "./Mesh",
          "loc": "5:15-32"
        },
        {
          "moduleId": 41,
          "moduleIdentifier": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-core\\src\\engine\\scene\\Scene.ts",
          "module": "./packages/render-core/src/engine/scene/Scene.ts",
          "moduleName": "./packages/render-core/src/engine/scene/Scene.ts",
          "type": "cjs require",
          "userRequest": "./shapes/Mesh",
          "loc": "11:15-39"
        },
        {
          "moduleId": 52,
          "moduleIdentifier": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-client\\src\\views\\GIJSView.ts",
          "module": "./packages/render-client/src/views/GIJSView.ts",
          "moduleName": "./packages/render-client/src/views/GIJSView.ts",
          "type": "cjs require",
          "userRequest": "../../../render-core/src/engine/scene/shapes/Mesh",
          "loc": "12:15-75"
        }
      ],
      "usedExports": true,
      "providedExports": null,
      "optimizationBailout": [],
      "depth": 2,
      "source": "\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst Triangle_1 = require(\"./Triangle\");\r\nconst Matrix4_1 = require(\"../../math/Matrix4\");\r\nconst Vector3_1 = require(\"../../math/Vector3\");\r\nconst Color_1 = require(\"../../math/Color\");\r\nconst MapUtils_1 = require(\"../../utils/MapUtils\");\r\nconst Tree_1 = require(\"../tree/Tree\");\r\nconst Box_1 = require(\"./Box\");\r\nconst Shape_1 = require(\"./Shape\");\r\nconst SharedTree_1 = require(\"../tree/SharedTree\");\r\nclass Mesh {\r\n    constructor(box = null, triangles = [], tree = null) {\r\n        this.box = box;\r\n        this.triangles = triangles;\r\n        this.tree = tree;\r\n        this.type = Shape_1.ShapeType.MESH;\r\n    }\r\n    get memorySize() {\r\n        if (this.box && this.triangles) {\r\n            return Box_1.Box.SIZE + this.triangles.length * Triangle_1.Triangle.SIZE + 2;\r\n        }\r\n        else {\r\n            throw \"Box or Triangles are missing, box:\" + this.box + \", triangles:\" + this.triangles.length;\r\n        }\r\n    }\r\n    directRead(memory, offset) {\r\n        this.box = new Box_1.Box();\r\n        offset = this.box.directRead(memory, offset);\r\n        var numTriangles = memory[offset++];\r\n        for (var i = 0; i < numTriangles; i++) {\r\n            var triangle = new Triangle_1.Triangle();\r\n            offset = triangle.directRead(memory, offset);\r\n            this.triangles.push(triangle);\r\n        }\r\n        return offset;\r\n    }\r\n    directWrite(memory, offset) {\r\n        memory[offset++] = this.type;\r\n        offset = this.box.directWrite(memory, offset);\r\n        memory[offset++] = this.triangles.length;\r\n        this.triangles.forEach(function (t, index) {\r\n            t.index = index;\r\n            offset = t.directWrite(memory, offset);\r\n        });\r\n        this.tree = SharedTree_1.SharedTree.newTree(this.triangles, this.box);\r\n        return offset;\r\n    }\r\n    read(memory) {\r\n        if (!this.box) {\r\n            this.box = new Box_1.Box();\r\n        }\r\n        this.box.read(memory);\r\n        var numTriangles = memory.readUnsignedInt();\r\n        for (var i = 0; i < numTriangles; i++) {\r\n            var t = new Triangle_1.Triangle();\r\n            t.read(memory);\r\n            this.triangles.push(t);\r\n        }\r\n        this.tree = SharedTree_1.SharedTree.readFromMemory(memory, this.triangles);\r\n        this.tree.box = this.box;\r\n        return memory.position;\r\n    }\r\n    write(memory) {\r\n        memory.writeByte(this.type);\r\n        this.box.write(memory);\r\n        memory.writeUnsignedInt(this.triangles.length);\r\n        this.triangles.forEach(function (t, index) {\r\n            t.index = index;\r\n            t.write(memory);\r\n        });\r\n        SharedTree_1.SharedTree.buildAndWrite(memory, this.triangles);\r\n        return memory.position;\r\n    }\r\n    static fromJson(mesh) {\r\n        return new Mesh(Box_1.Box.fromJson(mesh.box), Triangle_1.Triangle.fromJson(mesh.triangles));\r\n    }\r\n    static newMesh(triangles) {\r\n        var box = Box_1.Box.boxForTriangles(triangles);\r\n        return new Mesh(box, triangles, null);\r\n    }\r\n    compile() {\r\n        var m = this;\r\n        if (m.tree == null) {\r\n            m.tree = Tree_1.Tree.newTree(m.triangles, m.box);\r\n        }\r\n    }\r\n    intersect(r) {\r\n        return this.tree.intersect(r);\r\n    }\r\n    getColor(p) {\r\n        return new Color_1.Color();\r\n    }\r\n    getMaterial(p) {\r\n        return this.material;\r\n    }\r\n    getNormal(p) {\r\n        return new Vector3_1.Vector3();\r\n    }\r\n    getRandomPoint() {\r\n        return new Vector3_1.Vector3();\r\n    }\r\n    updateBox() {\r\n        this.box = Box_1.Box.boxForTriangles(this.triangles);\r\n    }\r\n    _smoothNormalsThreshold(normal, normals, threshold) {\r\n        var result = new Vector3_1.Vector3();\r\n        normals.forEach(function (x) {\r\n            if (x.dot(normal) >= threshold) {\r\n                result = result.add(x);\r\n            }\r\n        });\r\n        return result.normalize();\r\n    }\r\n    smoothNormalsThreshold(radians) {\r\n        var m = this;\r\n        var threshold = Math.cos(radians);\r\n        var lookup = new Map();\r\n        m.triangles.forEach(function (t) {\r\n            lookup[t.v1] = MapUtils_1.append(lookup[t.v1], t.n1);\r\n            lookup[t.v2] = MapUtils_1.append(lookup[t.v2], t.n2);\r\n            lookup[t.v3] = MapUtils_1.append(lookup[t.v3], t.n3);\r\n        });\r\n        m.triangles.forEach(function (t) {\r\n            t.n1 = m._smoothNormalsThreshold(t.n1, lookup[t.v1], threshold);\r\n            t.n2 = m._smoothNormalsThreshold(t.n2, lookup[t.v2], threshold);\r\n            t.n3 = m._smoothNormalsThreshold(t.n3, lookup[t.v3], threshold);\r\n        });\r\n    }\r\n    smoothNormals() {\r\n        var m = this;\r\n        var lookup = new Map();\r\n        m.triangles.forEach(function (t) {\r\n            lookup[t.v1] = lookup[t.v1] ? lookup[t.v1].add(t.n1) : t.n1;\r\n            lookup[t.v2] = lookup[t.v2] ? lookup[t.v2].add(t.n2) : t.v2;\r\n            lookup[t.v3] = lookup[t.v3] ? lookup[t.v3].add(t.n3) : t.v3;\r\n        });\r\n        lookup.forEach(function (v, k) {\r\n            lookup[k] = v.normalize();\r\n        });\r\n        m.triangles.forEach(function (t) {\r\n            t.n1 = lookup[t.v1];\r\n            t.n2 = lookup[t.v2];\r\n            t.n3 = lookup[t.v3];\r\n        });\r\n    }\r\n    moveTo(position, anchor) {\r\n        var m = this;\r\n        var matrix = Matrix4_1.Matrix4.translate(position.sub(m.box.anchor(anchor)));\r\n        m.transform(matrix);\r\n    }\r\n    fitInside(box, anchor) {\r\n        var m = this;\r\n        var scale = box.size().div(m.box.size()).minComponent();\r\n        var extra = box.size().sub(m.box.size().mulScalar(scale));\r\n        var matrix = Matrix4_1.Matrix4.identity();\r\n        matrix = matrix.translate(m.box.min.mulScalar(-1));\r\n        matrix = matrix.scale(new Vector3_1.Vector3(scale, scale, scale));\r\n        matrix = matrix.translate(box.min.add(extra.mul(anchor)));\r\n        m.transform(matrix);\r\n    }\r\n    transform(matrix) {\r\n        var m = this;\r\n        m.triangles.forEach(function (t) {\r\n            t.v1 = matrix.mulPosition(t.v1);\r\n            t.v2 = matrix.mulPosition(t.v2);\r\n            t.v3 = matrix.mulPosition(t.v3);\r\n            t.n1 = matrix.mulDirection(t.n1);\r\n            t.n2 = matrix.mulDirection(t.n2);\r\n            t.n3 = matrix.mulDirection(t.n3);\r\n            t.updateBox();\r\n        });\r\n        m.updateBox();\r\n        m.tree = null;\r\n    }\r\n}\r\nMesh.inter = 0;\r\nexports.Mesh = Mesh;\r\n"
    },
    {
      "id": 20,
      "identifier": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-core\\src\\pointer\\src\\ByteArrayBase.ts",
      "name": "./packages/render-core/src/pointer/src/ByteArrayBase.ts",
      "index": 40,
      "index2": 33,
      "size": 27338,
      "cacheable": true,
      "built": false,
      "optional": false,
      "prefetched": false,
      "chunks": [
        0
      ],
      "assets": [],
      "issuer": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-core\\src\\engine\\scene\\tree\\SharedTree.ts",
      "issuerId": 29,
      "issuerName": "./packages/render-core/src/engine/scene/tree/SharedTree.ts",
      "failed": false,
      "errors": 5,
      "warnings": 0,
      "reasons": [
        {
          "moduleId": 11,
          "moduleIdentifier": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-core\\src\\engine\\scene\\shapes\\Triangle.ts",
          "module": "./packages/render-core/src/engine/scene/shapes/Triangle.ts",
          "moduleName": "./packages/render-core/src/engine/scene/shapes/Triangle.ts",
          "type": "cjs require",
          "userRequest": "../../../pointer/src/ByteArrayBase",
          "loc": "12:24-69"
        },
        {
          "moduleId": 29,
          "moduleIdentifier": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-core\\src\\engine\\scene\\tree\\SharedTree.ts",
          "module": "./packages/render-core/src/engine/scene/tree/SharedTree.ts",
          "moduleName": "./packages/render-core/src/engine/scene/tree/SharedTree.ts",
          "type": "cjs require",
          "userRequest": "../../../pointer/src/ByteArrayBase",
          "loc": "6:24-69"
        },
        {
          "moduleId": 30,
          "moduleIdentifier": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-core\\src\\engine\\scene\\tree\\SharedNode.ts",
          "module": "./packages/render-core/src/engine/scene/tree/SharedNode.ts",
          "moduleName": "./packages/render-core/src/engine/scene/tree/SharedNode.ts",
          "type": "cjs require",
          "userRequest": "../../../pointer/src/ByteArrayBase",
          "loc": "8:24-69"
        }
      ],
      "usedExports": true,
      "providedExports": null,
      "optimizationBailout": [],
      "depth": 3,
      "source": "\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nclass ByteArrayBase {\r\n    constructor(buffer, offset = 0, length = 0) {\r\n        this.BUFFER_EXT_SIZE = 1024;\r\n        this.array = null;\r\n        this.EOF_byte = -1;\r\n        this.EOF_code_point = -1;\r\n        if (buffer == undefined) {\r\n            buffer = new ArrayBuffer(this.BUFFER_EXT_SIZE);\r\n            this.write_position = 0;\r\n        }\r\n        else if (buffer == null) {\r\n            this.write_position = 0;\r\n        }\r\n        else {\r\n            this.write_position = length > 0 ? length : buffer.byteLength;\r\n        }\r\n        if (buffer) {\r\n            this.data = new DataView(buffer, offset, length > 0 ? length : buffer.byteLength);\r\n        }\r\n        this._position = 0;\r\n        this.endian = ByteArrayBase.BIG_ENDIAN;\r\n    }\r\n    get buffer() {\r\n        return this.data.buffer;\r\n    }\r\n    set buffer(value) {\r\n        this.data = new DataView(value);\r\n    }\r\n    get dataView() {\r\n        return this.data;\r\n    }\r\n    set dataView(value) {\r\n        this.data = value;\r\n        this.write_position = value.byteLength;\r\n    }\r\n    get phyPosition() {\r\n        return this._position + this.data.byteOffset;\r\n    }\r\n    get bufferOffset() {\r\n        return this.data.byteOffset;\r\n    }\r\n    get position() {\r\n        return this._position;\r\n    }\r\n    set position(value) {\r\n        if (this._position < value) {\r\n            if (!this.validate(this._position - value)) {\r\n                return;\r\n            }\r\n        }\r\n        this._position = value;\r\n        this.write_position = value > this.write_position ? value : this.write_position;\r\n    }\r\n    get length() {\r\n        return this.write_position;\r\n    }\r\n    set length(value) {\r\n        this.validateBuffer(value);\r\n    }\r\n    get bytesAvailable() {\r\n        return this.data.byteLength - this._position;\r\n    }\r\n    clear() {\r\n        this._position = 0;\r\n    }\r\n    getArray() {\r\n        if (this.array == null) {\r\n            this.array = new Uint8Array(this.data.buffer, this.data.byteOffset, this.data.byteLength);\r\n        }\r\n        return this.array;\r\n    }\r\n    setArray(array) {\r\n        this.array = array;\r\n        this.setBuffer(array.buffer, array.byteOffset, array.byteLength);\r\n    }\r\n    setBuffer(buffer, offset = 0, length = 0) {\r\n        if (buffer) {\r\n            this.data = new DataView(buffer, offset, length > 0 ? length : buffer.byteLength);\r\n            this.write_position = length > 0 ? length : buffer.byteLength;\r\n        }\r\n        else {\r\n            this.write_position = 0;\r\n        }\r\n        this._position = 0;\r\n    }\r\n    readBoolean() {\r\n        if (!this.validate(ByteArrayBase.SIZE_OF_BOOLEAN))\r\n            return null;\r\n        return this.data.getUint8(this.position++) != 0;\r\n    }\r\n    readByte() {\r\n        if (!this.validate(ByteArrayBase.SIZE_OF_INT8))\r\n            return null;\r\n        return this.data.getInt8(this.position++);\r\n    }\r\n    readBytes(_bytes = null, offset = 0, length = 0, createNewBuffer = false) {\r\n        if (length == 0) {\r\n            length = this.bytesAvailable;\r\n        }\r\n        else if (!this.validate(length))\r\n            return null;\r\n        if (createNewBuffer) {\r\n            _bytes = _bytes == null ? new ByteArrayBase(new ArrayBuffer(length)) : _bytes;\r\n            for (var i = 0; i < length; i++) {\r\n                _bytes.data.setUint8(i + offset, this.data.getUint8(this.position++));\r\n            }\r\n        }\r\n        else {\r\n            _bytes = _bytes == null ? new ByteArrayBase(null) : _bytes;\r\n            _bytes.dataView = new DataView(this.data.buffer, this.bufferOffset + this.position, length);\r\n            this.position += length;\r\n        }\r\n        return _bytes;\r\n    }\r\n    readDouble() {\r\n        if (!this.validate(ByteArrayBase.SIZE_OF_FLOAT64))\r\n            return null;\r\n        var value = this.data.getFloat64(this.position, this.endian == ByteArrayBase.LITTLE_ENDIAN);\r\n        this.position += ByteArrayBase.SIZE_OF_FLOAT64;\r\n        return value;\r\n    }\r\n    readFloat() {\r\n        if (!this.validate(ByteArrayBase.SIZE_OF_FLOAT32))\r\n            return null;\r\n        var value = this.data.getFloat32(this.position, this.endian == ByteArrayBase.LITTLE_ENDIAN);\r\n        this.position += ByteArrayBase.SIZE_OF_FLOAT32;\r\n        return value;\r\n    }\r\n    readInt() {\r\n        if (!this.validate(ByteArrayBase.SIZE_OF_INT32))\r\n            return null;\r\n        var value = this.data.getInt32(this.position, this.endian == ByteArrayBase.LITTLE_ENDIAN);\r\n        this.position += ByteArrayBase.SIZE_OF_INT32;\r\n        return value;\r\n    }\r\n    readMultiByte(length, charSet) {\r\n        if (!this.validate(length))\r\n            return null;\r\n        return \"\";\r\n    }\r\n    readShort() {\r\n        if (!this.validate(ByteArrayBase.SIZE_OF_INT16))\r\n            return null;\r\n        var value = this.data.getInt16(this.position, this.endian == ByteArrayBase.LITTLE_ENDIAN);\r\n        this.position += ByteArrayBase.SIZE_OF_INT16;\r\n        return value;\r\n    }\r\n    readUnsignedByte() {\r\n        if (!this.validate(ByteArrayBase.SIZE_OF_UINT8))\r\n            return null;\r\n        return this.data.getUint8(this.position++);\r\n    }\r\n    readUnsignedInt() {\r\n        if (!this.validate(ByteArrayBase.SIZE_OF_UINT32))\r\n            return null;\r\n        var value = this.data.getUint32(this.position, this.endian == ByteArrayBase.LITTLE_ENDIAN);\r\n        this.position += ByteArrayBase.SIZE_OF_UINT32;\r\n        return value;\r\n    }\r\n    readVariableSizedUnsignedInt() {\r\n        var value;\r\n        var c = this.readUnsignedByte();\r\n        if (c != 0xFF) {\r\n            value = c << 8;\r\n            c = this.readUnsignedByte();\r\n            value |= c;\r\n        }\r\n        else {\r\n            c = this.readUnsignedByte();\r\n            value = c << 16;\r\n            c = this.readUnsignedByte();\r\n            value |= c << 8;\r\n            c = this.readUnsignedByte();\r\n            value |= c;\r\n        }\r\n        return value;\r\n    }\r\n    readU16VX() {\r\n        return (this.readUnsignedByte() << 8) | this.readUnsignedByte();\r\n    }\r\n    readUnsignedShort() {\r\n        if (!this.validate(ByteArrayBase.SIZE_OF_UINT16))\r\n            return null;\r\n        var value = this.data.getUint16(this.position, this.endian == ByteArrayBase.LITTLE_ENDIAN);\r\n        this.position += ByteArrayBase.SIZE_OF_UINT16;\r\n        return value;\r\n    }\r\n    readUTF() {\r\n        if (!this.validate(ByteArrayBase.SIZE_OF_UINT16))\r\n            return null;\r\n        var length = this.data.getUint16(this.position, this.endian == ByteArrayBase.LITTLE_ENDIAN);\r\n        this.position += ByteArrayBase.SIZE_OF_UINT16;\r\n        if (length > 0) {\r\n            return this.readUTFBytes(length);\r\n        }\r\n        else {\r\n            return \"\";\r\n        }\r\n    }\r\n    readUTFBytes(length) {\r\n        if (!this.validate(length))\r\n            return null;\r\n        var _bytes = new Uint8Array(this.buffer, this.bufferOffset + this.position, length);\r\n        this.position += length;\r\n        return this.decodeUTF8(_bytes);\r\n    }\r\n    readStandardString(length) {\r\n        if (!this.validate(length))\r\n            return null;\r\n        var str = \"\";\r\n        for (var i = 0; i < length; i++) {\r\n            str += String.fromCharCode(this.data.getUint8(this.position++));\r\n        }\r\n        return str;\r\n    }\r\n    readStringTillNull(keepEvenByte = true) {\r\n        var str = \"\";\r\n        var num = 0;\r\n        while (this.bytesAvailable > 0) {\r\n            var _byte = this.data.getUint8(this.position++);\r\n            num++;\r\n            if (_byte != 0) {\r\n                str += String.fromCharCode(_byte);\r\n            }\r\n            else {\r\n                if (keepEvenByte && num % 2 != 0) {\r\n                    this.position++;\r\n                }\r\n                break;\r\n            }\r\n        }\r\n        return str;\r\n    }\r\n    writeBoolean(value) {\r\n        this.validateBuffer(ByteArrayBase.SIZE_OF_BOOLEAN);\r\n        this.data.setUint8(this.position++, value ? 1 : 0);\r\n    }\r\n    writeByte(value) {\r\n        this.validateBuffer(ByteArrayBase.SIZE_OF_INT8);\r\n        this.data.setInt8(this.position++, value);\r\n    }\r\n    writeUnsignedByte(value) {\r\n        this.validateBuffer(ByteArrayBase.SIZE_OF_UINT8);\r\n        this.data.setUint8(this.position++, value);\r\n    }\r\n    writeBytes(_bytes, offset = 0, length = 0) {\r\n        this.validateBuffer(length);\r\n        var tmp_data = new DataView(_bytes.buffer);\r\n        for (var i = 0; i < _bytes.length; i++) {\r\n            this.data.setUint8(this.position++, tmp_data.getUint8(i));\r\n        }\r\n    }\r\n    writeDouble(value) {\r\n        this.validateBuffer(ByteArrayBase.SIZE_OF_FLOAT64);\r\n        this.data.setFloat64(this.position, value, this.endian == ByteArrayBase.LITTLE_ENDIAN);\r\n        this.position += ByteArrayBase.SIZE_OF_FLOAT64;\r\n    }\r\n    writeFloat(value) {\r\n        this.validateBuffer(ByteArrayBase.SIZE_OF_FLOAT32);\r\n        this.data.setFloat32(this.position, value, this.endian == ByteArrayBase.LITTLE_ENDIAN);\r\n        this.position += ByteArrayBase.SIZE_OF_FLOAT32;\r\n    }\r\n    writeInt(value) {\r\n        this.validateBuffer(ByteArrayBase.SIZE_OF_INT32);\r\n        this.data.setInt32(this.position, value, this.endian == ByteArrayBase.LITTLE_ENDIAN);\r\n        this.position += ByteArrayBase.SIZE_OF_INT32;\r\n    }\r\n    writeMultiByte(value, charSet) {\r\n    }\r\n    writeShort(value) {\r\n        this.validateBuffer(ByteArrayBase.SIZE_OF_INT16);\r\n        this.data.setInt16(this.position, value, this.endian == ByteArrayBase.LITTLE_ENDIAN);\r\n        this.position += ByteArrayBase.SIZE_OF_INT16;\r\n    }\r\n    writeUnsignedShort(value) {\r\n        this.validateBuffer(ByteArrayBase.SIZE_OF_UINT16);\r\n        this.data.setUint16(this.position, value, this.endian == ByteArrayBase.LITTLE_ENDIAN);\r\n        this.position += ByteArrayBase.SIZE_OF_UINT16;\r\n    }\r\n    writeUnsignedInt(value) {\r\n        this.validateBuffer(ByteArrayBase.SIZE_OF_UINT32);\r\n        this.data.setUint32(this.position, value, this.endian == ByteArrayBase.LITTLE_ENDIAN);\r\n        this.position += ByteArrayBase.SIZE_OF_UINT32;\r\n    }\r\n    writeUTF(value) {\r\n        var utf8bytes = this.encodeUTF8(value);\r\n        var length = utf8bytes.length;\r\n        this.validateBuffer(ByteArrayBase.SIZE_OF_UINT16 + length);\r\n        this.data.setUint16(this.position, length, this.endian === ByteArrayBase.LITTLE_ENDIAN);\r\n        this.position += ByteArrayBase.SIZE_OF_UINT16;\r\n        this.writeUint8Array(utf8bytes);\r\n    }\r\n    writeUTFBytes(value) {\r\n        this.writeUint8Array(this.encodeUTF8(value));\r\n    }\r\n    toString() {\r\n        return \"[ByteArrayBase] length:\" + this.length + \", bytesAvailable:\" + this.bytesAvailable;\r\n    }\r\n    writeUint8Array(_bytes) {\r\n        this.validateBuffer(this.position + _bytes.length);\r\n        for (var i = 0; i < _bytes.length; i++) {\r\n            this.data.setUint8(this.position++, _bytes[i]);\r\n        }\r\n    }\r\n    writeUint16Array(_bytes) {\r\n        this.validateBuffer(this.position + _bytes.length);\r\n        for (var i = 0; i < _bytes.length; i++) {\r\n            this.data.setUint16(this.position, _bytes[i], this.endian === ByteArrayBase.LITTLE_ENDIAN);\r\n            this.position += ByteArrayBase.SIZE_OF_UINT16;\r\n        }\r\n    }\r\n    writeUint32Array(_bytes) {\r\n        this.validateBuffer(this.position + _bytes.length);\r\n        for (var i = 0; i < _bytes.length; i++) {\r\n            this.data.setUint32(this.position, _bytes[i], this.endian === ByteArrayBase.LITTLE_ENDIAN);\r\n            this.position += ByteArrayBase.SIZE_OF_UINT32;\r\n        }\r\n    }\r\n    writeInt8Array(_bytes) {\r\n        this.validateBuffer(this.position + _bytes.length);\r\n        for (var i = 0; i < _bytes.length; i++) {\r\n            this.data.setInt8(this.position++, _bytes[i]);\r\n        }\r\n    }\r\n    writeInt16Array(_bytes) {\r\n        this.validateBuffer(this.position + _bytes.length);\r\n        for (var i = 0; i < _bytes.length; i++) {\r\n            this.data.setInt16(this.position, _bytes[i], this.endian === ByteArrayBase.LITTLE_ENDIAN);\r\n            this.position += ByteArrayBase.SIZE_OF_INT16;\r\n        }\r\n    }\r\n    writeInt32Array(_bytes) {\r\n        this.validateBuffer(this.position + _bytes.length);\r\n        for (var i = 0; i < _bytes.length; i++) {\r\n            this.data.setInt32(this.position, _bytes[i], this.endian === ByteArrayBase.LITTLE_ENDIAN);\r\n            this.position += ByteArrayBase.SIZE_OF_INT32;\r\n        }\r\n    }\r\n    writeFloat32Array(_bytes) {\r\n        this.validateBuffer(this.position + _bytes.length);\r\n        for (var i = 0; i < _bytes.length; i++) {\r\n            this.data.setFloat32(this.position, _bytes[i], this.endian === ByteArrayBase.LITTLE_ENDIAN);\r\n            this.position += ByteArrayBase.SIZE_OF_FLOAT32;\r\n        }\r\n    }\r\n    writeFloat64Array(_bytes) {\r\n        this.validateBuffer(this.position + _bytes.length);\r\n        for (var i = 0; i < _bytes.length; i++) {\r\n            this.data.setFloat64(this.position, _bytes[i], this.endian === ByteArrayBase.LITTLE_ENDIAN);\r\n            this.position += ByteArrayBase.SIZE_OF_FLOAT64;\r\n        }\r\n    }\r\n    readUint8Array(length, createNewBuffer = true) {\r\n        if (!this.validate(length))\r\n            return null;\r\n        if (!createNewBuffer) {\r\n            var result = new Uint8Array(this.buffer, this.bufferOffset + this.position, length);\r\n            this.position += length;\r\n        }\r\n        else {\r\n            result = new Uint8Array(new ArrayBuffer(length));\r\n            for (var i = 0; i < length; i++) {\r\n                result[i] = this.data.getUint8(this.position);\r\n                this.position += ByteArrayBase.SIZE_OF_UINT8;\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n    readUint16Array(length, createNewBuffer = true) {\r\n        var size = length * ByteArrayBase.SIZE_OF_UINT16;\r\n        if (!this.validate(size))\r\n            return null;\r\n        if (!createNewBuffer) {\r\n            var result = new Uint16Array(this.buffer, this.bufferOffset + this.position, length);\r\n            this.position += size;\r\n        }\r\n        else {\r\n            result = new Uint16Array(new ArrayBuffer(size));\r\n            for (var i = 0; i < length; i++) {\r\n                result[i] = this.data.getUint16(this.position, this.endian === ByteArrayBase.LITTLE_ENDIAN);\r\n                this.position += ByteArrayBase.SIZE_OF_UINT16;\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n    readUint32Array(length, createNewBuffer = true) {\r\n        var size = length * ByteArrayBase.SIZE_OF_UINT32;\r\n        if (!this.validate(size))\r\n            return null;\r\n        if (!createNewBuffer) {\r\n            var result = new Uint32Array(this.buffer, this.bufferOffset + this.position, length);\r\n            this.position += size;\r\n        }\r\n        else {\r\n            result = new Uint32Array(new ArrayBuffer(size));\r\n            for (var i = 0; i < length; i++) {\r\n                result[i] = this.data.getUint32(this.position, this.endian === ByteArrayBase.LITTLE_ENDIAN);\r\n                this.position += ByteArrayBase.SIZE_OF_UINT32;\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n    readInt8Array(length, createNewBuffer = true) {\r\n        if (!this.validate(length))\r\n            return null;\r\n        if (!createNewBuffer) {\r\n            var result = new Int8Array(this.buffer, this.bufferOffset + this.position, length);\r\n            this.position += length;\r\n        }\r\n        else {\r\n            result = new Int8Array(new ArrayBuffer(length));\r\n            for (var i = 0; i < length; i++) {\r\n                result[i] = this.data.getInt8(this.position);\r\n                this.position += ByteArrayBase.SIZE_OF_INT8;\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n    readInt16Array(length, createNewBuffer = true) {\r\n        var size = length * ByteArrayBase.SIZE_OF_INT16;\r\n        if (!this.validate(size))\r\n            return null;\r\n        if (!createNewBuffer) {\r\n            var result = new Int16Array(this.buffer, this.bufferOffset + this.position, length);\r\n            this.position += size;\r\n        }\r\n        else {\r\n            result = new Int16Array(new ArrayBuffer(size));\r\n            for (var i = 0; i < length; i++) {\r\n                result[i] = this.data.getInt16(this.position, this.endian === ByteArrayBase.LITTLE_ENDIAN);\r\n                this.position += ByteArrayBase.SIZE_OF_INT16;\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n    readInt32Array(length, createNewBuffer = true) {\r\n        var size = length * ByteArrayBase.SIZE_OF_INT32;\r\n        if (!this.validate(size))\r\n            return null;\r\n        if (!createNewBuffer) {\r\n            if ((this.bufferOffset + this.position) % 4 == 0) {\r\n                var result = new Int32Array(this.buffer, this.bufferOffset + this.position, length);\r\n                this.position += size;\r\n            }\r\n            else {\r\n                var tmp = new Uint8Array(new ArrayBuffer(size));\r\n                for (var i = 0; i < size; i++) {\r\n                    tmp[i] = this.data.getUint8(this.position);\r\n                    this.position += ByteArrayBase.SIZE_OF_UINT8;\r\n                }\r\n                result = new Int32Array(tmp.buffer);\r\n            }\r\n        }\r\n        else {\r\n            result = new Int32Array(new ArrayBuffer(size));\r\n            for (var i = 0; i < length; i++) {\r\n                result[i] = this.data.getInt32(this.position, this.endian === ByteArrayBase.LITTLE_ENDIAN);\r\n                this.position += ByteArrayBase.SIZE_OF_INT32;\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n    readFloat32Array(length, createNewBuffer = true) {\r\n        var size = length * ByteArrayBase.SIZE_OF_FLOAT32;\r\n        if (!this.validate(size))\r\n            return null;\r\n        if (!createNewBuffer) {\r\n            if ((this.bufferOffset + this.position) % 4 == 0) {\r\n                var result = new Float32Array(this.buffer, this.bufferOffset + this.position, length);\r\n                this.position += size;\r\n            }\r\n            else {\r\n                var tmp = new Uint8Array(new ArrayBuffer(size));\r\n                for (var i = 0; i < size; i++) {\r\n                    tmp[i] = this.data.getUint8(this.position);\r\n                    this.position += ByteArrayBase.SIZE_OF_UINT8;\r\n                }\r\n                result = new Float32Array(tmp.buffer);\r\n            }\r\n        }\r\n        else {\r\n            result = new Float32Array(new ArrayBuffer(size));\r\n            for (var i = 0; i < length; i++) {\r\n                result[i] = this.data.getFloat32(this.position, this.endian === ByteArrayBase.LITTLE_ENDIAN);\r\n                this.position += ByteArrayBase.SIZE_OF_FLOAT32;\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n    readFloat64Array(length, createNewBuffer = true) {\r\n        var size = length * ByteArrayBase.SIZE_OF_FLOAT64;\r\n        if (!this.validate(size))\r\n            return null;\r\n        if (!createNewBuffer) {\r\n            var result = new Float64Array(this.buffer, this.position, length);\r\n            this.position += size;\r\n        }\r\n        else {\r\n            result = new Float64Array(new ArrayBuffer(size));\r\n            for (var i = 0; i < length; i++) {\r\n                result[i] = this.data.getFloat64(this.position, this.endian === ByteArrayBase.LITTLE_ENDIAN);\r\n                this.position += ByteArrayBase.SIZE_OF_FLOAT64;\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n    validate(len) {\r\n        if (this.data.byteLength > 0 && this._position + len <= this.data.byteLength) {\r\n            return true;\r\n        }\r\n        else {\r\n            throw 'Error #2030: End of file was encountered.';\r\n        }\r\n    }\r\n    validateBuffer(len) {\r\n        this.write_position = len > this.write_position ? len : this.write_position;\r\n        if (this.data.byteLength < len) {\r\n            var tmp = new Uint8Array(new ArrayBuffer(len + this.BUFFER_EXT_SIZE));\r\n            tmp.set(new Uint8Array(this.data.buffer));\r\n            this.data.buffer = tmp.buffer;\r\n        }\r\n    }\r\n    encodeUTF8(str) {\r\n        var pos = 0;\r\n        var codePoints = this.stringToCodePoints(str);\r\n        var outputBytes = [];\r\n        while (codePoints.length > pos) {\r\n            var code_point = codePoints[pos++];\r\n            if (this.inRange(code_point, 0xD800, 0xDFFF)) {\r\n                this.encoderError(code_point);\r\n            }\r\n            else if (this.inRange(code_point, 0x0000, 0x007f)) {\r\n                outputBytes.push(code_point);\r\n            }\r\n            else {\r\n                var count, offset;\r\n                if (this.inRange(code_point, 0x0080, 0x07FF)) {\r\n                    count = 1;\r\n                    offset = 0xC0;\r\n                }\r\n                else if (this.inRange(code_point, 0x0800, 0xFFFF)) {\r\n                    count = 2;\r\n                    offset = 0xE0;\r\n                }\r\n                else if (this.inRange(code_point, 0x10000, 0x10FFFF)) {\r\n                    count = 3;\r\n                    offset = 0xF0;\r\n                }\r\n                outputBytes.push(this.div(code_point, Math.pow(64, count)) + offset);\r\n                while (count > 0) {\r\n                    var temp = this.div(code_point, Math.pow(64, count - 1));\r\n                    outputBytes.push(0x80 + (temp % 64));\r\n                    count -= 1;\r\n                }\r\n            }\r\n        }\r\n        return new Uint8Array(outputBytes);\r\n    }\r\n    decodeUTF8(data) {\r\n        var fatal = false;\r\n        var pos = 0;\r\n        var result = \"\";\r\n        var code_point;\r\n        var utf8_code_point = 0;\r\n        var utf8_bytes_needed = 0;\r\n        var utf8_bytes_seen = 0;\r\n        var utf8_lower_boundary = 0;\r\n        while (data.length > pos) {\r\n            var _byte = data[pos++];\r\n            if (_byte === this.EOF_byte) {\r\n                if (utf8_bytes_needed !== 0) {\r\n                    code_point = this.decoderError(fatal);\r\n                }\r\n                else {\r\n                    code_point = this.EOF_code_point;\r\n                }\r\n            }\r\n            else {\r\n                if (utf8_bytes_needed === 0) {\r\n                    if (this.inRange(_byte, 0x00, 0x7F)) {\r\n                        code_point = _byte;\r\n                    }\r\n                    else {\r\n                        if (this.inRange(_byte, 0xC2, 0xDF)) {\r\n                            utf8_bytes_needed = 1;\r\n                            utf8_lower_boundary = 0x80;\r\n                            utf8_code_point = _byte - 0xC0;\r\n                        }\r\n                        else if (this.inRange(_byte, 0xE0, 0xEF)) {\r\n                            utf8_bytes_needed = 2;\r\n                            utf8_lower_boundary = 0x800;\r\n                            utf8_code_point = _byte - 0xE0;\r\n                        }\r\n                        else if (this.inRange(_byte, 0xF0, 0xF4)) {\r\n                            utf8_bytes_needed = 3;\r\n                            utf8_lower_boundary = 0x10000;\r\n                            utf8_code_point = _byte - 0xF0;\r\n                        }\r\n                        else {\r\n                            this.decoderError(fatal);\r\n                        }\r\n                        utf8_code_point = utf8_code_point * Math.pow(64, utf8_bytes_needed);\r\n                        code_point = null;\r\n                    }\r\n                }\r\n                else if (!this.inRange(_byte, 0x80, 0xBF)) {\r\n                    utf8_code_point = 0;\r\n                    utf8_bytes_needed = 0;\r\n                    utf8_bytes_seen = 0;\r\n                    utf8_lower_boundary = 0;\r\n                    pos--;\r\n                    code_point = this.decoderError(fatal, _byte);\r\n                }\r\n                else {\r\n                    utf8_bytes_seen += 1;\r\n                    utf8_code_point = utf8_code_point + (_byte - 0x80) * Math.pow(64, utf8_bytes_needed - utf8_bytes_seen);\r\n                    if (utf8_bytes_seen !== utf8_bytes_needed) {\r\n                        code_point = null;\r\n                    }\r\n                    else {\r\n                        var cp = utf8_code_point;\r\n                        var lower_boundary = utf8_lower_boundary;\r\n                        utf8_code_point = 0;\r\n                        utf8_bytes_needed = 0;\r\n                        utf8_bytes_seen = 0;\r\n                        utf8_lower_boundary = 0;\r\n                        if (this.inRange(cp, lower_boundary, 0x10FFFF) && !this.inRange(cp, 0xD800, 0xDFFF)) {\r\n                            code_point = cp;\r\n                        }\r\n                        else {\r\n                            code_point = this.decoderError(fatal, _byte);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            if (code_point !== null && code_point !== this.EOF_code_point) {\r\n                if (code_point <= 0xFFFF) {\r\n                    if (code_point > 0)\r\n                        result += String.fromCharCode(code_point);\r\n                }\r\n                else {\r\n                    code_point -= 0x10000;\r\n                    result += String.fromCharCode(0xD800 + ((code_point >> 10) & 0x3ff));\r\n                    result += String.fromCharCode(0xDC00 + (code_point & 0x3ff));\r\n                }\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n    encoderError(code_point) {\r\n        throw 'EncodingError! The code point ' + code_point + ' could not be encoded.';\r\n    }\r\n    decoderError(fatal, opt_code_point) {\r\n        if (fatal) {\r\n            throw 'DecodingError';\r\n        }\r\n        return opt_code_point || 0xFFFD;\r\n    }\r\n    inRange(a, min, max) {\r\n        return min <= a && a <= max;\r\n    }\r\n    div(n, d) {\r\n        return Math.floor(n / d);\r\n    }\r\n    stringToCodePoints(string) {\r\n        var cps = [];\r\n        var i = 0, n = string.length;\r\n        while (i < string.length) {\r\n            var c = string.charCodeAt(i);\r\n            if (!this.inRange(c, 0xD800, 0xDFFF)) {\r\n                cps.push(c);\r\n            }\r\n            else if (this.inRange(c, 0xDC00, 0xDFFF)) {\r\n                cps.push(0xFFFD);\r\n            }\r\n            else {\r\n                if (i === n - 1) {\r\n                    cps.push(0xFFFD);\r\n                }\r\n                else {\r\n                    var d = string.charCodeAt(i + 1);\r\n                    if (this.inRange(d, 0xDC00, 0xDFFF)) {\r\n                        var a = c & 0x3FF;\r\n                        var b = d & 0x3FF;\r\n                        i += 1;\r\n                        cps.push(0x10000 + (a << 10) + b);\r\n                    }\r\n                    else {\r\n                        cps.push(0xFFFD);\r\n                    }\r\n                }\r\n            }\r\n            i += 1;\r\n        }\r\n        return cps;\r\n    }\r\n}\r\nByteArrayBase.BIG_ENDIAN = \"bigEndian\";\r\nByteArrayBase.LITTLE_ENDIAN = \"littleEndian\";\r\nByteArrayBase.SIZE_OF_BOOLEAN = 1;\r\nByteArrayBase.SIZE_OF_INT8 = 1;\r\nByteArrayBase.SIZE_OF_INT16 = 2;\r\nByteArrayBase.SIZE_OF_INT32 = 4;\r\nByteArrayBase.SIZE_OF_INT64 = 8;\r\nByteArrayBase.SIZE_OF_UINT8 = 1;\r\nByteArrayBase.SIZE_OF_UINT16 = 2;\r\nByteArrayBase.SIZE_OF_UINT32 = 4;\r\nByteArrayBase.SIZE_OF_UINT64 = 8;\r\nByteArrayBase.SIZE_OF_FLOAT32 = 4;\r\nByteArrayBase.SIZE_OF_FLOAT64 = 8;\r\nexports.ByteArrayBase = ByteArrayBase;\r\n"
    },
    {
      "id": 21,
      "identifier": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-core\\src\\engine\\scene\\shapes\\TransformedShape.ts",
      "name": "./packages/render-core/src/engine/scene/shapes/TransformedShape.ts",
      "index": 43,
      "index2": 38,
      "size": 3681,
      "cacheable": true,
      "built": false,
      "optional": false,
      "prefetched": false,
      "chunks": [
        0
      ],
      "assets": [],
      "issuer": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-core\\src\\engine\\scene\\shapes\\Shape.ts",
      "issuerId": 6,
      "issuerName": "./packages/render-core/src/engine/scene/shapes/Shape.ts",
      "failed": false,
      "errors": 3,
      "warnings": 0,
      "reasons": [
        {
          "moduleId": 6,
          "moduleIdentifier": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-core\\src\\engine\\scene\\shapes\\Shape.ts",
          "module": "./packages/render-core/src/engine/scene/shapes/Shape.ts",
          "moduleName": "./packages/render-core/src/engine/scene/shapes/Shape.ts",
          "type": "cjs require",
          "userRequest": "./TransformedShape",
          "loc": "7:27-56"
        },
        {
          "moduleId": 41,
          "moduleIdentifier": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-core\\src\\engine\\scene\\Scene.ts",
          "module": "./packages/render-core/src/engine/scene/Scene.ts",
          "moduleName": "./packages/render-core/src/engine/scene/Scene.ts",
          "type": "cjs require",
          "userRequest": "./shapes/TransformedShape",
          "loc": "12:27-63"
        },
        {
          "moduleId": 52,
          "moduleIdentifier": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-client\\src\\views\\GIJSView.ts",
          "module": "./packages/render-client/src/views/GIJSView.ts",
          "moduleName": "./packages/render-client/src/views/GIJSView.ts",
          "type": "cjs require",
          "userRequest": "../../../render-core/src/engine/scene/shapes/TransformedShape",
          "loc": "15:27-99"
        }
      ],
      "usedExports": true,
      "providedExports": null,
      "optimizationBailout": [],
      "depth": 2,
      "source": "\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst Ray_1 = require(\"../../math/Ray\");\r\nconst Shape_1 = require(\"./Shape\");\r\nconst Matrix4_1 = require(\"../../math/Matrix4\");\r\nconst HitInfo_1 = require(\"../../math/HitInfo\");\r\nclass TransformedShape {\r\n    constructor(shape = null, matrix = new Matrix4_1.Matrix4(), inverse = new Matrix4_1.Matrix4(), normalMatrix) {\r\n        this.shape = shape;\r\n        this.matrix = matrix;\r\n        this.inverse = inverse;\r\n        this.normalMatrix = normalMatrix;\r\n        this.type = Shape_1.ShapeType.TRANSFORMED_SHAPE;\r\n    }\r\n    get memorySize() {\r\n        if (this.shape) {\r\n            return this.shape.memorySize + Matrix4_1.Matrix4.SIZE + 1;\r\n        }\r\n        else {\r\n            return 0;\r\n        }\r\n    }\r\n    ;\r\n    directRead(memory, offset) {\r\n        offset = this.matrix.directRead(memory, offset);\r\n        this.inverse = this.matrix.inverse();\r\n        var container = [];\r\n        offset = Shape_1.directRestoreShape(memory, offset, container);\r\n        this.shape = container[0];\r\n        container = null;\r\n        return offset;\r\n    }\r\n    directWrite(memory, offset) {\r\n        memory[offset++] = this.type;\r\n        offset = this.matrix.directWrite(memory, offset);\r\n        offset = this.shape.directWrite(memory, offset);\r\n        return offset;\r\n    }\r\n    read(memory) {\r\n        this.matrix.read(memory);\r\n        this.inverse = this.matrix.inverse();\r\n        var container = [];\r\n        Shape_1.restoreShape(memory, container);\r\n        this.shape = container[0];\r\n        container = null;\r\n        return memory.position;\r\n    }\r\n    write(memory) {\r\n        memory.writeByte(this.type);\r\n        this.matrix.write(memory);\r\n        this.shape.write(memory);\r\n        return memory.position;\r\n    }\r\n    static fromJson(transformedShape) {\r\n        return new TransformedShape(Shape_1.ShapefromJson(transformedShape.shape), Matrix4_1.Matrix4.fromJson(transformedShape.matrix), Matrix4_1.Matrix4.fromJson(transformedShape.inverse));\r\n    }\r\n    static newTransformedShape(s, m) {\r\n        return new TransformedShape(s, m, m.inverse());\r\n    }\r\n    get box() {\r\n        return this.matrix.mulBox(this.shape.box);\r\n    }\r\n    compile() {\r\n        this.shape.compile();\r\n    }\r\n    intersect(r) {\r\n        var shapeRay = this.inverse.mulRay(r);\r\n        var hit = this.shape.intersect(shapeRay);\r\n        if (!hit.ok()) {\r\n            return hit;\r\n        }\r\n        var shape = hit.shape;\r\n        var shapePosition = shapeRay.position(hit.T);\r\n        var shapeNormal = shape.getNormal(shapePosition);\r\n        var position = this.matrix.mulPosition(shapePosition);\r\n        var normal = this.inverse.transpose().mulDirection(shapeNormal);\r\n        var color = shape.getColor(shapePosition);\r\n        var material = shape.getMaterial(shapePosition);\r\n        var inside = false;\r\n        if (shapeNormal.dot(shapeRay.direction) > 0) {\r\n            normal = normal.mulScalar(-1);\r\n            inside = true;\r\n        }\r\n        var ray = new Ray_1.Ray(position, normal);\r\n        var info = new HitInfo_1.HitInfo(shape, position, normal, ray, color, material, inside);\r\n        hit.T = position.sub(r.origin).length();\r\n        hit.info = info;\r\n        return hit;\r\n    }\r\n    getColor(p) {\r\n        return this.shape.getColor(this.inverse.mulPosition(p));\r\n    }\r\n    getMaterial(p) {\r\n        return this.shape.getMaterial(this.inverse.mulPosition(p));\r\n    }\r\n    getNormal(p) {\r\n        console.log(\"getNormal\");\r\n        return null;\r\n    }\r\n    getRandomPoint() {\r\n        return this.shape.getRandomPoint();\r\n    }\r\n}\r\nexports.TransformedShape = TransformedShape;\r\n"
    },
    {
      "id": 22,
      "identifier": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-client\\src\\objects\\ThreeObjects.ts",
      "name": "./packages/render-client/src/objects/ThreeObjects.ts",
      "index": 2,
      "index2": 1,
      "size": 243,
      "cacheable": true,
      "built": false,
      "optional": false,
      "prefetched": false,
      "chunks": [
        0
      ],
      "assets": [],
      "issuer": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-client\\index.ts",
      "issuerId": 36,
      "issuerName": "./packages/render-client/index.ts",
      "failed": false,
      "errors": 0,
      "warnings": 0,
      "reasons": [
        {
          "moduleId": 36,
          "moduleIdentifier": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-client\\index.ts",
          "module": "./packages/render-client/index.ts",
          "moduleName": "./packages/render-client/index.ts",
          "type": "cjs require",
          "userRequest": "./src/objects/ThreeObjects",
          "loc": "7:9-46"
        },
        {
          "moduleId": 52,
          "moduleIdentifier": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-client\\src\\views\\GIJSView.ts",
          "module": "./packages/render-client/src/views/GIJSView.ts",
          "moduleName": "./packages/render-client/src/views/GIJSView.ts",
          "type": "cjs require",
          "userRequest": "../objects/ThreeObjects",
          "loc": "11:23-57"
        }
      ],
      "usedExports": true,
      "providedExports": null,
      "optimizationBailout": [],
      "depth": 1,
      "source": "\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nclass ThreeObjects {\r\n}\r\nThreeObjects.PointLight = \"PointLight\";\r\nThreeObjects.Mesh = \"Mesh\";\r\nThreeObjects.Group = \"Group\";\r\nexports.ThreeObjects = ThreeObjects;\r\n"
    },
    {
      "id": 23,
      "identifier": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-client\\src\\display\\CanvasDisplay.ts",
      "name": "./packages/render-client/src/display/CanvasDisplay.ts",
      "index": 3,
      "index2": 3,
      "size": 4032,
      "cacheable": true,
      "built": false,
      "optional": false,
      "prefetched": false,
      "chunks": [
        0
      ],
      "assets": [],
      "issuer": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-client\\index.ts",
      "issuerId": 36,
      "issuerName": "./packages/render-client/index.ts",
      "failed": false,
      "errors": 0,
      "warnings": 0,
      "reasons": [
        {
          "moduleId": 35,
          "moduleIdentifier": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-client\\src\\render\\GIRenderBase.ts",
          "module": "./packages/render-client/src/render/GIRenderBase.ts",
          "moduleName": "./packages/render-client/src/render/GIRenderBase.ts",
          "type": "cjs require",
          "userRequest": "../display/CanvasDisplay",
          "loc": "3:24-59"
        },
        {
          "moduleId": 36,
          "moduleIdentifier": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-client\\index.ts",
          "module": "./packages/render-client/index.ts",
          "moduleName": "./packages/render-client/index.ts",
          "type": "cjs require",
          "userRequest": "./src/display/CanvasDisplay",
          "loc": "8:9-47"
        }
      ],
      "usedExports": true,
      "providedExports": null,
      "optimizationBailout": [],
      "depth": 1,
      "source": "\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst Color_1 = require(\"../../../render-core/src/engine/math/Color\");\r\nclass CanvasDisplay {\r\n    constructor(i_width = 640, i_height = 480, container) {\r\n        this.i_width = i_width;\r\n        this.i_height = i_height;\r\n        this.container = container;\r\n        this.canvas = document.createElement(\"canvas\");\r\n        this.canvas.id = \"giImageOutput\";\r\n        this.canvas.style.backgroundColor = \"#3C3C3C\";\r\n        this.canvas.style.position = \"absolute\";\r\n        this.canvas.width = this.i_width;\r\n        this.canvas.height = this.i_height;\r\n        if (container) {\r\n            this.attachDom(container);\r\n        }\r\n    }\r\n    attachDom(dom) {\r\n        this.container = dom;\r\n        this.container.appendChild(this.canvas);\r\n        this.ctx = this.canvas.getContext(\"2d\");\r\n        this.imageData = this.ctx.getImageData(0, 0, this.i_width, this.i_height);\r\n        this.data = this.imageData.data;\r\n        this.onWindowResize();\r\n    }\r\n    onWindowResize() {\r\n    }\r\n    setResolution(width, height) {\r\n        this.i_width = width;\r\n        this.i_height = height;\r\n        this.canvas.width = width;\r\n        this.canvas.height = height;\r\n        this.imageData = this.ctx.getImageData(0, 0, this.i_width, this.i_height);\r\n        this.data = this.imageData.data;\r\n    }\r\n    updatePixels(pixels) {\r\n        for (var y = 0; y < this.i_height; y++) {\r\n            for (var x = 0; x < this.i_width; x++) {\r\n                var i = y * (this.i_width * 4) + (x * 4);\r\n                var pi = y * (this.i_width * 3) + (x * 3);\r\n                this.data[i] = pixels[pi];\r\n                this.data[i + 1] = pixels[pi + 1];\r\n                this.data[i + 2] = pixels[pi + 2];\r\n                this.data[i + 3] = 255;\r\n            }\r\n        }\r\n        this.ctx.putImageData(this.imageData, 0, 0);\r\n    }\r\n    updatePixelsRect(rect, pixels) {\r\n        for (var y = rect.yoffset; y < rect.yoffset + rect.height; y++) {\r\n            for (var x = rect.xoffset; x < rect.xoffset + rect.width; x++) {\r\n                var i = y * (this.i_width * 4) + (x * 4);\r\n                var pi = y * (this.i_width * 3) + (x * 3);\r\n                this.data[i] = pixels[pi];\r\n                this.data[i + 1] = pixels[pi + 1];\r\n                this.data[i + 2] = pixels[pi + 2];\r\n                this.data[i + 3] = 255;\r\n            }\r\n        }\r\n        this.ctx.putImageData(this.imageData, 0, 0);\r\n    }\r\n    updateIndicator(rect) {\r\n        var color = Color_1.Color.random();\r\n        this.fillRect({ x: rect.xoffset, y: rect.yoffset, width: 4, height: 1 }, color);\r\n        this.fillRect({ x: rect.xoffset, y: rect.yoffset + 1, width: 1, height: 3 }, color);\r\n        this.fillRect({ x: rect.xoffset + rect.width - 4, y: rect.yoffset, width: 4, height: 1 }, color);\r\n        this.fillRect({ x: rect.xoffset + rect.width - 1, y: rect.yoffset + 1, width: 1, height: 3 }, color);\r\n        this.fillRect({ x: rect.xoffset, y: rect.yoffset + rect.height - 4, width: 1, height: 4 }, color);\r\n        this.fillRect({ x: rect.xoffset + 1, y: rect.yoffset + rect.height - 1, width: 3, height: 1 }, color);\r\n        this.fillRect({ x: rect.xoffset + rect.width - 4, y: rect.yoffset + rect.height - 1, width: 4, height: 1 }, color);\r\n        this.fillRect({ x: rect.xoffset + rect.width - 1, y: rect.yoffset + rect.height - 4, width: 1, height: 3 }, color);\r\n        this.ctx.putImageData(this.imageData, 0, 0);\r\n    }\r\n    fillRect(rect, color) {\r\n        for (var y = rect.y; y < rect.y + rect.height; y++) {\r\n            for (var x = rect.x; x < rect.x + rect.width; x++) {\r\n                var i = y * (this.i_width * 4) + (x * 4);\r\n                this.data[i] = color.r * 255;\r\n                this.data[i + 1] = color.g * 255;\r\n                this.data[i + 2] = color.b * 255;\r\n                this.data[i + 3] = 255;\r\n            }\r\n        }\r\n        this.ctx.putImageData(this.imageData, 0, 0);\r\n    }\r\n}\r\nexports.CanvasDisplay = CanvasDisplay;\r\n"
    },
    {
      "id": 24,
      "identifier": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-core\\src\\engine\\scene\\Camera.ts",
      "name": "./packages/render-core/src/engine/scene/Camera.ts",
      "index": 6,
      "index2": 10,
      "size": 3341,
      "cacheable": true,
      "built": false,
      "optional": false,
      "prefetched": false,
      "chunks": [
        0
      ],
      "assets": [],
      "issuer": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-client\\src\\render\\HeadlessRenderBase.ts",
      "issuerId": 38,
      "issuerName": "./packages/render-client/src/render/HeadlessRenderBase.ts",
      "failed": false,
      "errors": 0,
      "warnings": 0,
      "reasons": [
        {
          "moduleId": 38,
          "moduleIdentifier": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-client\\src\\render\\HeadlessRenderBase.ts",
          "module": "./packages/render-client/src/render/HeadlessRenderBase.ts",
          "moduleName": "./packages/render-client/src/render/HeadlessRenderBase.ts",
          "type": "cjs require",
          "userRequest": "../../../render-core/src/engine/scene/Camera",
          "loc": "4:17-72"
        },
        {
          "moduleId": 52,
          "moduleIdentifier": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-client\\src\\views\\GIJSView.ts",
          "module": "./packages/render-client/src/views/GIJSView.ts",
          "moduleName": "./packages/render-client/src/views/GIJSView.ts",
          "type": "cjs require",
          "userRequest": "../../../render-core/src/engine/scene/Camera",
          "loc": "5:17-72"
        }
      ],
      "usedExports": true,
      "providedExports": null,
      "optimizationBailout": [],
      "depth": 2,
      "source": "\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst Vector3_1 = require(\"../math/Vector3\");\r\nconst Ray_1 = require(\"../math/Ray\");\r\nclass Camera {\r\n    constructor(p, u, v, w, m, focalDistance, apertureRadius) {\r\n        this.p = p;\r\n        this.u = u;\r\n        this.v = v;\r\n        this.w = w;\r\n        this.m = m;\r\n        this.focalDistance = focalDistance;\r\n        this.apertureRadius = apertureRadius;\r\n    }\r\n    static fromJson(camera) {\r\n        return new Camera(Vector3_1.Vector3.fromJson(camera.p), Vector3_1.Vector3.fromJson(camera.u), Vector3_1.Vector3.fromJson(camera.v), Vector3_1.Vector3.fromJson(camera.w), camera.m, camera.focalDistance, camera.apertureRadius);\r\n    }\r\n    static lookAt(eye, look, up, fov) {\r\n        var c = new Camera();\r\n        c.p = eye;\r\n        c.w = look.sub(eye).normalize();\r\n        c.u = up.cross(c.w).normalize();\r\n        c.v = c.w.cross(c.u).normalize();\r\n        c.m = 1 / Math.tan(fov * Math.PI / 360);\r\n        return c;\r\n    }\r\n    updateFromArray(eye, look, up, fovy, focus, aperture) {\r\n        eye = new Vector3_1.Vector3(eye[0], eye[1], eye[2]);\r\n        look = new Vector3_1.Vector3(look[0], look[1], look[2]);\r\n        up = new Vector3_1.Vector3(up[0], up[1], up[2]);\r\n        var c = this;\r\n        c.p = eye;\r\n        c.w = look.sub(eye).normalize();\r\n        c.u = up.cross(c.w).normalize();\r\n        c.v = c.w.cross(c.u).normalize();\r\n        c.m = 1 / Math.tan(fovy * Math.PI / 360);\r\n        c.focalDistance = focus < 0 ? null : focus;\r\n        c.apertureRadius = aperture < 0 ? null : aperture;\r\n    }\r\n    updateFromJson(prop) {\r\n        this.p.setFromJson(prop.p);\r\n        this.w.setFromJson(prop.w);\r\n        this.u.setFromJson(prop.u);\r\n        this.v.setFromJson(prop.v);\r\n        this.m = prop.m;\r\n        if (prop.focalDistance && prop.apertureRadius) {\r\n            this.focalDistance = prop.focalDistance;\r\n            this.apertureRadius = prop.apertureRadius;\r\n        }\r\n    }\r\n    setFocus(focalPoint, apertureRadius) {\r\n        this.focalDistance = focalPoint.sub(this.p).length();\r\n        this.apertureRadius = apertureRadius;\r\n    }\r\n    castRay(x, y, w, h, u, v) {\r\n        var c = this;\r\n        var aspect = w / h;\r\n        var px = ((x + u - 0.5) / (w - 1)) * 2 - 1;\r\n        var py = ((y + v - 0.5) / (h - 1)) * 2 - 1;\r\n        var d = new Vector3_1.Vector3();\r\n        d = d.add(c.u.mulScalar(-px * aspect));\r\n        d = d.add(c.v.mulScalar(-py));\r\n        d = d.add(c.w.mulScalar(c.m));\r\n        d = d.normalize();\r\n        var p = c.p;\r\n        if (c.apertureRadius > 0) {\r\n            var focalPoint = c.p.add(d.mulScalar(c.focalDistance));\r\n            var angle = Math.random() * 2 * Math.PI;\r\n            var radius = Math.random() * c.apertureRadius;\r\n            p = p.add(c.u.mulScalar(Math.cos(angle) * radius));\r\n            p = p.add(c.v.mulScalar(Math.sin(angle) * radius));\r\n            d = focalPoint.sub(p).normalize();\r\n        }\r\n        return new Ray_1.Ray(p, d);\r\n    }\r\n    toJSON() {\r\n        return {\r\n            p: this.p,\r\n            w: this.w,\r\n            u: this.u,\r\n            v: this.v,\r\n            m: this.m,\r\n            focalDistance: this.focalDistance,\r\n            apertureRadius: this.apertureRadius\r\n        };\r\n    }\r\n}\r\nCamera.debug = true;\r\nexports.Camera = Camera;\r\n"
    },
    {
      "id": 25,
      "identifier": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-core\\src\\engine\\scene\\SharedScene.ts",
      "name": "./packages/render-core/src/engine/scene/SharedScene.ts",
      "index": 13,
      "index2": 46,
      "size": 2378,
      "cacheable": true,
      "built": false,
      "optional": false,
      "prefetched": false,
      "chunks": [
        0
      ],
      "assets": [],
      "issuer": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-client\\src\\render\\HeadlessRenderBase.ts",
      "issuerId": 38,
      "issuerName": "./packages/render-client/src/render/HeadlessRenderBase.ts",
      "failed": false,
      "errors": 0,
      "warnings": 0,
      "reasons": [
        {
          "moduleId": 38,
          "moduleIdentifier": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-client\\src\\render\\HeadlessRenderBase.ts",
          "module": "./packages/render-client/src/render/HeadlessRenderBase.ts",
          "moduleName": "./packages/render-client/src/render/HeadlessRenderBase.ts",
          "type": "cjs require",
          "userRequest": "../../../render-core/src/engine/scene/SharedScene",
          "loc": "5:22-82"
        },
        {
          "moduleId": 52,
          "moduleIdentifier": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-client\\src\\views\\GIJSView.ts",
          "module": "./packages/render-client/src/views/GIJSView.ts",
          "moduleName": "./packages/render-client/src/views/GIJSView.ts",
          "type": "cjs require",
          "userRequest": "../../../render-core/src/engine/scene/SharedScene",
          "loc": "6:22-82"
        }
      ],
      "usedExports": true,
      "providedExports": null,
      "optimizationBailout": [],
      "depth": 2,
      "source": "\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst Color_1 = require(\"../math/Color\");\r\nconst Scene_1 = require(\"./Scene\");\r\nconst Material_1 = require(\"./materials/Material\");\r\nconst Shape_1 = require(\"./shapes/Shape\");\r\nconst SharedTree_1 = require(\"./tree/SharedTree\");\r\nconst Pointer_1 = require(\"../../pointer/src/Pointer\");\r\nconst Box_1 = require(\"./shapes/Box\");\r\nconst ThreadPool_1 = require(\"../renderer/worker/ThreadPool\");\r\nconst Texture_1 = require(\"./materials/Texture\");\r\nclass SharedScene extends Scene_1.Scene {\r\n    constructor(color = new Color_1.Color(), shapes = [], lights = [], tree = null, rays = 0) {\r\n        super(color, shapes, lights, tree, rays);\r\n        this.shared = true;\r\n    }\r\n    getMemory() {\r\n        console.time(\"getMemory\");\r\n        Pointer_1.Pointer.init();\r\n        var memory = Pointer_1.Pointer.memory;\r\n        memory.writeByte(0);\r\n        memory.writeByte(0);\r\n        memory.writeByte(0);\r\n        memory.position += ThreadPool_1.ThreadPool.maxThreads;\r\n        Texture_1.Texture.write(memory);\r\n        Material_1.Material.write(memory);\r\n        this.color.write(memory);\r\n        memory.writeUnsignedInt(this.shapes.length);\r\n        this.shapes.forEach(function (shape) {\r\n            shape.write(memory);\r\n        });\r\n        var box = Box_1.Box.boxForShapes(this.shapes);\r\n        box.write(memory);\r\n        SharedTree_1.SharedTree.buildAndWrite(memory, this.shapes);\r\n        console.timeEnd(\"getMemory\");\r\n        return memory;\r\n    }\r\n    static getScene(memory) {\r\n        var scene = new SharedScene();\r\n        memory.position = 0;\r\n        memory.position += 3;\r\n        memory.position += ThreadPool_1.ThreadPool.maxThreads;\r\n        var offset = Texture_1.Texture.restore(memory);\r\n        offset = Material_1.Material.restore(memory);\r\n        scene.color.read(memory);\r\n        var numShapes = memory.readUnsignedInt();\r\n        var shapes = [];\r\n        for (var i = 0; i < numShapes; i++) {\r\n            offset = Shape_1.restoreShape(memory, shapes);\r\n            var shape = shapes[i];\r\n            scene.add(shape);\r\n        }\r\n        var box = new Box_1.Box();\r\n        box.read(memory);\r\n        scene.tree = SharedTree_1.SharedTree.readFromMemory(memory, shapes);\r\n        scene.tree.box = box;\r\n        return scene;\r\n    }\r\n}\r\nexports.SharedScene = SharedScene;\r\n"
    },
    {
      "id": 26,
      "identifier": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-core\\src\\engine\\scene\\tree\\Tree.ts",
      "name": "./packages/render-core/src/engine/scene/tree/Tree.ts",
      "index": 15,
      "index2": 18,
      "size": 913,
      "cacheable": true,
      "built": false,
      "optional": false,
      "prefetched": false,
      "chunks": [
        0
      ],
      "assets": [],
      "issuer": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-core\\src\\engine\\scene\\Scene.ts",
      "issuerId": 41,
      "issuerName": "./packages/render-core/src/engine/scene/Scene.ts",
      "failed": false,
      "errors": 0,
      "warnings": 0,
      "reasons": [
        {
          "moduleId": 19,
          "moduleIdentifier": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-core\\src\\engine\\scene\\shapes\\Mesh.ts",
          "module": "./packages/render-core/src/engine/scene/shapes/Mesh.ts",
          "moduleName": "./packages/render-core/src/engine/scene/shapes/Mesh.ts",
          "type": "cjs require",
          "userRequest": "../tree/Tree",
          "loc": "8:15-38"
        },
        {
          "moduleId": 41,
          "moduleIdentifier": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-core\\src\\engine\\scene\\Scene.ts",
          "module": "./packages/render-core/src/engine/scene/Scene.ts",
          "moduleName": "./packages/render-core/src/engine/scene/Scene.ts",
          "type": "cjs require",
          "userRequest": "./tree/Tree",
          "loc": "4:15-37"
        }
      ],
      "usedExports": true,
      "providedExports": null,
      "optimizationBailout": [],
      "depth": 3,
      "source": "\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst Box_1 = require(\"../shapes/Box\");\r\nconst Node_1 = require(\"./Node\");\r\nconst Hit_1 = require(\"../../math/Hit\");\r\nclass Tree {\r\n    constructor(box, root) {\r\n        this.box = box;\r\n        this.root = root;\r\n    }\r\n    static newTree(shapes, box = null) {\r\n        console.time(\"Building k-d tree (\" + shapes.length + \" shapes)... \");\r\n        box = box ? box : Box_1.Box.boxForShapes(shapes);\r\n        var node = Node_1.Node.newNode(shapes);\r\n        node.split(0);\r\n        console.timeEnd(\"Building k-d tree (\" + shapes.length + \" shapes)... \");\r\n        return new Tree(box, node);\r\n    }\r\n    intersect(r) {\r\n        var t = this.box.intersect(r);\r\n        if (t.max < t.min || t.max <= 0) {\r\n            return Hit_1.NoHit;\r\n        }\r\n        return this.root.intersect(r, t.min, t.max);\r\n    }\r\n}\r\nexports.Tree = Tree;\r\n"
    },
    {
      "id": 27,
      "identifier": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-core\\src\\engine\\math\\HitInfo.ts",
      "name": "./packages/render-core/src/engine/math/HitInfo.ts",
      "index": 20,
      "index2": 13,
      "size": 423,
      "cacheable": true,
      "built": false,
      "optional": false,
      "prefetched": false,
      "chunks": [
        0
      ],
      "assets": [],
      "issuer": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-core\\src\\engine\\scene\\shapes\\TransformedShape.ts",
      "issuerId": 21,
      "issuerName": "./packages/render-core/src/engine/scene/shapes/TransformedShape.ts",
      "failed": false,
      "errors": 0,
      "warnings": 0,
      "reasons": [
        {
          "moduleId": 3,
          "moduleIdentifier": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-core\\src\\engine\\math\\Hit.ts",
          "module": "./packages/render-core/src/engine/math/Hit.ts",
          "moduleName": "./packages/render-core/src/engine/math/Hit.ts",
          "type": "cjs require",
          "userRequest": "./HitInfo",
          "loc": "4:18-38"
        },
        {
          "moduleId": 21,
          "moduleIdentifier": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-core\\src\\engine\\scene\\shapes\\TransformedShape.ts",
          "module": "./packages/render-core/src/engine/scene/shapes/TransformedShape.ts",
          "moduleName": "./packages/render-core/src/engine/scene/shapes/TransformedShape.ts",
          "type": "cjs require",
          "userRequest": "../../math/HitInfo",
          "loc": "6:18-47"
        }
      ],
      "usedExports": true,
      "providedExports": null,
      "optimizationBailout": [],
      "depth": 3,
      "source": "\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nclass HitInfo {\r\n    constructor(shape, position, normal, ray, color, material, inside) {\r\n        this.shape = shape;\r\n        this.position = position;\r\n        this.normal = normal;\r\n        this.ray = ray;\r\n        this.color = color;\r\n        this.material = material;\r\n        this.inside = inside;\r\n    }\r\n}\r\nexports.HitInfo = HitInfo;\r\n"
    },
    {
      "id": 28,
      "identifier": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-core\\src\\engine\\scene\\materials\\LightMaterial.ts",
      "name": "./packages/render-core/src/engine/scene/materials/LightMaterial.ts",
      "index": 35,
      "index2": 28,
      "size": 455,
      "cacheable": true,
      "built": false,
      "optional": false,
      "prefetched": false,
      "chunks": [
        0
      ],
      "assets": [],
      "issuer": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-core\\src\\engine\\scene\\materials\\MaterialUtils.ts",
      "issuerId": 17,
      "issuerName": "./packages/render-core/src/engine/scene/materials/MaterialUtils.ts",
      "failed": false,
      "errors": 0,
      "warnings": 0,
      "reasons": [
        {
          "moduleId": 17,
          "moduleIdentifier": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-core\\src\\engine\\scene\\materials\\MaterialUtils.ts",
          "module": "./packages/render-core/src/engine/scene/materials/MaterialUtils.ts",
          "moduleName": "./packages/render-core/src/engine/scene/materials/MaterialUtils.ts",
          "type": "cjs require",
          "userRequest": "./LightMaterial",
          "loc": "12:24-50"
        },
        {
          "moduleId": 52,
          "moduleIdentifier": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-client\\src\\views\\GIJSView.ts",
          "module": "./packages/render-client/src/views/GIJSView.ts",
          "moduleName": "./packages/render-client/src/views/GIJSView.ts",
          "type": "cjs require",
          "userRequest": "../../../render-core/src/engine/scene/materials/LightMaterial",
          "loc": "10:24-96"
        }
      ],
      "usedExports": true,
      "providedExports": null,
      "optimizationBailout": [],
      "depth": 2,
      "source": "\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst Material_1 = require(\"./Material\");\r\nconst Material_2 = require(\"./Material\");\r\nclass LightMaterial extends Material_1.Material {\r\n    constructor(color, emittance, attenuation) {\r\n        super(color, null, null, null, 1, emittance, attenuation, 1, 0, 0, false);\r\n        this.type = Material_2.MaterialType.EMISSIVE;\r\n    }\r\n}\r\nexports.LightMaterial = LightMaterial;\r\n"
    },
    {
      "id": 29,
      "identifier": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-core\\src\\engine\\scene\\tree\\SharedTree.ts",
      "name": "./packages/render-core/src/engine/scene/tree/SharedTree.ts",
      "index": 41,
      "index2": 36,
      "size": 2088,
      "cacheable": true,
      "built": true,
      "optional": false,
      "prefetched": false,
      "chunks": [
        0
      ],
      "assets": [],
      "issuer": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-core\\src\\engine\\scene\\SharedScene.ts",
      "issuerId": 25,
      "issuerName": "./packages/render-core/src/engine/scene/SharedScene.ts",
      "failed": false,
      "errors": 0,
      "warnings": 0,
      "reasons": [
        {
          "moduleId": 19,
          "moduleIdentifier": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-core\\src\\engine\\scene\\shapes\\Mesh.ts",
          "module": "./packages/render-core/src/engine/scene/shapes/Mesh.ts",
          "moduleName": "./packages/render-core/src/engine/scene/shapes/Mesh.ts",
          "type": "cjs require",
          "userRequest": "../tree/SharedTree",
          "loc": "11:21-50"
        },
        {
          "moduleId": 25,
          "moduleIdentifier": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-core\\src\\engine\\scene\\SharedScene.ts",
          "module": "./packages/render-core/src/engine/scene/SharedScene.ts",
          "moduleName": "./packages/render-core/src/engine/scene/SharedScene.ts",
          "type": "cjs require",
          "userRequest": "./tree/SharedTree",
          "loc": "7:21-49"
        }
      ],
      "usedExports": true,
      "providedExports": null,
      "optimizationBailout": [],
      "depth": 3,
      "source": "\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst Box_1 = require(\"../shapes/Box\");\r\nconst Hit_1 = require(\"../../math/Hit\");\r\nconst SharedNode_1 = require(\"./SharedNode\");\r\nconst ByteArrayBase_1 = require(\"../../../pointer/src/ByteArrayBase\");\r\nconst SharedNode_2 = require(\"./SharedNode\");\r\nclass SharedTree {\r\n    constructor(box, root) {\r\n        this.box = box;\r\n        this.root = root;\r\n    }\r\n    static newTree(shapes, box = null) {\r\n        console.time(\"Building k-d tree (\" + shapes.length + \" shapes)... \");\r\n        box = box ? box : Box_1.Box.boxForShapes(shapes);\r\n        var node = SharedNode_1.SharedNode.newNode(shapes);\r\n        node.split(0);\r\n        console.timeEnd(\"Building k-d tree (\" + shapes.length + \" shapes)... \");\r\n        return new SharedTree(box, node);\r\n    }\r\n    intersect(r) {\r\n        var t = this.box.intersect(r);\r\n        if (t.max < t.min || t.max <= 0) {\r\n            return Hit_1.NoHit;\r\n        }\r\n        return this.root.intersect(r, t.min, t.max);\r\n    }\r\n    static fromJson(tree, mesh) {\r\n        var box = Box_1.Box.fromJson(tree.box);\r\n        var node = SharedNode_1.SharedNode.fromJson(tree.root);\r\n        node.mesh = mesh;\r\n        return new SharedTree(box, node);\r\n    }\r\n    static readFromMemory(memory, shapes) {\r\n        var node = new SharedNode_1.SharedNode();\r\n        node.shapes = shapes;\r\n        node.readRoot(memory);\r\n        return new SharedTree(null, node);\r\n    }\r\n    static buildAndWrite(memory, shapes) {\r\n        var startPosition = memory.position;\r\n        var endPosition;\r\n        memory.position += ByteArrayBase_1.ByteArrayBase.SIZE_OF_UINT32;\r\n        var node = SharedNode_1.SharedNode.newNode(shapes, memory);\r\n        memory.writeUnsignedInt(SharedNode_2.NodeMarker.ROOT);\r\n        node.split(0);\r\n        endPosition = memory.position;\r\n        memory.position = startPosition;\r\n        memory.writeUnsignedInt(endPosition - startPosition);\r\n        memory.position = endPosition;\r\n        return memory.position;\r\n    }\r\n}\r\nexports.SharedTree = SharedTree;\r\n"
    },
    {
      "id": 30,
      "identifier": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-core\\src\\engine\\scene\\tree\\SharedNode.ts",
      "name": "./packages/render-core/src/engine/scene/tree/SharedNode.ts",
      "index": 42,
      "index2": 35,
      "size": 14964,
      "cacheable": true,
      "built": false,
      "optional": false,
      "prefetched": false,
      "chunks": [
        0
      ],
      "assets": [],
      "issuer": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-core\\src\\engine\\scene\\tree\\SharedTree.ts",
      "issuerId": 29,
      "issuerName": "./packages/render-core/src/engine/scene/tree/SharedTree.ts",
      "failed": false,
      "errors": 0,
      "warnings": 0,
      "reasons": [
        {
          "moduleId": 29,
          "moduleIdentifier": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-core\\src\\engine\\scene\\tree\\SharedTree.ts",
          "module": "./packages/render-core/src/engine/scene/tree/SharedTree.ts",
          "moduleName": "./packages/render-core/src/engine/scene/tree/SharedTree.ts",
          "type": "cjs require",
          "userRequest": "./SharedNode",
          "loc": "5:21-44"
        },
        {
          "moduleId": 29,
          "moduleIdentifier": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-core\\src\\engine\\scene\\tree\\SharedTree.ts",
          "module": "./packages/render-core/src/engine/scene/tree/SharedTree.ts",
          "moduleName": "./packages/render-core/src/engine/scene/tree/SharedTree.ts",
          "type": "cjs require",
          "userRequest": "./SharedNode",
          "loc": "7:21-44"
        }
      ],
      "usedExports": true,
      "providedExports": null,
      "optimizationBailout": [],
      "depth": 4,
      "source": "\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst Axis_1 = require(\"../Axis\");\r\nconst Hit_1 = require(\"../../math/Hit\");\r\nconst MapUtils_1 = require(\"../../utils/MapUtils\");\r\nconst MapUtils_2 = require(\"../../utils/MapUtils\");\r\nconst MathUtils_1 = require(\"../../utils/MathUtils\");\r\nconst ByteArrayBase_1 = require(\"../../../pointer/src/ByteArrayBase\");\r\nconst DirectMemory_1 = require(\"../../../pointer/src/DirectMemory\");\r\nvar NodeMarker;\r\n(function (NodeMarker) {\r\n    NodeMarker[NodeMarker[\"ROOT\"] = 1118481] = \"ROOT\";\r\n    NodeMarker[NodeMarker[\"LEFT\"] = 15597585] = \"LEFT\";\r\n    NodeMarker[NodeMarker[\"RIGHT\"] = 1114350] = \"RIGHT\";\r\n    NodeMarker[NodeMarker[\"LEAF\"] = 15597806] = \"LEAF\";\r\n    NodeMarker[NodeMarker[\"EON\"] = 14737632] = \"EON\";\r\n    NodeMarker[NodeMarker[\"NULL\"] = 15658734] = \"NULL\";\r\n})(NodeMarker = exports.NodeMarker || (exports.NodeMarker = {}));\r\nclass SharedNode {\r\n    constructor(axis = null, point = null, shapes = null, shapeIndices = null, _left = null, _right = null) {\r\n        this.axis = axis;\r\n        this.point = point;\r\n        this.shapes = shapes;\r\n        this.shapeIndices = shapeIndices;\r\n        this._left = _left;\r\n        this._right = _right;\r\n        this.size = 0;\r\n        this.treeLength = 0;\r\n        this.thisPtr = -1;\r\n        this.resolved = false;\r\n        this.index = SharedNode.map.push(this) - 1;\r\n    }\r\n    get left() {\r\n        if (!this._left) {\r\n            this.readChild(this.memory, NodeMarker.LEFT);\r\n        }\r\n        return this._left;\r\n    }\r\n    set left(value) {\r\n        this._left = value;\r\n    }\r\n    get right() {\r\n        if (!this._right) {\r\n            this.readChild(this.memory, NodeMarker.RIGHT);\r\n        }\r\n        return this._right;\r\n    }\r\n    set right(value) {\r\n        this._right = value;\r\n    }\r\n    readRoot(memory) {\r\n        this.memory = memory;\r\n        this.thisPtr = memory.position;\r\n        this.treeLength = memory.readUnsignedInt();\r\n        this.marker = memory.readUnsignedInt();\r\n        if (this.marker == NodeMarker.LEAF) {\r\n            this.axis = memory.readByte();\r\n            this.point = memory.readFloat();\r\n            var shapeLength = memory.readUnsignedInt();\r\n            this.shapeIndices = [];\r\n            for (var i = 0; i < shapeLength; i++) {\r\n                var shapeIndex = memory.readUnsignedInt();\r\n                this.shapeIndices.push(shapeIndex);\r\n            }\r\n            if (memory.readUnsignedInt() != NodeMarker.EON) {\r\n                console.error(\"End marker not found on leaf node\");\r\n            }\r\n            this.resolved = true;\r\n            return memory.position;\r\n        }\r\n        else if (this.marker != NodeMarker.ROOT) {\r\n            throw \"Root marker not found!, found:\" + this.marker + \",  pos:\" + memory.position;\r\n        }\r\n        else {\r\n            this.axis = memory.readByte();\r\n            this.point = memory.readFloat();\r\n            this.leftPtr = memory.readUnsignedInt();\r\n            this.rightPtr = memory.readUnsignedInt();\r\n        }\r\n        this.resolved = true;\r\n        memory.position = this.thisPtr + this.treeLength;\r\n        return memory.position;\r\n    }\r\n    read(memory) {\r\n        if (this.resolved) {\r\n            return;\r\n        }\r\n        this.memory = memory;\r\n        if (this.thisPtr == -1) {\r\n            this.thisPtr = memory.position;\r\n        }\r\n        else {\r\n            memory.position = this.thisPtr;\r\n        }\r\n        this.marker = memory.readUnsignedInt();\r\n        this.axis = memory.readByte();\r\n        this.point = memory.readFloat();\r\n        if (this.marker == NodeMarker.LEAF) {\r\n            var shapeLength = memory.readUnsignedInt();\r\n            this.shapeIndices = [];\r\n            for (var i = 0; i < shapeLength; i++) {\r\n                var shapeIndex = memory.readUnsignedInt();\r\n                this.shapeIndices.push(shapeIndex);\r\n            }\r\n            if (memory.readUnsignedInt() != NodeMarker.EON) {\r\n                console.error(\"End marker not found on leaf node\");\r\n            }\r\n        }\r\n        else {\r\n            this.leftPtr = memory.readUnsignedInt();\r\n            this.rightPtr = memory.readUnsignedInt();\r\n        }\r\n        this.resolved = true;\r\n        return memory.position;\r\n    }\r\n    readChild(memory, marker) {\r\n        var node = new SharedNode();\r\n        if (marker == NodeMarker.LEFT) {\r\n            memory.position = this.leftPtr;\r\n            node.read(memory);\r\n            this.left = node;\r\n        }\r\n        else if (marker == NodeMarker.RIGHT) {\r\n            memory.position = this.rightPtr;\r\n            node.read(memory);\r\n            this.right = node;\r\n        }\r\n        return memory.position;\r\n    }\r\n    static newNode(shapes, memory) {\r\n        var node = new SharedNode(Axis_1.Axis.AxisNone, 0, shapes, [], null, null);\r\n        node.memory = memory;\r\n        return node;\r\n    }\r\n    static fromJson(node) {\r\n        return new SharedNode(node.axis, node.point, null, node.shapeIndices, node.left, node.right);\r\n    }\r\n    intersect(r, tmin, tmax) {\r\n        var node = this;\r\n        var tsplit;\r\n        var leftFirst;\r\n        switch (node.axis) {\r\n            case Axis_1.Axis.AxisNone:\r\n                return this.intersectShapes(node, r);\r\n            case Axis_1.Axis.AxisX:\r\n                tsplit = (node.point - r.origin.x) / r.direction.x;\r\n                leftFirst = (r.origin.x < node.point) || (r.origin.x == node.point && r.direction.x <= 0);\r\n                break;\r\n            case Axis_1.Axis.AxisY:\r\n                tsplit = (node.point - r.origin.y) / r.direction.y;\r\n                leftFirst = (r.origin.y < node.point) || (r.origin.y == node.point && r.direction.y <= 0);\r\n                break;\r\n            case Axis_1.Axis.AxisZ:\r\n                tsplit = (node.point - r.origin.z) / r.direction.z;\r\n                leftFirst = (r.origin.z < node.point) || (r.origin.z == node.point && r.direction.z <= 0);\r\n                break;\r\n        }\r\n        var first;\r\n        var second;\r\n        if (leftFirst) {\r\n            first = node.left;\r\n            second = node.right;\r\n        }\r\n        else {\r\n            first = node.right;\r\n            second = node.left;\r\n        }\r\n        if (!first || !second) {\r\n            console.log(\"node:\", node);\r\n            console.log(\"null nodes found\");\r\n        }\r\n        if (tsplit > tmax || tsplit <= 0) {\r\n            return this.intersectNode(first, r, tmin, tmax);\r\n        }\r\n        else if (tsplit < tmin) {\r\n            return this.intersectNode(second, r, tmin, tmax);\r\n        }\r\n        else {\r\n            var h1 = this.intersectNode(first, r, tmin, tsplit);\r\n            if (h1.T <= tsplit) {\r\n                return h1;\r\n            }\r\n            var h2 = this.intersectNode(second, r, tsplit, Math.min(tmax, h1.T));\r\n            if (h1.T <= h2.T) {\r\n                return h1;\r\n            }\r\n            else {\r\n                return h2;\r\n            }\r\n        }\r\n    }\r\n    intersectNode(node, r, tmin, tmax) {\r\n        var tsplit;\r\n        var leftFirst;\r\n        switch (node.axis) {\r\n            case Axis_1.Axis.AxisNone:\r\n                return this.intersectShapes(node, r);\r\n            case Axis_1.Axis.AxisX:\r\n                tsplit = (node.point - r.origin.x) / r.direction.x;\r\n                leftFirst = (r.origin.x < node.point) || (r.origin.x == node.point && r.direction.x <= 0);\r\n                break;\r\n            case Axis_1.Axis.AxisY:\r\n                tsplit = (node.point - r.origin.y) / r.direction.y;\r\n                leftFirst = (r.origin.y < node.point) || (r.origin.y == node.point && r.direction.y <= 0);\r\n                break;\r\n            case Axis_1.Axis.AxisZ:\r\n                tsplit = (node.point - r.origin.z) / r.direction.z;\r\n                leftFirst = (r.origin.z < node.point) || (r.origin.z == node.point && r.direction.z <= 0);\r\n                break;\r\n        }\r\n        var first;\r\n        var second;\r\n        if (leftFirst) {\r\n            first = node.left;\r\n            second = node.right;\r\n        }\r\n        else {\r\n            first = node.right;\r\n            second = node.left;\r\n        }\r\n        if (tsplit > tmax || tsplit <= 0) {\r\n            return this.intersectNode(first, r, tmin, tmax);\r\n        }\r\n        else if (tsplit < tmin) {\r\n            return this.intersectNode(second, r, tmin, tmax);\r\n        }\r\n        else {\r\n            var h1 = this.intersectNode(first, r, tmin, tsplit);\r\n            if (h1.T <= tsplit) {\r\n                return h1;\r\n            }\r\n            var h2 = this.intersectNode(second, r, tsplit, Math.min(tmax, h1.T));\r\n            if (h1.T <= h2.T) {\r\n                return h1;\r\n            }\r\n            else {\r\n                return h2;\r\n            }\r\n        }\r\n    }\r\n    intersectShapes(node, r) {\r\n        var hit = Hit_1.NoHit;\r\n        var self = this;\r\n        if (!node.resolved && !node.shapeIndices) {\r\n            node.read(this.memory);\r\n        }\r\n        var i = 0;\r\n        var shapeIndex;\r\n        var shape;\r\n        var h;\r\n        for (; i < node.shapeIndices.length; i++) {\r\n            shapeIndex = node.shapeIndices[i];\r\n            shape = self.shapes[shapeIndex];\r\n            h = shape.intersect(r);\r\n            if (h.T < hit.T) {\r\n                hit = h;\r\n            }\r\n        }\r\n        return hit;\r\n    }\r\n    partitionScore(axis, point) {\r\n        var node = this;\r\n        var left = 0;\r\n        var right = 0;\r\n        node.shapes.forEach(function (shape) {\r\n            var box = shape.box;\r\n            var p = box.partition(axis, point);\r\n            if (p.left) {\r\n                left++;\r\n            }\r\n            if (p.right) {\r\n                right++;\r\n            }\r\n        });\r\n        if (left >= right) {\r\n            return left;\r\n        }\r\n        else {\r\n            return right;\r\n        }\r\n    }\r\n    partition(size, axis, point) {\r\n        var node = this;\r\n        var left = [];\r\n        var right = [];\r\n        node.shapes.forEach(function (shape) {\r\n            var box = shape.box;\r\n            var p = box.partition(axis, point);\r\n            if (p.left) {\r\n                left = MapUtils_1.append(left, shape);\r\n            }\r\n            if (p.right) {\r\n                right = MapUtils_1.append(right, shape);\r\n            }\r\n        });\r\n        return { left: left, right: right };\r\n    }\r\n    split(depth) {\r\n        var node = this;\r\n        if (node.shapes.length < 8) {\r\n            var self = this;\r\n            this.memory.position -= DirectMemory_1.DirectMemory.SIZE_OF_UINT32;\r\n            this.memory.writeUnsignedInt(NodeMarker.LEAF);\r\n            this.memory.writeByte(Axis_1.Axis.AxisNone);\r\n            this.memory.writeFloat(0);\r\n            this.memory.writeUnsignedInt(node.shapes.length);\r\n            node.shapes.forEach(function (shape) {\r\n                if (self.memory) {\r\n                    self.memory.writeUnsignedInt(shape.index);\r\n                }\r\n            });\r\n            if (this.memory) {\r\n                this.memory.writeUnsignedInt(NodeMarker.EON);\r\n            }\r\n            return false;\r\n        }\r\n        var xs = [];\r\n        var ys = [];\r\n        var zs = [];\r\n        node.shapes.forEach(function (shape) {\r\n            var box = shape.box;\r\n            xs = MapUtils_1.append(xs, box.min.x);\r\n            xs = MapUtils_1.append(xs, box.max.x);\r\n            ys = MapUtils_1.append(ys, box.min.y);\r\n            ys = MapUtils_1.append(ys, box.max.y);\r\n            zs = MapUtils_1.append(zs, box.min.z);\r\n            zs = MapUtils_1.append(zs, box.max.z);\r\n        });\r\n        MapUtils_2.sortAscending(xs);\r\n        MapUtils_2.sortAscending(ys);\r\n        MapUtils_2.sortAscending(zs);\r\n        var mx = MathUtils_1.MathUtils.median(xs);\r\n        var my = MathUtils_1.MathUtils.median(ys);\r\n        var mz = MathUtils_1.MathUtils.median(zs);\r\n        var best = Math.round(node.shapes.length * 0.85);\r\n        var bestAxis = Axis_1.Axis.AxisNone;\r\n        var bestPoint = 0.0;\r\n        var sx = node.partitionScore(Axis_1.Axis.AxisX, mx);\r\n        if (sx < best) {\r\n            best = sx;\r\n            bestAxis = Axis_1.Axis.AxisX;\r\n            bestPoint = mx;\r\n        }\r\n        var sy = node.partitionScore(Axis_1.Axis.AxisY, my);\r\n        if (sy < best) {\r\n            best = sy;\r\n            bestAxis = Axis_1.Axis.AxisY;\r\n            bestPoint = my;\r\n        }\r\n        var sz = node.partitionScore(Axis_1.Axis.AxisZ, mz);\r\n        if (sz < best) {\r\n            best = sz;\r\n            bestAxis = Axis_1.Axis.AxisZ;\r\n            bestPoint = mz;\r\n        }\r\n        if (bestAxis == Axis_1.Axis.AxisNone) {\r\n            var shapes = node.shapes;\r\n            var shapeIndices = [];\r\n            let self = this;\r\n            if (this.memory) {\r\n                this.memory.position -= DirectMemory_1.DirectMemory.SIZE_OF_UINT32;\r\n                this.memory.writeUnsignedInt(NodeMarker.LEAF);\r\n                this.memory.writeByte(bestAxis);\r\n                this.memory.writeFloat(bestPoint);\r\n                this.memory.writeUnsignedInt(shapes.length);\r\n            }\r\n            shapes.forEach(function (shape) {\r\n                shapeIndices.push(shape.index);\r\n                if (self.memory) {\r\n                    self.memory.writeUnsignedInt(shape.index);\r\n                }\r\n            });\r\n            if (this.memory) {\r\n                this.memory.writeUnsignedInt(NodeMarker.EON);\r\n            }\r\n            node.shapes = null;\r\n            node.shapeIndices = shapeIndices;\r\n            return true;\r\n        }\r\n        var p = node.partition(best, bestAxis, bestPoint);\r\n        node.axis = bestAxis;\r\n        node.point = bestPoint;\r\n        node.left = SharedNode.newNode(p.left, this.memory);\r\n        node.right = SharedNode.newNode(p.right, this.memory);\r\n        if (this.memory) {\r\n            this.memory.writeByte(bestAxis);\r\n            this.memory.writeFloat(bestPoint);\r\n            var leftStartPosition = this.memory.position + (2 * ByteArrayBase_1.ByteArrayBase.SIZE_OF_UINT32);\r\n            this.memory.writeUnsignedInt(leftStartPosition);\r\n            var rightLengthPosition = this.memory.position;\r\n            this.memory.position += ByteArrayBase_1.ByteArrayBase.SIZE_OF_UINT32;\r\n            this.memory.writeUnsignedInt(NodeMarker.LEFT);\r\n        }\r\n        node.left.split(depth + 1);\r\n        if (this.memory) {\r\n            var rightStartPosition = this.memory.position;\r\n            this.memory.position = rightLengthPosition;\r\n            this.memory.writeUnsignedInt(rightStartPosition);\r\n            this.memory.position = rightStartPosition;\r\n            this.memory.writeUnsignedInt(NodeMarker.RIGHT);\r\n        }\r\n        node.right.split(depth + 1);\r\n        if (this.memory) {\r\n            this.memory.writeUnsignedInt(NodeMarker.EON);\r\n        }\r\n        node.shapes = null;\r\n        return true;\r\n    }\r\n}\r\nSharedNode.map = [];\r\nexports.SharedNode = SharedNode;\r\n"
    },
    {
      "id": 31,
      "identifier": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-core\\src\\engine\\renderer\\worker\\ThreadPool.ts",
      "name": "./packages/render-core/src/engine/renderer/worker/ThreadPool.ts",
      "index": 45,
      "index2": 45,
      "size": 687,
      "cacheable": true,
      "built": false,
      "optional": false,
      "prefetched": false,
      "chunks": [
        0
      ],
      "assets": [],
      "issuer": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-core\\src\\engine\\scene\\SharedScene.ts",
      "issuerId": 25,
      "issuerName": "./packages/render-core/src/engine/scene/SharedScene.ts",
      "failed": false,
      "errors": 0,
      "warnings": 0,
      "reasons": [
        {
          "moduleId": 25,
          "moduleIdentifier": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-core\\src\\engine\\scene\\SharedScene.ts",
          "module": "./packages/render-core/src/engine/scene/SharedScene.ts",
          "moduleName": "./packages/render-core/src/engine/scene/SharedScene.ts",
          "type": "cjs require",
          "userRequest": "../renderer/worker/ThreadPool",
          "loc": "10:21-61"
        },
        {
          "moduleId": 33,
          "moduleIdentifier": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-core\\src\\engine\\renderer\\worker\\TraceJobManager.ts",
          "module": "./packages/render-core/src/engine/renderer/worker/TraceJobManager.ts",
          "moduleName": "./packages/render-core/src/engine/renderer/worker/TraceJobManager.ts",
          "type": "cjs require",
          "userRequest": "./ThreadPool",
          "loc": "3:21-44"
        }
      ],
      "usedExports": true,
      "providedExports": null,
      "optimizationBailout": [],
      "depth": 3,
      "source": "\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst Thread_1 = require(\"./Thread\");\r\nclass ThreadPool {\r\n    static get maxThreads() {\r\n        return navigator[\"hardwareConcurrency\"] - 4 || 2;\r\n    }\r\n    ;\r\n    static getThreads() {\r\n        console.info(\"Available Threads:\" + ThreadPool.maxThreads);\r\n        if (ThreadPool.pool) {\r\n            return ThreadPool.pool;\r\n        }\r\n        var threads = [];\r\n        for (var i = 0; i < ThreadPool.maxThreads; i++) {\r\n            threads.push(new Thread_1.Thread(\"Thread:#\" + i, i));\r\n        }\r\n        ThreadPool.pool = threads;\r\n        return threads;\r\n    }\r\n}\r\nexports.ThreadPool = ThreadPool;\r\n"
    },
    {
      "id": 32,
      "identifier": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-core\\src\\engine\\renderer\\worker\\TraceJob.ts",
      "name": "./packages/render-core/src/engine/renderer/worker/TraceJob.ts",
      "index": 47,
      "index2": 42,
      "size": 1848,
      "cacheable": true,
      "built": false,
      "optional": false,
      "prefetched": false,
      "chunks": [
        0
      ],
      "assets": [],
      "issuer": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-core\\src\\engine\\renderer\\SmartBucketRenderer.ts",
      "issuerId": 34,
      "issuerName": "./packages/render-core/src/engine/renderer/SmartBucketRenderer.ts",
      "failed": false,
      "errors": 0,
      "warnings": 0,
      "reasons": [
        {
          "moduleId": 34,
          "moduleIdentifier": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-core\\src\\engine\\renderer\\SmartBucketRenderer.ts",
          "module": "./packages/render-core/src/engine/renderer/SmartBucketRenderer.ts",
          "moduleName": "./packages/render-core/src/engine/renderer/SmartBucketRenderer.ts",
          "type": "cjs require",
          "userRequest": "./worker/TraceJob",
          "loc": "4:19-47"
        },
        {
          "moduleId": 50,
          "moduleIdentifier": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-core\\src\\engine\\renderer\\worker\\Thread.ts",
          "module": "./packages/render-core/src/engine/renderer/worker/Thread.ts",
          "moduleName": "./packages/render-core/src/engine/renderer/worker/Thread.ts",
          "type": "cjs require",
          "userRequest": "./TraceJob",
          "loc": "3:19-40"
        }
      ],
      "usedExports": true,
      "providedExports": null,
      "optimizationBailout": [],
      "depth": 3,
      "source": "\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nclass TraceJob {\r\n    constructor(param, extra = {}) {\r\n        this.param = param;\r\n        this.extra = extra;\r\n        this.runCount = 0;\r\n        this.id = param.id;\r\n        this.finished = false;\r\n    }\r\n    get lifeCount() {\r\n        return this._lifeCount;\r\n    }\r\n    get time() {\r\n        return this._time;\r\n    }\r\n    start(thread, onComplete) {\r\n        this._time = performance.now();\r\n        var self = this;\r\n        var _param = this.getTraceParam();\r\n        thread.trace(_param, function (thread) {\r\n            self._time = performance.now() - self._time;\r\n            self._lifeCount = Math.round(self._time / 10);\r\n            if (onComplete) {\r\n                onComplete(self, thread);\r\n            }\r\n        });\r\n        this.runCount++;\r\n    }\r\n    getTraceParam() {\r\n        var _param = { init_iterations: 0 };\r\n        var extraCount = 0;\r\n        for (key in this.extra) {\r\n            if (this.extra.hasOwnProperty(key)) {\r\n                _param[key] = this.extra[key];\r\n                delete this.extra[key];\r\n                extraCount++;\r\n            }\r\n        }\r\n        if (extraCount > 0) {\r\n            for (var key in this.param) {\r\n                if (this.param.hasOwnProperty(key)) {\r\n                    _param[key] = this.param[key];\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            _param = this.param;\r\n        }\r\n        _param.init_iterations = (this.runCount * this.param.blockIterations) - (this.runCount > 0 ? (this.param.blockIterations - 1) : 0);\r\n        return _param;\r\n    }\r\n}\r\nTraceJob.INIT = \"INIT\";\r\nTraceJob.INITED = \"INITED\";\r\nTraceJob.TRACE = \"TRACE\";\r\nTraceJob.TRACED = \"TRACED\";\r\nTraceJob.TERMINATE = \"TERMINATE\";\r\nTraceJob.LOCKED = \"LOCKED\";\r\nexports.TraceJob = TraceJob;\r\n"
    },
    {
      "id": 33,
      "identifier": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-core\\src\\engine\\renderer\\worker\\TraceJobManager.ts",
      "name": "./packages/render-core/src/engine/renderer/worker/TraceJobManager.ts",
      "index": 48,
      "index2": 43,
      "size": 8670,
      "cacheable": true,
      "built": false,
      "optional": false,
      "prefetched": false,
      "chunks": [
        0
      ],
      "assets": [],
      "issuer": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-core\\src\\engine\\renderer\\SmartBucketRenderer.ts",
      "issuerId": 34,
      "issuerName": "./packages/render-core/src/engine/renderer/SmartBucketRenderer.ts",
      "failed": false,
      "errors": 2,
      "warnings": 0,
      "reasons": [
        {
          "moduleId": 34,
          "moduleIdentifier": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-core\\src\\engine\\renderer\\SmartBucketRenderer.ts",
          "module": "./packages/render-core/src/engine/renderer/SmartBucketRenderer.ts",
          "moduleName": "./packages/render-core/src/engine/renderer/SmartBucketRenderer.ts",
          "type": "cjs require",
          "userRequest": "./worker/TraceJobManager",
          "loc": "3:26-61"
        },
        {
          "moduleId": 50,
          "moduleIdentifier": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-core\\src\\engine\\renderer\\worker\\Thread.ts",
          "module": "./packages/render-core/src/engine/renderer/worker/Thread.ts",
          "moduleName": "./packages/render-core/src/engine/renderer/worker/Thread.ts",
          "type": "cjs require",
          "userRequest": "./TraceJobManager",
          "loc": "4:26-54"
        }
      ],
      "usedExports": true,
      "providedExports": null,
      "optimizationBailout": [],
      "depth": 3,
      "source": "\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst ThreadPool_1 = require(\"./ThreadPool\");\r\nclass TraceJobManager {\r\n    constructor() {\r\n        this.iterations = 0;\r\n        this.initCount = 0;\r\n        this.maxLoop = 1;\r\n        this.currentLoop = 0;\r\n        this.totalThreads = 0;\r\n        this.deferredStart = false;\r\n        this.lockCount = 0;\r\n        this.queue = [];\r\n        this.deferredQueue = [];\r\n        this.referenceQueue = [];\r\n    }\r\n    get initialized() {\r\n        return this._initialized;\r\n    }\r\n    get isAllLocked() {\r\n        for (var i = 0; i < this.totalThreads; i++) {\r\n            if (this.flags[3 + i] !== 3 && this.flags[3 + i] !== 0) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n    get finished() {\r\n        return this._finished;\r\n    }\r\n    get pixels() {\r\n        return this.pixelMemory;\r\n    }\r\n    configure(param, scene) {\r\n        console.log(\"configure\");\r\n        this.width = param.width;\r\n        this.height = param.height;\r\n        console.log(\"Checkpoint #1\");\r\n        try {\r\n            this.sceneMemory = scene.getMemory();\r\n        }\r\n        catch (e) {\r\n            console.log(e);\r\n        }\r\n        console.log(\"Checkpoint #2\");\r\n        this.flags = new Uint8Array(this.sceneMemory.data.buffer, 0, 3 + ThreadPool_1.ThreadPool.maxThreads);\r\n        TraceJobManager.flags = this.flags;\r\n        this.pixelMemory = new Uint8Array(new SharedArrayBuffer(this.width * this.height * 3));\r\n        this.sampleMemory = new Float32Array(new SharedArrayBuffer(4 * this.width * this.height * 3));\r\n        console.log(\"Checkpoint #3\");\r\n        this.traceParameters = {\r\n            pixelBuffer: this.pixelMemory.buffer,\r\n            sampleBuffer: this.sampleMemory.buffer,\r\n            sceneBuffer: this.sceneMemory.buffer,\r\n            camera: param.camera,\r\n            cameraSamples: param.cameraSamples,\r\n            hitSamples: param.hitSamples,\r\n            bounces: param.bounces,\r\n            full_width: this.width,\r\n            full_height: this.height\r\n        };\r\n    }\r\n    add(job) {\r\n        this.queue.push(job);\r\n        this.referenceQueue.push(job);\r\n    }\r\n    init(callback) {\r\n        console.log(\"Initializing threads...\");\r\n        console.time(\"init\");\r\n        this.threads = ThreadPool_1.ThreadPool.getThreads();\r\n        console.log(\"Checkpoint #4\");\r\n        this.totalThreads = this.threads.length;\r\n        this.lockCount = this.threads.length;\r\n        this.initNext(callback);\r\n        console.log(\"Checkpoint #5\");\r\n    }\r\n    initNext(callback) {\r\n        var self = this;\r\n        if (this.initCount == this.totalThreads) {\r\n            this._initialized = true;\r\n            console.timeEnd(\"init\");\r\n            if (callback) {\r\n                callback();\r\n            }\r\n            else {\r\n                this.start();\r\n            }\r\n            return;\r\n        }\r\n        var thread = this.threads[this.initCount++];\r\n        thread.onThreadLocked = this.onThreadLocked.bind(this);\r\n        thread.init(this.traceParameters, [\r\n            this.traceParameters.pixelBuffer,\r\n            this.traceParameters.sampleBuffer,\r\n            this.traceParameters.sceneBuffer\r\n        ], function () {\r\n            console.log(\"thread:\" + self.initCount + \" inited\");\r\n            self.initNext.bind(self)(callback);\r\n        });\r\n    }\r\n    onThreadLocked() {\r\n        this.lockCount++;\r\n        if (this.isAllLocked && this.deferredStart) {\r\n            this.deferredStart = false;\r\n            this.clear();\r\n            this.restart();\r\n        }\r\n        console.log(\"lockCount:\" + this.lockCount);\r\n    }\r\n    lockAllThreads() {\r\n        for (var i = 0; i < this.threads.length; i++) {\r\n            var thread = this.threads[i];\r\n            if (thread.isTracing) {\r\n                this.flags[3 + i] = 2;\r\n            }\r\n            else {\r\n                this.flags[3 + i] = 0;\r\n            }\r\n        }\r\n    }\r\n    stop() {\r\n        if (this.flags) {\r\n            this.queue = null;\r\n            this.deferredQueue = null;\r\n            this.deferredStart = false;\r\n            this.lockAllThreads();\r\n            this.stopped = true;\r\n            this.lockCount = 0;\r\n            this._await = true;\r\n            var job;\r\n            for (var i = 0; i < this.referenceQueue.length; i++) {\r\n                job = this.referenceQueue[i];\r\n                job.runCount = 0;\r\n            }\r\n        }\r\n    }\r\n    clear() {\r\n        for (var y = 0; y < this.height; y++) {\r\n            for (var x = 0; x < this.width; x++) {\r\n                var si = (y * (this.width * 3)) + (x * 3);\r\n                this.pixelMemory[si] = 0;\r\n                this.pixelMemory[si + 1] = 0;\r\n                this.pixelMemory[si + 2] = 0;\r\n                this.sampleMemory[si] = 0;\r\n                this.sampleMemory[si + 1] = 0;\r\n                this.sampleMemory[si + 2] = 0;\r\n            }\r\n        }\r\n        if (this.updatePixels) {\r\n            this.updatePixels({\r\n                xoffset: 0,\r\n                yoffset: 0,\r\n                width: this.width,\r\n                height: this.height,\r\n                pixels: this.pixelMemory\r\n            });\r\n        }\r\n    }\r\n    restart() {\r\n        if (!this.stopped) {\r\n            this.stop();\r\n        }\r\n        if (this.flags && this.isAllThreadsFree) {\r\n            this.queue = this.referenceQueue.concat();\r\n            this.deferredQueue = [];\r\n            this._await = false;\r\n            this.deferredStart = false;\r\n            clearTimeout(this.resetTimerId);\r\n            this.resetTimerId = setTimeout(this.start.bind(this), 100);\r\n        }\r\n        else {\r\n            this.deferredStart = true;\r\n        }\r\n    }\r\n    get isAllThreadsFree() {\r\n        var thread;\r\n        for (var i = 0; i < this.threads.length; i++) {\r\n            thread = this.threads[i];\r\n            if (thread.isTracing) {\r\n                if (this.flags[3 + i] === 1 || this.flags[3 + i] === 2) {\r\n                    return false;\r\n                }\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n    start() {\r\n        if (this.currentLoop >= this.maxLoop || (this.queue.length == 0 && this.deferredQueue.length === 0)) {\r\n            console.log(\"Rendering finished\");\r\n            return;\r\n        }\r\n        console.log(\"queue:\" + this.queue.length);\r\n        console.time('trace::start');\r\n        var self = this;\r\n        if (this._initialized) {\r\n            this.stopped = false;\r\n            var thread;\r\n            var job;\r\n            for (var i = 0; i < this.threads.length; i++) {\r\n                thread = this.threads[i];\r\n                if (self.queue && self.deferredQueue && self.queue.length > 0) {\r\n                    job = self.queue.shift();\r\n                    self.deferredQueue.push(job);\r\n                    job.start(thread, function (_job, _thread) {\r\n                        if (!self._await) {\r\n                            self.processQueue.call(self, _job, _thread);\r\n                        }\r\n                    });\r\n                }\r\n                else {\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    processQueue(job, thread) {\r\n        if (this.updatePixels) {\r\n            this.updatePixels(job.param);\r\n        }\r\n        if (this._finished) {\r\n            return;\r\n        }\r\n        var self = this;\r\n        if (this.queue.length > 0) {\r\n            var job = self.queue.shift();\r\n            self.deferredQueue.push(job);\r\n            if (this.updateIndicator) {\r\n                this.updateIndicator(job.param);\r\n            }\r\n            job.start(thread, function (_job, _thread) {\r\n                if (!self._await) {\r\n                    self.processQueue.call(self, _job, _thread);\r\n                }\r\n            });\r\n        }\r\n        else {\r\n            if (this.isAllThreadsFree) {\r\n                this._finished = true;\r\n                console.timeEnd('trace::start');\r\n                this.initDeferredQueue();\r\n            }\r\n        }\r\n    }\r\n    initDeferredQueue() {\r\n        if (this.currentLoop >= this.maxLoop || (this.queue.length == 0 && this.deferredQueue.length === 0)) {\r\n            console.log(\"Rendering finished\");\r\n            return;\r\n        }\r\n        this.currentLoop++;\r\n        this._finished = false;\r\n        var self = this;\r\n        self.deferredQueue.sort(function (a, b) {\r\n            return b.time - a.time;\r\n        });\r\n        self.queue = self.deferredQueue;\r\n        self.deferredQueue = [];\r\n        console.time('trace::start');\r\n        this.start();\r\n    }\r\n}\r\nexports.TraceJobManager = TraceJobManager;\r\n"
    },
    {
      "id": 34,
      "identifier": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-core\\src\\engine\\renderer\\SmartBucketRenderer.ts",
      "name": "./packages/render-core/src/engine/renderer/SmartBucketRenderer.ts",
      "index": 49,
      "index2": 47,
      "size": 2583,
      "cacheable": true,
      "built": false,
      "optional": false,
      "prefetched": false,
      "chunks": [
        0
      ],
      "assets": [],
      "issuer": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-client\\src\\render\\GIRenderBase.ts",
      "issuerId": 35,
      "issuerName": "./packages/render-client/src/render/GIRenderBase.ts",
      "failed": false,
      "errors": 1,
      "warnings": 0,
      "reasons": [
        {
          "moduleId": 35,
          "moduleIdentifier": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-client\\src\\render\\GIRenderBase.ts",
          "module": "./packages/render-client/src/render/GIRenderBase.ts",
          "moduleName": "./packages/render-client/src/render/GIRenderBase.ts",
          "type": "cjs require",
          "userRequest": "../../../render-core/src/engine/renderer/SmartBucketRenderer",
          "loc": "4:30-101"
        },
        {
          "moduleId": 38,
          "moduleIdentifier": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-client\\src\\render\\HeadlessRenderBase.ts",
          "module": "./packages/render-client/src/render/HeadlessRenderBase.ts",
          "moduleName": "./packages/render-client/src/render/HeadlessRenderBase.ts",
          "type": "cjs require",
          "userRequest": "../../../render-core/src/engine/renderer/SmartBucketRenderer",
          "loc": "7:30-101"
        }
      ],
      "usedExports": true,
      "providedExports": null,
      "optimizationBailout": [],
      "depth": 2,
      "source": "\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst TraceJobManager_1 = require(\"./worker/TraceJobManager\");\r\nconst TraceJob_1 = require(\"./worker/TraceJob\");\r\nclass SmartBucketRenderer {\r\n    constructor() {\r\n        this.bucketSize = 64 / 2;\r\n        this.traceManager = new TraceJobManager_1.TraceJobManager();\r\n    }\r\n    get initialized() {\r\n        return this.traceManager.initialized;\r\n    }\r\n    get iterations() {\r\n        return this.traceManager.iterations;\r\n    }\r\n    updateCameraSamples(newValue) {\r\n        this.traceManager.queue.forEach(function (job) {\r\n            job.extra.cameraSamples = newValue;\r\n        });\r\n    }\r\n    updateHitSamples(newValue) {\r\n        this.traceManager.queue.forEach(function (job) {\r\n            job.extra.hitSamples = newValue;\r\n        });\r\n    }\r\n    updateCamera(newValue) {\r\n        this.traceManager.stop();\r\n        this.traceManager.clear();\r\n        this.traceManager.referenceQueue.forEach(function (job) {\r\n            job.extra.camera = newValue;\r\n        });\r\n        this.traceManager.restart();\r\n    }\r\n    render(scene, camera, width, height, cameraSamples, hitSamples, bounces, iterations = 1, blockIterations = 1, onUpdate, updateIndicator, onInit) {\r\n        if (!this.traceManager) {\r\n            this.traceManager = new TraceJobManager_1.TraceJobManager();\r\n        }\r\n        this.traceManager.maxLoop = iterations - 1;\r\n        this.traceManager.configure({\r\n            camera: camera,\r\n            width: width,\r\n            height: height,\r\n            cameraSamples: cameraSamples,\r\n            hitSamples: hitSamples,\r\n            bounces: bounces\r\n        }, scene);\r\n        var col = width / this.bucketSize;\r\n        var row = height / this.bucketSize;\r\n        for (var j = 0; j < row; j++) {\r\n            for (var i = 0; i < col; i++) {\r\n                this.traceManager.add(new TraceJob_1.TraceJob({\r\n                    id: j + \"_\" + i,\r\n                    blockIterations: blockIterations,\r\n                    width: this.bucketSize,\r\n                    height: this.bucketSize,\r\n                    xoffset: i * this.bucketSize,\r\n                    yoffset: j * this.bucketSize\r\n                }));\r\n            }\r\n        }\r\n        this.traceManager.updatePixels = onUpdate;\r\n        this.traceManager.updateIndicator = updateIndicator;\r\n        this.traceManager.init(onInit);\r\n        return this.traceManager.pixels;\r\n    }\r\n}\r\nSmartBucketRenderer.DEBUG = false;\r\nSmartBucketRenderer.interval = 0;\r\nexports.SmartBucketRenderer = SmartBucketRenderer;\r\n"
    },
    {
      "id": 35,
      "identifier": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-client\\src\\render\\GIRenderBase.ts",
      "name": "./packages/render-client/src/render/GIRenderBase.ts",
      "index": 50,
      "index2": 49,
      "size": 2790,
      "cacheable": true,
      "built": false,
      "optional": false,
      "prefetched": false,
      "chunks": [
        0
      ],
      "assets": [],
      "issuer": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-client\\index.ts",
      "issuerId": 36,
      "issuerName": "./packages/render-client/index.ts",
      "failed": false,
      "errors": 0,
      "warnings": 0,
      "reasons": [
        {
          "moduleId": 36,
          "moduleIdentifier": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-client\\index.ts",
          "module": "./packages/render-client/index.ts",
          "moduleName": "./packages/render-client/index.ts",
          "type": "cjs require",
          "userRequest": "./src/render/GIRenderBase",
          "loc": "10:9-45"
        },
        {
          "moduleId": 52,
          "moduleIdentifier": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-client\\src\\views\\GIJSView.ts",
          "module": "./packages/render-client/src/views/GIJSView.ts",
          "moduleName": "./packages/render-client/src/views/GIJSView.ts",
          "type": "cjs require",
          "userRequest": "../render/GIRenderBase",
          "loc": "3:23-56"
        }
      ],
      "usedExports": true,
      "providedExports": null,
      "optimizationBailout": [],
      "depth": 1,
      "source": "\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst CanvasDisplay_1 = require(\"../display/CanvasDisplay\");\r\nconst SmartBucketRenderer_1 = require(\"../../../render-core/src/engine/renderer/SmartBucketRenderer\");\r\nclass GIRenderBase extends CanvasDisplay_1.CanvasDisplay {\r\n    constructor(i_width, i_height, container) {\r\n        super(i_width, i_height, container);\r\n        this.renderer = new SmartBucketRenderer_1.SmartBucketRenderer();\r\n    }\r\n    updateCameraSamples(newValue) {\r\n        if (this.cameraSamples != newValue) {\r\n            this.cameraSamples = newValue;\r\n            this.renderer.updateCameraSamples(newValue);\r\n        }\r\n    }\r\n    updateHitSamples(newValue) {\r\n        if (this.hitSamples != newValue) {\r\n            this.hitSamples = newValue;\r\n            this.renderer.updateHitSamples(newValue);\r\n        }\r\n    }\r\n    updateCamera(newValue) {\r\n        this.camera.updateFromArray(newValue.eye, newValue.lookAt, newValue.up, newValue.fov, newValue.focus, newValue.aperture);\r\n        this.renderer.updateCamera(this.camera.toJSON());\r\n    }\r\n    updateCameraMatrix(matrix) {\r\n        this.camera.u.setFromArray(matrix, 0);\r\n        this.camera.v.setFromArray(matrix, 4);\r\n        this.camera.w.setFromArray(matrix, 8);\r\n        this.renderer.updateCamera(this.camera.toJSON());\r\n    }\r\n    toggleTrace(newValue) {\r\n        if (this.renderer.initialized) {\r\n            console.log(\"toggleTrace:\" + newValue);\r\n            if (newValue) {\r\n                var cam = this.camera.toJSON();\r\n                this.dirty = false;\r\n                this.renderer.updateCamera(cam);\r\n            }\r\n            else {\r\n                this.renderer.traceManager.stop();\r\n            }\r\n        }\r\n    }\r\n    render(onInit) {\r\n        console.info(\"+ Render settings\");\r\n        console.info(\"      Resolution          :   \" + this.i_width + \"x\" + this.i_height);\r\n        console.info(\"      CameraSamples       :   \" + this.cameraSamples);\r\n        console.info(\"      HitSamples          :   \" + this.hitSamples);\r\n        console.info(\"      Bounces             :   \" + this.bounces);\r\n        console.info(\"      Iterations          :   \" + this.iterations);\r\n        console.info(\"      Block-Iterations    :   \" + this.blockIterations);\r\n        var self = this;\r\n        this.pixels = this.renderer.render(this.scene, this.camera, this.i_width, this.i_height, this.cameraSamples, this.hitSamples, this.bounces, this.iterations, this.blockIterations, onUpdate, updateIndicator, onInit);\r\n        function onUpdate(rect) {\r\n            self.updatePixelsRect(rect, self.pixels);\r\n        }\r\n        function updateIndicator(rect) {\r\n            self.updateIndicator(rect);\r\n        }\r\n    }\r\n}\r\nexports.GIRenderBase = GIRenderBase;\r\n"
    },
    {
      "id": 36,
      "identifier": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-client\\index.ts",
      "name": "./packages/render-client/index.ts",
      "index": 0,
      "index2": 52,
      "size": 510,
      "cacheable": true,
      "built": false,
      "optional": false,
      "prefetched": false,
      "chunks": [
        0
      ],
      "assets": [],
      "issuer": null,
      "issuerId": null,
      "issuerName": null,
      "failed": false,
      "errors": 0,
      "warnings": 0,
      "reasons": [],
      "usedExports": true,
      "providedExports": null,
      "optimizationBailout": [],
      "depth": 0,
      "source": "\"use strict\";\r\nfunction __export(m) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n__export(require(\"./src/index\"));\r\n__export(require(\"./src/objects/ThreeObjects\"));\r\n__export(require(\"./src/display/CanvasDisplay\"));\r\n__export(require(\"./src/render/HeadlessRenderBase\"));\r\n__export(require(\"./src/render/GIRenderBase\"));\r\n__export(require(\"./src/views/ThreeJSView\"));\r\n__export(require(\"./src/views/GIJSView\"));\r\n"
    },
    {
      "id": 37,
      "identifier": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-client\\src\\index.ts",
      "name": "./packages/render-client/src/index.ts",
      "index": 1,
      "index2": 0,
      "size": 136,
      "cacheable": true,
      "built": false,
      "optional": false,
      "prefetched": false,
      "chunks": [
        0
      ],
      "assets": [],
      "issuer": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-client\\index.ts",
      "issuerId": 36,
      "issuerName": "./packages/render-client/index.ts",
      "failed": false,
      "errors": 0,
      "warnings": 0,
      "reasons": [
        {
          "moduleId": 36,
          "moduleIdentifier": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-client\\index.ts",
          "module": "./packages/render-client/index.ts",
          "moduleName": "./packages/render-client/index.ts",
          "type": "cjs require",
          "userRequest": "./src/index",
          "loc": "6:9-31"
        }
      ],
      "usedExports": true,
      "providedExports": null,
      "optimizationBailout": [],
      "depth": 1,
      "source": "\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nclass XRayClient {\r\n}\r\nexports.XRayClient = XRayClient;\r\n"
    },
    {
      "id": 38,
      "identifier": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-client\\src\\render\\HeadlessRenderBase.ts",
      "name": "./packages/render-client/src/render/HeadlessRenderBase.ts",
      "index": 5,
      "index2": 48,
      "size": 4106,
      "cacheable": true,
      "built": false,
      "optional": false,
      "prefetched": false,
      "chunks": [
        0
      ],
      "assets": [],
      "issuer": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-client\\index.ts",
      "issuerId": 36,
      "issuerName": "./packages/render-client/index.ts",
      "failed": false,
      "errors": 1,
      "warnings": 0,
      "reasons": [
        {
          "moduleId": 36,
          "moduleIdentifier": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-client\\index.ts",
          "module": "./packages/render-client/index.ts",
          "moduleName": "./packages/render-client/index.ts",
          "type": "cjs require",
          "userRequest": "./src/render/HeadlessRenderBase",
          "loc": "9:9-51"
        }
      ],
      "usedExports": true,
      "providedExports": null,
      "optimizationBailout": [],
      "depth": 1,
      "source": "\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst Color_1 = require(\"../../../render-core/src/engine/math/Color\");\r\nconst Camera_1 = require(\"../../../render-core/src/engine/scene/Camera\");\r\nconst SharedScene_1 = require(\"../../../render-core/src/engine/scene/SharedScene\");\r\nconst Vector3_1 = require(\"../../../render-core/src/engine/math/Vector3\");\r\nconst SmartBucketRenderer_1 = require(\"../../../render-core/src/engine/renderer/SmartBucketRenderer\");\r\nclass HeadlessRenderBase {\r\n    constructor(i_width, i_height, outmemory) {\r\n        this.i_width = i_width;\r\n        this.i_height = i_height;\r\n        this.outmemory = outmemory;\r\n        this.data = new Uint8Array(i_width * i_height * 4);\r\n        this.scene = new SharedScene_1.SharedScene(Color_1.Color.hexColor(0x262626));\r\n        this.camera = Camera_1.Camera.lookAt(new Vector3_1.Vector3(0, 0, 0), new Vector3_1.Vector3(0, 0, 0), new Vector3_1.Vector3(0, 1, 0), 45);\r\n        this.cameraSamples = -1;\r\n        this.hitSamples = 1;\r\n        this.bounces = 4;\r\n        this.iterations = 1000000;\r\n        this.blockIterations = 1;\r\n        this.renderer = new SmartBucketRenderer_1.SmartBucketRenderer();\r\n    }\r\n    updateCameraSamples(newValue) {\r\n        if (this.cameraSamples != newValue) {\r\n            this.cameraSamples = newValue;\r\n            this.renderer.updateCameraSamples(newValue);\r\n        }\r\n    }\r\n    updateHitSamples(newValue) {\r\n        if (this.hitSamples != newValue) {\r\n            this.hitSamples = newValue;\r\n            this.renderer.updateHitSamples(newValue);\r\n        }\r\n    }\r\n    updateCamera(newValue) {\r\n        this.camera.updateFromArray(newValue.eye, newValue.lookAt, newValue.up, newValue.fov, newValue.focus, newValue.aperture);\r\n        this.renderer.updateCamera(this.camera.toJSON());\r\n    }\r\n    updateCameraMatrix(matrix) {\r\n        this.camera.u.setFromArray(matrix, 0);\r\n        this.camera.v.setFromArray(matrix, 4);\r\n        this.camera.w.setFromArray(matrix, 8);\r\n        this.renderer.updateCamera(this.camera.toJSON());\r\n    }\r\n    toggleTrace(newValue) {\r\n        if (this.renderer.initialized) {\r\n            console.log(\"toggleTrace:\" + newValue);\r\n            if (newValue) {\r\n                var cam = this.camera.toJSON();\r\n                this.dirty = false;\r\n                this.renderer.updateCamera(cam);\r\n            }\r\n            else {\r\n                this.renderer.traceManager.stop();\r\n            }\r\n        }\r\n    }\r\n    render(onInit, onUpdate) {\r\n        console.info(\"+ Render settings\");\r\n        console.info(\"      Resolution          :   \" + this.i_width + \"x\" + this.i_height);\r\n        console.info(\"      CameraSamples       :   \" + this.cameraSamples);\r\n        console.info(\"      HitSamples          :   \" + this.hitSamples);\r\n        console.info(\"      Bounces             :   \" + this.bounces);\r\n        console.info(\"      Iterations          :   \" + this.iterations);\r\n        console.info(\"      Block-Iterations    :   \" + this.blockIterations);\r\n        var self = this;\r\n        this.pixels = this.renderer.render(this.scene, this.camera, this.i_width, this.i_height, this.cameraSamples, this.hitSamples, this.bounces, this.iterations, this.blockIterations, _onUpdate, onInit);\r\n        function _onUpdate(rect) {\r\n            if (onUpdate) {\r\n                onUpdate(rect, self.pixels);\r\n            }\r\n        }\r\n    }\r\n    setResolution(width, height) {\r\n        this.i_width = width;\r\n        this.i_height = height;\r\n        this.data = new Uint8Array(width * height * 4);\r\n    }\r\n    updatePixels(pixels) {\r\n        for (var y = 0; y < this.i_height; y++) {\r\n            for (var x = 0; x < this.i_width; x++) {\r\n                var i = y * (this.i_width * 4) + (x * 4);\r\n                var pi = y * (this.i_width * 3) + (x * 3);\r\n                this.data[i] = pixels[pi];\r\n                this.data[i + 1] = pixels[pi + 1];\r\n                this.data[i + 2] = pixels[pi + 2];\r\n                this.data[i + 3] = 255;\r\n            }\r\n        }\r\n    }\r\n}\r\nexports.HeadlessRenderBase = HeadlessRenderBase;\r\n"
    },
    {
      "id": 39,
      "identifier": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-core\\src\\pointer\\src\\MemoryUtils.ts",
      "name": "./packages/render-core/src/pointer/src/MemoryUtils.ts",
      "index": 9,
      "index2": 4,
      "size": 7353,
      "cacheable": true,
      "built": false,
      "optional": false,
      "prefetched": false,
      "chunks": [
        0
      ],
      "assets": [],
      "issuer": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-core\\src\\pointer\\src\\DirectMemory.ts",
      "issuerId": 13,
      "issuerName": "./packages/render-core/src/pointer/src/DirectMemory.ts",
      "failed": false,
      "errors": 0,
      "warnings": 0,
      "reasons": [
        {
          "moduleId": 13,
          "moduleIdentifier": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-core\\src\\pointer\\src\\DirectMemory.ts",
          "module": "./packages/render-core/src/pointer/src/DirectMemory.ts",
          "moduleName": "./packages/render-core/src/pointer/src/DirectMemory.ts",
          "type": "cjs require",
          "userRequest": "./MemoryUtils",
          "loc": "3:22-46"
        }
      ],
      "usedExports": true,
      "providedExports": null,
      "optimizationBailout": [],
      "depth": 4,
      "source": "\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nclass MemoryUtils {\r\n    static readUint16(memory, offset, littleEndian = false) {\r\n        var mem = MemoryUtils.ui16mem;\r\n        if (littleEndian) {\r\n            mem[0] = memory[offset++];\r\n            mem[1] = memory[offset];\r\n        }\r\n        else {\r\n            mem[1] = memory[offset++];\r\n            mem[0] = memory[offset];\r\n        }\r\n        return MemoryUtils.ui16[0];\r\n    }\r\n    static writeUint16(memory, offset, value, littleEndian = false) {\r\n        MemoryUtils.ui16[0] = value;\r\n        var mem = MemoryUtils.ui16mem;\r\n        if (littleEndian) {\r\n            memory[offset++] = mem[0];\r\n            memory[offset++] = mem[1];\r\n        }\r\n        else {\r\n            memory[offset++] = mem[1];\r\n            memory[offset++] = mem[0];\r\n        }\r\n        return offset;\r\n    }\r\n    static readInt16(memory, offset, littleEndian = false) {\r\n        var mem = MemoryUtils.i16mem;\r\n        if (littleEndian) {\r\n            mem[0] = memory[offset++];\r\n            mem[1] = memory[offset];\r\n        }\r\n        else {\r\n            mem[1] = memory[offset++];\r\n            mem[0] = memory[offset];\r\n        }\r\n        return MemoryUtils.i16[0];\r\n    }\r\n    static writeInt16(memory, offset, value, littleEndian = false) {\r\n        MemoryUtils.i16[0] = value;\r\n        var mem = MemoryUtils.i16mem;\r\n        if (littleEndian) {\r\n            memory[offset++] = mem[0];\r\n            memory[offset++] = mem[1];\r\n        }\r\n        else {\r\n            memory[offset++] = mem[1];\r\n            memory[offset++] = mem[0];\r\n        }\r\n        return offset;\r\n    }\r\n    static readInt32(memory, offset, littleEndian = false) {\r\n        var mem = MemoryUtils.i32mem;\r\n        if (littleEndian) {\r\n            mem[0] = memory[offset++];\r\n            mem[1] = memory[offset++];\r\n            mem[2] = memory[offset++];\r\n            mem[3] = memory[offset];\r\n        }\r\n        else {\r\n            mem[3] = memory[offset++];\r\n            mem[2] = memory[offset++];\r\n            mem[1] = memory[offset++];\r\n            mem[0] = memory[offset];\r\n        }\r\n        return MemoryUtils.i32[0];\r\n    }\r\n    static writeInt32(memory, offset, value, littleEndian = false) {\r\n        MemoryUtils.i32[0] = value;\r\n        var mem = MemoryUtils.i32mem;\r\n        if (littleEndian) {\r\n            memory[offset++] = mem[0];\r\n            memory[offset++] = mem[1];\r\n            memory[offset++] = mem[2];\r\n            memory[offset++] = mem[3];\r\n        }\r\n        else {\r\n            memory[offset++] = mem[3];\r\n            memory[offset++] = mem[2];\r\n            memory[offset++] = mem[1];\r\n            memory[offset++] = mem[0];\r\n        }\r\n        return offset;\r\n    }\r\n    static readUint32(memory, offset, littleEndian = false) {\r\n        var mem = MemoryUtils.ui32mem;\r\n        if (littleEndian) {\r\n            mem[0] = memory[offset++];\r\n            mem[1] = memory[offset++];\r\n            mem[2] = memory[offset++];\r\n            mem[3] = memory[offset];\r\n        }\r\n        else {\r\n            mem[3] = memory[offset++];\r\n            mem[2] = memory[offset++];\r\n            mem[1] = memory[offset++];\r\n            mem[0] = memory[offset];\r\n        }\r\n        return MemoryUtils.ui32[0];\r\n    }\r\n    static writeUint32(memory, offset, value, littleEndian = false) {\r\n        MemoryUtils.ui32[0] = value;\r\n        var mem = MemoryUtils.ui32mem;\r\n        if (littleEndian) {\r\n            memory[offset++] = mem[0];\r\n            memory[offset++] = mem[1];\r\n            memory[offset++] = mem[2];\r\n            memory[offset++] = mem[3];\r\n        }\r\n        else {\r\n            memory[offset++] = mem[3];\r\n            memory[offset++] = mem[2];\r\n            memory[offset++] = mem[1];\r\n            memory[offset++] = mem[0];\r\n        }\r\n        return offset;\r\n    }\r\n    static readFloat32(memory, offset, littleEndian = false) {\r\n        var mem = MemoryUtils.f32mem;\r\n        if (littleEndian) {\r\n            mem[0] = memory[offset++];\r\n            mem[1] = memory[offset++];\r\n            mem[2] = memory[offset++];\r\n            mem[3] = memory[offset];\r\n        }\r\n        else {\r\n            mem[3] = memory[offset++];\r\n            mem[2] = memory[offset++];\r\n            mem[1] = memory[offset++];\r\n            mem[0] = memory[offset];\r\n        }\r\n        return MemoryUtils.f32[0];\r\n    }\r\n    static writeFloat32(memory, offset, value, littleEndian = false) {\r\n        MemoryUtils.f32[0] = value;\r\n        var mem = MemoryUtils.f32mem;\r\n        if (littleEndian) {\r\n            memory[offset++] = mem[0];\r\n            memory[offset++] = mem[1];\r\n            memory[offset++] = mem[2];\r\n            memory[offset++] = mem[3];\r\n        }\r\n        else {\r\n            memory[offset++] = mem[3];\r\n            memory[offset++] = mem[2];\r\n            memory[offset++] = mem[1];\r\n            memory[offset++] = mem[0];\r\n        }\r\n        return offset;\r\n    }\r\n    static readFloat64(memory, offset, littleEndian = false) {\r\n        var mem = MemoryUtils.f64mem;\r\n        if (littleEndian) {\r\n            mem[0] = memory[offset++];\r\n            mem[1] = memory[offset++];\r\n            mem[2] = memory[offset++];\r\n            mem[3] = memory[offset++];\r\n            mem[4] = memory[offset++];\r\n            mem[5] = memory[offset++];\r\n            mem[6] = memory[offset++];\r\n            mem[7] = memory[offset];\r\n        }\r\n        else {\r\n            mem[7] = memory[offset++];\r\n            mem[6] = memory[offset++];\r\n            mem[5] = memory[offset++];\r\n            mem[4] = memory[offset++];\r\n            mem[3] = memory[offset++];\r\n            mem[2] = memory[offset++];\r\n            mem[1] = memory[offset++];\r\n            mem[0] = memory[offset];\r\n        }\r\n        return MemoryUtils.f64[0];\r\n    }\r\n    static writeFloat64(memory, offset, value, littleEndian = false) {\r\n        MemoryUtils.f64[0] = value;\r\n        var mem = MemoryUtils.f64mem;\r\n        if (littleEndian) {\r\n            memory[offset++] = mem[0];\r\n            memory[offset++] = mem[1];\r\n            memory[offset++] = mem[2];\r\n            memory[offset++] = mem[3];\r\n            memory[offset++] = mem[4];\r\n            memory[offset++] = mem[5];\r\n            memory[offset++] = mem[6];\r\n            memory[offset++] = mem[7];\r\n        }\r\n        else {\r\n            memory[offset++] = mem[7];\r\n            memory[offset++] = mem[6];\r\n            memory[offset++] = mem[5];\r\n            memory[offset++] = mem[4];\r\n            memory[offset++] = mem[3];\r\n            memory[offset++] = mem[2];\r\n            memory[offset++] = mem[1];\r\n            memory[offset++] = mem[0];\r\n        }\r\n        return offset;\r\n    }\r\n}\r\nMemoryUtils.i8 = new Int8Array(1);\r\nMemoryUtils.ui16 = new Uint16Array(1);\r\nMemoryUtils.ui32 = new Uint32Array(1);\r\nMemoryUtils.i32 = new Int32Array(1);\r\nMemoryUtils.i16 = new Int16Array(1);\r\nMemoryUtils.f32 = new Float32Array(1);\r\nMemoryUtils.f64 = new Float64Array(1);\r\nMemoryUtils.ui32mem = new Uint8Array(MemoryUtils.ui32.buffer);\r\nMemoryUtils.ui16mem = new Uint8Array(MemoryUtils.ui16.buffer);\r\nMemoryUtils.i32mem = new Uint8Array(MemoryUtils.i32.buffer);\r\nMemoryUtils.i16mem = new Uint8Array(MemoryUtils.i16.buffer);\r\nMemoryUtils.f32mem = new Uint8Array(MemoryUtils.f32.buffer);\r\nMemoryUtils.f64mem = new Uint8Array(MemoryUtils.f64.buffer);\r\nexports.MemoryUtils = MemoryUtils;\r\n"
    },
    {
      "id": 40,
      "identifier": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-core\\src\\pointer\\src\\UTF8.ts",
      "name": "./packages/render-core/src/pointer/src/UTF8.ts",
      "index": 10,
      "index2": 5,
      "size": 7398,
      "cacheable": true,
      "built": false,
      "optional": false,
      "prefetched": false,
      "chunks": [
        0
      ],
      "assets": [],
      "issuer": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-core\\src\\pointer\\src\\DirectMemory.ts",
      "issuerId": 13,
      "issuerName": "./packages/render-core/src/pointer/src/DirectMemory.ts",
      "failed": false,
      "errors": 0,
      "warnings": 0,
      "reasons": [
        {
          "moduleId": 13,
          "moduleIdentifier": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-core\\src\\pointer\\src\\DirectMemory.ts",
          "module": "./packages/render-core/src/pointer/src/DirectMemory.ts",
          "moduleName": "./packages/render-core/src/pointer/src/DirectMemory.ts",
          "type": "cjs require",
          "userRequest": "./UTF8",
          "loc": "4:15-32"
        }
      ],
      "usedExports": true,
      "providedExports": null,
      "optimizationBailout": [],
      "depth": 4,
      "source": "\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nclass UTF8 {\r\n    constructor() {\r\n        this.EOF_byte = -1;\r\n        this.EOF_code_point = -1;\r\n    }\r\n    static encode(str) {\r\n        if (str) {\r\n            if (!UTF8.instance) {\r\n                UTF8.instance = new UTF8();\r\n            }\r\n            return UTF8.instance.encode(str);\r\n        }\r\n        return null;\r\n    }\r\n    static decode(data) {\r\n        if (data) {\r\n            if (!UTF8.instance) {\r\n                UTF8.instance = new UTF8();\r\n            }\r\n            return UTF8.instance.decode(data);\r\n        }\r\n        return null;\r\n    }\r\n    encode(str) {\r\n        var pos = 0;\r\n        var codePoints = this.stringToCodePoints(str);\r\n        var outputBytes = [];\r\n        while (codePoints.length > pos) {\r\n            var code_point = codePoints[pos++];\r\n            if (this.inRange(code_point, 0xD800, 0xDFFF)) {\r\n                this.encoderError(code_point);\r\n            }\r\n            else if (this.inRange(code_point, 0x0000, 0x007f)) {\r\n                outputBytes.push(code_point);\r\n            }\r\n            else {\r\n                var count, offset;\r\n                if (this.inRange(code_point, 0x0080, 0x07FF)) {\r\n                    count = 1;\r\n                    offset = 0xC0;\r\n                }\r\n                else if (this.inRange(code_point, 0x0800, 0xFFFF)) {\r\n                    count = 2;\r\n                    offset = 0xE0;\r\n                }\r\n                else if (this.inRange(code_point, 0x10000, 0x10FFFF)) {\r\n                    count = 3;\r\n                    offset = 0xF0;\r\n                }\r\n                outputBytes.push(this.div(code_point, Math.pow(64, count)) + offset);\r\n                while (count > 0) {\r\n                    var temp = this.div(code_point, Math.pow(64, count - 1));\r\n                    outputBytes.push(0x80 + (temp % 64));\r\n                    count -= 1;\r\n                }\r\n            }\r\n        }\r\n        return new Uint8Array(outputBytes);\r\n    }\r\n    decode(data) {\r\n        var fatal = false;\r\n        var pos = 0;\r\n        var result = \"\";\r\n        var code_point;\r\n        var utf8_code_point = 0;\r\n        var utf8_bytes_needed = 0;\r\n        var utf8_bytes_seen = 0;\r\n        var utf8_lower_boundary = 0;\r\n        while (data.length > pos) {\r\n            var _byte = data[pos++];\r\n            if (_byte === this.EOF_byte) {\r\n                if (utf8_bytes_needed !== 0) {\r\n                    code_point = this.decoderError(fatal);\r\n                }\r\n                else {\r\n                    code_point = this.EOF_code_point;\r\n                }\r\n            }\r\n            else {\r\n                if (utf8_bytes_needed === 0) {\r\n                    if (this.inRange(_byte, 0x00, 0x7F)) {\r\n                        code_point = _byte;\r\n                    }\r\n                    else {\r\n                        if (this.inRange(_byte, 0xC2, 0xDF)) {\r\n                            utf8_bytes_needed = 1;\r\n                            utf8_lower_boundary = 0x80;\r\n                            utf8_code_point = _byte - 0xC0;\r\n                        }\r\n                        else if (this.inRange(_byte, 0xE0, 0xEF)) {\r\n                            utf8_bytes_needed = 2;\r\n                            utf8_lower_boundary = 0x800;\r\n                            utf8_code_point = _byte - 0xE0;\r\n                        }\r\n                        else if (this.inRange(_byte, 0xF0, 0xF4)) {\r\n                            utf8_bytes_needed = 3;\r\n                            utf8_lower_boundary = 0x10000;\r\n                            utf8_code_point = _byte - 0xF0;\r\n                        }\r\n                        else {\r\n                            this.decoderError(fatal);\r\n                        }\r\n                        utf8_code_point = utf8_code_point * Math.pow(64, utf8_bytes_needed);\r\n                        code_point = null;\r\n                    }\r\n                }\r\n                else if (!this.inRange(_byte, 0x80, 0xBF)) {\r\n                    utf8_code_point = 0;\r\n                    utf8_bytes_needed = 0;\r\n                    utf8_bytes_seen = 0;\r\n                    utf8_lower_boundary = 0;\r\n                    pos--;\r\n                    code_point = this.decoderError(fatal, _byte);\r\n                }\r\n                else {\r\n                    utf8_bytes_seen += 1;\r\n                    utf8_code_point = utf8_code_point + (_byte - 0x80) * Math.pow(64, utf8_bytes_needed - utf8_bytes_seen);\r\n                    if (utf8_bytes_seen !== utf8_bytes_needed) {\r\n                        code_point = null;\r\n                    }\r\n                    else {\r\n                        var cp = utf8_code_point;\r\n                        var lower_boundary = utf8_lower_boundary;\r\n                        utf8_code_point = 0;\r\n                        utf8_bytes_needed = 0;\r\n                        utf8_bytes_seen = 0;\r\n                        utf8_lower_boundary = 0;\r\n                        if (this.inRange(cp, lower_boundary, 0x10FFFF) && !this.inRange(cp, 0xD800, 0xDFFF)) {\r\n                            code_point = cp;\r\n                        }\r\n                        else {\r\n                            code_point = this.decoderError(fatal, _byte);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            if (code_point !== null && code_point !== this.EOF_code_point) {\r\n                if (code_point <= 0xFFFF) {\r\n                    if (code_point > 0)\r\n                        result += String.fromCharCode(code_point);\r\n                }\r\n                else {\r\n                    code_point -= 0x10000;\r\n                    result += String.fromCharCode(0xD800 + ((code_point >> 10) & 0x3ff));\r\n                    result += String.fromCharCode(0xDC00 + (code_point & 0x3ff));\r\n                }\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n    encoderError(code_point) {\r\n        throw 'EncodingError! The code point ' + code_point + ' could not be encoded.';\r\n    }\r\n    decoderError(fatal, opt_code_point) {\r\n        if (fatal) {\r\n            throw 'DecodingError';\r\n        }\r\n        return opt_code_point || 0xFFFD;\r\n    }\r\n    inRange(a, min, max) {\r\n        return min <= a && a <= max;\r\n    }\r\n    div(n, d) {\r\n        return Math.floor(n / d);\r\n    }\r\n    stringToCodePoints(string) {\r\n        var cps = [];\r\n        var i = 0, n = string.length;\r\n        while (i < string.length) {\r\n            var c = string.charCodeAt(i);\r\n            if (!this.inRange(c, 0xD800, 0xDFFF)) {\r\n                cps.push(c);\r\n            }\r\n            else if (this.inRange(c, 0xDC00, 0xDFFF)) {\r\n                cps.push(0xFFFD);\r\n            }\r\n            else {\r\n                if (i === n - 1) {\r\n                    cps.push(0xFFFD);\r\n                }\r\n                else {\r\n                    var d = string.charCodeAt(i + 1);\r\n                    if (this.inRange(d, 0xDC00, 0xDFFF)) {\r\n                        var a = c & 0x3FF;\r\n                        var b = d & 0x3FF;\r\n                        i += 1;\r\n                        cps.push(0x10000 + (a << 10) + b);\r\n                    }\r\n                    else {\r\n                        cps.push(0xFFFD);\r\n                    }\r\n                }\r\n            }\r\n            i += 1;\r\n        }\r\n        return cps;\r\n    }\r\n}\r\nexports.UTF8 = UTF8;\r\n"
    },
    {
      "id": 41,
      "identifier": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-core\\src\\engine\\scene\\Scene.ts",
      "name": "./packages/render-core/src/engine/scene/Scene.ts",
      "index": 14,
      "index2": 40,
      "size": 5495,
      "cacheable": true,
      "built": true,
      "optional": false,
      "prefetched": false,
      "chunks": [
        0
      ],
      "assets": [],
      "issuer": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-core\\src\\engine\\scene\\SharedScene.ts",
      "issuerId": 25,
      "issuerName": "./packages/render-core/src/engine/scene/SharedScene.ts",
      "failed": false,
      "errors": 10,
      "warnings": 0,
      "reasons": [
        {
          "moduleId": 25,
          "moduleIdentifier": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-core\\src\\engine\\scene\\SharedScene.ts",
          "module": "./packages/render-core/src/engine/scene/SharedScene.ts",
          "moduleName": "./packages/render-core/src/engine/scene/SharedScene.ts",
          "type": "cjs require",
          "userRequest": "./Scene",
          "loc": "4:16-34"
        }
      ],
      "usedExports": true,
      "providedExports": null,
      "optimizationBailout": [],
      "depth": 3,
      "source": "\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst Color_1 = require(\"../math/Color\");\r\nconst Tree_1 = require(\"./tree/Tree\");\r\nconst MapUtils_1 = require(\"../utils/MapUtils\");\r\nconst Vector3_1 = require(\"../math/Vector3\");\r\nconst Ray_1 = require(\"../math/Ray\");\r\nconst Shape_1 = require(\"./shapes/Shape\");\r\nconst Cube_1 = require(\"./shapes/Cube\");\r\nconst Sphere_1 = require(\"./shapes/Sphere\");\r\nconst Mesh_1 = require(\"./shapes/Mesh\");\r\nconst TransformedShape_1 = require(\"./shapes/TransformedShape\");\r\nconst Triangle_1 = require(\"./shapes/Triangle\");\r\nclass Scene {\r\n    constructor(color = new Color_1.Color(), shapes = [], lights = [], tree = null, rays = 0) {\r\n        this.color = color;\r\n        this.shapes = shapes;\r\n        this.lights = lights;\r\n        this.tree = tree;\r\n        this.rays = rays;\r\n        this.shared = false;\r\n    }\r\n    get estimatedMemory() {\r\n        var size = Color_1.Color.SIZE + 1;\r\n        this.shapes.forEach(function (shape) {\r\n            size += shape.memorySize;\r\n        });\r\n        return size;\r\n    }\r\n    static fromJson(scene) {\r\n        var _scene = new Scene(Color_1.Color.fromJson(scene.color));\r\n        scene.shapes.forEach(function (shape) {\r\n            switch (shape.type) {\r\n                case Shape_1.ShapeType.CUBE:\r\n                    _scene.add(Cube_1.Cube.fromJson(shape));\r\n                    break;\r\n                case Shape_1.ShapeType.SPHERE:\r\n                    _scene.add(Sphere_1.Sphere.fromJson(shape));\r\n                    break;\r\n                case Shape_1.ShapeType.MESH:\r\n                    _scene.add(Mesh_1.Mesh.fromJson(shape));\r\n                    break;\r\n                case Shape_1.ShapeType.TRANSFORMED_SHAPE:\r\n                    _scene.add(TransformedShape_1.TransformedShape.fromJson(shape));\r\n                    break;\r\n                case Shape_1.ShapeType.TRIANGLE:\r\n                    _scene.add(Triangle_1.Triangle.fromJson(shape));\r\n                    break;\r\n            }\r\n        });\r\n        return _scene;\r\n    }\r\n    compile() {\r\n        this.shapes.forEach(function (shape) {\r\n            shape.compile();\r\n        });\r\n        if (this.tree == null) {\r\n            this.tree = Tree_1.Tree.newTree(this.shapes);\r\n        }\r\n        return this;\r\n    }\r\n    add(shape) {\r\n        this.shapes = MapUtils_1.append(this.shapes, shape);\r\n        shape.index = this.shapes.length - 1;\r\n        var mat = shape.getMaterial(new Vector3_1.Vector3());\r\n        if (mat && mat.emittance > 0) {\r\n            this.lights = MapUtils_1.append(this.lights, shape);\r\n        }\r\n    }\r\n    rayCount() {\r\n        return this.rays;\r\n    }\r\n    intersect(r) {\r\n        this.rays++;\r\n        return this.tree.intersect(r);\r\n    }\r\n    shadow(r, light, max) {\r\n        var hit = this.intersect(r);\r\n        return hit.shape != light && hit.T < max;\r\n    }\r\n    directLight(n) {\r\n        if (this.lights.length == 0) {\r\n            return new Color_1.Color();\r\n        }\r\n        var color = new Color_1.Color();\r\n        var self = this;\r\n        var i = 0;\r\n        var light;\r\n        for (; i < this.lights.length; i++) {\r\n            light = this.lights[i];\r\n            var p = light.getRandomPoint();\r\n            var d = p.sub(n.origin);\r\n            var lr = new Ray_1.Ray(n.origin, d.normalize());\r\n            var diffuse = lr.direction.dot(n.direction);\r\n            if (diffuse <= 0) {\r\n                continue;\r\n            }\r\n            var distance = d.length();\r\n            if (self.shadow(lr, light, distance)) {\r\n                continue;\r\n            }\r\n            var material = light.getMaterial(p);\r\n            var emittance = material.emittance;\r\n            var attenuation = material.attenuation.compute(distance);\r\n            color = color.add(light.getColor(p).mulScalar(diffuse * emittance * attenuation));\r\n        }\r\n        return color.divScalar(this.lights.length);\r\n    }\r\n    sample(r, emission, samples, depth) {\r\n        if (depth < 0) {\r\n            return new Color_1.Color(0, 0, 0);\r\n        }\r\n        var hit = this.intersect(r);\r\n        if (!hit.ok()) {\r\n            return this.color;\r\n        }\r\n        var info = hit.getInfo(r);\r\n        var result = new Color_1.Color();\r\n        if (emission) {\r\n            var emittance = info.material.emittance;\r\n            if (emittance > 0) {\r\n                var attenuation = info.material.attenuation.compute(hit.T);\r\n                result = result.add(info.color.mulScalar(emittance * attenuation * samples));\r\n            }\r\n        }\r\n        var n = Math.round(Math.sqrt(samples));\r\n        for (var u = 0; u < n; u++) {\r\n            for (var v = 0; v < n; v++) {\r\n                var p = Math.random();\r\n                var fu = (u + Math.random()) / n;\r\n                var fv = (v + Math.random()) / n;\r\n                var bounce = r.bounce(info, p, fu, fv);\r\n                var indirect = this.sample(bounce.ray, bounce.reflected, 1, depth - 1);\r\n                if (bounce.reflected) {\r\n                    var tinted = indirect.mix(info.color.mul(indirect), info.material.tint);\r\n                    result = result.add(tinted);\r\n                }\r\n                else {\r\n                    var direct = this.directLight(info.ray);\r\n                    result = result.add(info.color.mul(direct.add(indirect)));\r\n                }\r\n            }\r\n        }\r\n        return result.divScalar(n * n);\r\n    }\r\n}\r\nScene.interval = 0;\r\nexports.Scene = Scene;\r\n"
    },
    {
      "id": 42,
      "identifier": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-core\\src\\engine\\scene\\tree\\Node.ts",
      "name": "./packages/render-core/src/engine/scene/tree/Node.ts",
      "index": 18,
      "index2": 17,
      "size": 5799,
      "cacheable": true,
      "built": false,
      "optional": false,
      "prefetched": false,
      "chunks": [
        0
      ],
      "assets": [],
      "issuer": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-core\\src\\engine\\scene\\tree\\Tree.ts",
      "issuerId": 26,
      "issuerName": "./packages/render-core/src/engine/scene/tree/Tree.ts",
      "failed": false,
      "errors": 0,
      "warnings": 0,
      "reasons": [
        {
          "moduleId": 26,
          "moduleIdentifier": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-core\\src\\engine\\scene\\tree\\Tree.ts",
          "module": "./packages/render-core/src/engine/scene/tree/Tree.ts",
          "moduleName": "./packages/render-core/src/engine/scene/tree/Tree.ts",
          "type": "cjs require",
          "userRequest": "./Node",
          "loc": "4:15-32"
        }
      ],
      "usedExports": true,
      "providedExports": null,
      "optimizationBailout": [],
      "depth": 4,
      "source": "\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst Axis_1 = require(\"../Axis\");\r\nconst Hit_1 = require(\"../../math/Hit\");\r\nconst MapUtils_1 = require(\"../../utils/MapUtils\");\r\nconst MapUtils_2 = require(\"../../utils/MapUtils\");\r\nconst MathUtils_1 = require(\"../../utils/MathUtils\");\r\nclass Node {\r\n    constructor(axis, point, shapes, left, right) {\r\n        this.axis = axis;\r\n        this.point = point;\r\n        this.shapes = shapes;\r\n        this.left = left;\r\n        this.right = right;\r\n        this.index = Node.map.push(this) - 1;\r\n    }\r\n    static newNode(shapes) {\r\n        return new Node(Axis_1.Axis.AxisNone, 0, shapes, null, null);\r\n    }\r\n    intersect(r, tmin, tmax) {\r\n        var node = this;\r\n        var tsplit;\r\n        var leftFirst;\r\n        switch (node.axis) {\r\n            case Axis_1.Axis.AxisNone:\r\n                return node.intersectShapes(r);\r\n            case Axis_1.Axis.AxisX:\r\n                tsplit = (node.point - r.origin.x) / r.direction.x;\r\n                leftFirst = (r.origin.x < node.point) || (r.origin.x == node.point && r.direction.x <= 0);\r\n                break;\r\n            case Axis_1.Axis.AxisY:\r\n                tsplit = (node.point - r.origin.y) / r.direction.y;\r\n                leftFirst = (r.origin.y < node.point) || (r.origin.y == node.point && r.direction.y <= 0);\r\n                break;\r\n            case Axis_1.Axis.AxisZ:\r\n                tsplit = (node.point - r.origin.z) / r.direction.z;\r\n                leftFirst = (r.origin.z < node.point) || (r.origin.z == node.point && r.direction.z <= 0);\r\n                break;\r\n        }\r\n        var first;\r\n        var second;\r\n        if (leftFirst) {\r\n            first = node.left;\r\n            second = node.right;\r\n        }\r\n        else {\r\n            first = node.right;\r\n            second = node.left;\r\n        }\r\n        if (tsplit > tmax || tsplit <= 0) {\r\n            return first.intersect(r, tmin, tmax);\r\n        }\r\n        else if (tsplit < tmin) {\r\n            return second.intersect(r, tmin, tmax);\r\n        }\r\n        else {\r\n            var h1 = first.intersect(r, tmin, tsplit);\r\n            if (h1.T <= tsplit) {\r\n                return h1;\r\n            }\r\n            var h2 = second.intersect(r, tsplit, Math.min(tmax, h1.T));\r\n            if (h1.T <= h2.T) {\r\n                return h1;\r\n            }\r\n            else {\r\n                return h2;\r\n            }\r\n        }\r\n    }\r\n    intersectShapes(r) {\r\n        var node = this;\r\n        var hit = Hit_1.NoHit;\r\n        node.shapes.forEach(function (shape) {\r\n            var h = shape.intersect(r);\r\n            if (h.T < hit.T) {\r\n                hit = h;\r\n            }\r\n        });\r\n        return hit;\r\n    }\r\n    partitionScore(axis, point) {\r\n        var node = this;\r\n        var left = 0;\r\n        var right = 0;\r\n        node.shapes.forEach(function (shape) {\r\n            var box = shape.box;\r\n            var p = box.partition(axis, point);\r\n            if (p.left) {\r\n                left++;\r\n            }\r\n            if (p.right) {\r\n                right++;\r\n            }\r\n        });\r\n        if (left >= right) {\r\n            return left;\r\n        }\r\n        else {\r\n            return right;\r\n        }\r\n    }\r\n    partition(size, axis, point) {\r\n        var node = this;\r\n        var left = [];\r\n        var right = [];\r\n        node.shapes.forEach(function (shape) {\r\n            var box = shape.box;\r\n            var p = box.partition(axis, point);\r\n            if (p.left) {\r\n                left = MapUtils_1.append(left, shape);\r\n            }\r\n            if (p.right) {\r\n                right = MapUtils_1.append(right, shape);\r\n            }\r\n        });\r\n        return { left: left, right: right };\r\n    }\r\n    split(depth) {\r\n        var node = this;\r\n        if (node.shapes.length < 8) {\r\n            return;\r\n        }\r\n        var xs = [];\r\n        var ys = [];\r\n        var zs = [];\r\n        node.shapes.forEach(function (shape) {\r\n            var box = shape.box;\r\n            xs = MapUtils_1.append(xs, box.min.x);\r\n            xs = MapUtils_1.append(xs, box.max.x);\r\n            ys = MapUtils_1.append(ys, box.min.y);\r\n            ys = MapUtils_1.append(ys, box.max.y);\r\n            zs = MapUtils_1.append(zs, box.min.z);\r\n            zs = MapUtils_1.append(zs, box.max.z);\r\n        });\r\n        MapUtils_2.sortAscending(xs);\r\n        MapUtils_2.sortAscending(ys);\r\n        MapUtils_2.sortAscending(zs);\r\n        var mx = MathUtils_1.MathUtils.median(xs);\r\n        var my = MathUtils_1.MathUtils.median(ys);\r\n        var mz = MathUtils_1.MathUtils.median(zs);\r\n        var best = Math.round(node.shapes.length * 0.85);\r\n        var bestAxis = Axis_1.Axis.AxisNone;\r\n        var bestPoint = 0.0;\r\n        var sx = node.partitionScore(Axis_1.Axis.AxisX, mx);\r\n        if (sx < best) {\r\n            best = sx;\r\n            bestAxis = Axis_1.Axis.AxisX;\r\n            bestPoint = mx;\r\n        }\r\n        var sy = node.partitionScore(Axis_1.Axis.AxisY, my);\r\n        if (sy < best) {\r\n            best = sy;\r\n            bestAxis = Axis_1.Axis.AxisY;\r\n            bestPoint = my;\r\n        }\r\n        var sz = node.partitionScore(Axis_1.Axis.AxisZ, mz);\r\n        if (sz < best) {\r\n            best = sz;\r\n            bestAxis = Axis_1.Axis.AxisZ;\r\n            bestPoint = mz;\r\n        }\r\n        if (bestAxis == Axis_1.Axis.AxisNone) {\r\n            return;\r\n        }\r\n        var p = node.partition(best, bestAxis, bestPoint);\r\n        node.axis = bestAxis;\r\n        node.point = bestPoint;\r\n        node.left = Node.newNode(p.left);\r\n        node.right = Node.newNode(p.right);\r\n        node.left.split(depth + 1);\r\n        node.right.split(depth + 1);\r\n        node.shapes = null;\r\n    }\r\n}\r\nNode.map = [];\r\nexports.Node = Node;\r\n"
    },
    {
      "id": 43,
      "identifier": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-core\\src\\engine\\data\\ImageLoader.ts",
      "name": "./packages/render-core/src/engine/data/ImageLoader.ts",
      "index": 27,
      "index2": 20,
      "size": 1225,
      "cacheable": true,
      "built": false,
      "optional": false,
      "prefetched": false,
      "chunks": [
        0
      ],
      "assets": [],
      "issuer": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-core\\src\\engine\\scene\\materials\\Texture.ts",
      "issuerId": 10,
      "issuerName": "./packages/render-core/src/engine/scene/materials/Texture.ts",
      "failed": false,
      "errors": 0,
      "warnings": 0,
      "reasons": [
        {
          "moduleId": 10,
          "moduleIdentifier": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-core\\src\\engine\\scene\\materials\\Texture.ts",
          "module": "./packages/render-core/src/engine/scene/materials/Texture.ts",
          "moduleName": "./packages/render-core/src/engine/scene/materials/Texture.ts",
          "type": "cjs require",
          "userRequest": "../../data/ImageLoader",
          "loc": "5:22-55"
        }
      ],
      "usedExports": true,
      "providedExports": null,
      "optimizationBailout": [],
      "depth": 3,
      "source": "\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst DataCache_1 = require(\"./DataCache\");\r\nclass ImageLoader {\r\n    constructor() {\r\n    }\r\n    load(url, onLoad, onProgress, onError) {\r\n        var self = this;\r\n        var cached = DataCache_1.DataCache.getItem(url);\r\n        if (cached !== undefined) {\r\n            onLoad(cached);\r\n            return;\r\n        }\r\n        var image = document.createElement('img');\r\n        image.addEventListener('load', function (event) {\r\n            DataCache_1.DataCache.add(url, this);\r\n            if (onLoad)\r\n                onLoad(this);\r\n        }, false);\r\n        if (onProgress !== undefined) {\r\n            image.addEventListener('progress', function (event) {\r\n                onProgress(event);\r\n            }, false);\r\n        }\r\n        if (onError !== undefined) {\r\n            image.addEventListener('error', function (event) {\r\n                onError(event);\r\n            }, false);\r\n        }\r\n        if (ImageLoader.crossOrigin !== undefined)\r\n            image.crossOrigin = ImageLoader.crossOrigin;\r\n        image.src = url;\r\n        return image;\r\n    }\r\n}\r\nImageLoader.crossOrigin = \"*\";\r\nexports.ImageLoader = ImageLoader;\r\n"
    },
    {
      "id": 44,
      "identifier": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-core\\src\\engine\\data\\DataCache.ts",
      "name": "./packages/render-core/src/engine/data/DataCache.ts",
      "index": 28,
      "index2": 19,
      "size": 338,
      "cacheable": true,
      "built": false,
      "optional": false,
      "prefetched": false,
      "chunks": [
        0
      ],
      "assets": [],
      "issuer": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-core\\src\\engine\\data\\ImageLoader.ts",
      "issuerId": 43,
      "issuerName": "./packages/render-core/src/engine/data/ImageLoader.ts",
      "failed": false,
      "errors": 0,
      "warnings": 0,
      "reasons": [
        {
          "moduleId": 43,
          "moduleIdentifier": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-core\\src\\engine\\data\\ImageLoader.ts",
          "module": "./packages/render-core/src/engine/data/ImageLoader.ts",
          "moduleName": "./packages/render-core/src/engine/data/ImageLoader.ts",
          "type": "cjs require",
          "userRequest": "./DataCache",
          "loc": "3:20-42"
        }
      ],
      "usedExports": true,
      "providedExports": null,
      "optimizationBailout": [],
      "depth": 4,
      "source": "\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nclass DataCache {\r\n    static getItem(url) {\r\n        return DataCache.cache.get(url);\r\n    }\r\n    static add(url, item) {\r\n        DataCache.cache.set(url, item);\r\n        return item;\r\n    }\r\n}\r\nDataCache.cache = new Map();\r\nexports.DataCache = DataCache;\r\n"
    },
    {
      "id": 45,
      "identifier": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-core\\src\\engine\\scene\\materials\\DiffuseMaterial.ts",
      "name": "./packages/render-core/src/engine/scene/materials/DiffuseMaterial.ts",
      "index": 31,
      "index2": 24,
      "size": 493,
      "cacheable": true,
      "built": false,
      "optional": false,
      "prefetched": false,
      "chunks": [
        0
      ],
      "assets": [],
      "issuer": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-core\\src\\engine\\scene\\materials\\MaterialUtils.ts",
      "issuerId": 17,
      "issuerName": "./packages/render-core/src/engine/scene/materials/MaterialUtils.ts",
      "failed": false,
      "errors": 0,
      "warnings": 0,
      "reasons": [
        {
          "moduleId": 17,
          "moduleIdentifier": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-core\\src\\engine\\scene\\materials\\MaterialUtils.ts",
          "module": "./packages/render-core/src/engine/scene/materials/MaterialUtils.ts",
          "moduleName": "./packages/render-core/src/engine/scene/materials/MaterialUtils.ts",
          "type": "cjs require",
          "userRequest": "./DiffuseMaterial",
          "loc": "8:26-54"
        }
      ],
      "usedExports": true,
      "providedExports": null,
      "optimizationBailout": [],
      "depth": 4,
      "source": "\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst Material_1 = require(\"./Material\");\r\nconst Attenuation_1 = require(\"./Attenuation\");\r\nconst Material_2 = require(\"./Material\");\r\nclass DiffuseMaterial extends Material_1.Material {\r\n    constructor(color) {\r\n        super(color, null, null, null, 1, 0, Attenuation_1.NoAttenuation, 1, 0, 0, false);\r\n        this.type = Material_2.MaterialType.DIFFUSE;\r\n    }\r\n}\r\nexports.DiffuseMaterial = DiffuseMaterial;\r\n"
    },
    {
      "id": 46,
      "identifier": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-core\\src\\engine\\scene\\materials\\SpecularMaterial.ts",
      "name": "./packages/render-core/src/engine/scene/materials/SpecularMaterial.ts",
      "index": 32,
      "index2": 25,
      "size": 508,
      "cacheable": true,
      "built": false,
      "optional": false,
      "prefetched": false,
      "chunks": [
        0
      ],
      "assets": [],
      "issuer": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-core\\src\\engine\\scene\\materials\\MaterialUtils.ts",
      "issuerId": 17,
      "issuerName": "./packages/render-core/src/engine/scene/materials/MaterialUtils.ts",
      "failed": false,
      "errors": 0,
      "warnings": 0,
      "reasons": [
        {
          "moduleId": 17,
          "moduleIdentifier": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-core\\src\\engine\\scene\\materials\\MaterialUtils.ts",
          "module": "./packages/render-core/src/engine/scene/materials/MaterialUtils.ts",
          "moduleName": "./packages/render-core/src/engine/scene/materials/MaterialUtils.ts",
          "type": "cjs require",
          "userRequest": "./SpecularMaterial",
          "loc": "9:27-56"
        }
      ],
      "usedExports": true,
      "providedExports": null,
      "optimizationBailout": [],
      "depth": 4,
      "source": "\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst Material_1 = require(\"./Material\");\r\nconst Attenuation_1 = require(\"./Attenuation\");\r\nconst Material_2 = require(\"./Material\");\r\nclass SpecularMaterial extends Material_1.Material {\r\n    constructor(color, index) {\r\n        super(color, null, null, null, 1, 0, Attenuation_1.NoAttenuation, index, 0, 0, false);\r\n        this.type = Material_2.MaterialType.SPECULAR;\r\n    }\r\n}\r\nexports.SpecularMaterial = SpecularMaterial;\r\n"
    },
    {
      "id": 47,
      "identifier": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-core\\src\\engine\\scene\\materials\\ClearMaterial.ts",
      "name": "./packages/render-core/src/engine/scene/materials/ClearMaterial.ts",
      "index": 33,
      "index2": 26,
      "size": 559,
      "cacheable": true,
      "built": false,
      "optional": false,
      "prefetched": false,
      "chunks": [
        0
      ],
      "assets": [],
      "issuer": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-core\\src\\engine\\scene\\materials\\MaterialUtils.ts",
      "issuerId": 17,
      "issuerName": "./packages/render-core/src/engine/scene/materials/MaterialUtils.ts",
      "failed": false,
      "errors": 0,
      "warnings": 0,
      "reasons": [
        {
          "moduleId": 17,
          "moduleIdentifier": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-core\\src\\engine\\scene\\materials\\MaterialUtils.ts",
          "module": "./packages/render-core/src/engine/scene/materials/MaterialUtils.ts",
          "moduleName": "./packages/render-core/src/engine/scene/materials/MaterialUtils.ts",
          "type": "cjs require",
          "userRequest": "./ClearMaterial",
          "loc": "10:24-50"
        }
      ],
      "usedExports": true,
      "providedExports": null,
      "optimizationBailout": [],
      "depth": 4,
      "source": "\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst Material_1 = require(\"./Material\");\r\nconst Color_1 = require(\"../../math/Color\");\r\nconst Attenuation_1 = require(\"./Attenuation\");\r\nconst Material_2 = require(\"./Material\");\r\nclass ClearMaterial extends Material_1.Material {\r\n    constructor(index, gloss) {\r\n        super(new Color_1.Color(), null, null, null, 1, 0, Attenuation_1.NoAttenuation, index, gloss, 0, true);\r\n        this.type = Material_2.MaterialType.CLEAR;\r\n    }\r\n}\r\nexports.ClearMaterial = ClearMaterial;\r\n"
    },
    {
      "id": 48,
      "identifier": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-core\\src\\engine\\scene\\materials\\GlossyMaterial.ts",
      "name": "./packages/render-core/src/engine/scene/materials/GlossyMaterial.ts",
      "index": 34,
      "index2": 27,
      "size": 511,
      "cacheable": true,
      "built": false,
      "optional": false,
      "prefetched": false,
      "chunks": [
        0
      ],
      "assets": [],
      "issuer": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-core\\src\\engine\\scene\\materials\\MaterialUtils.ts",
      "issuerId": 17,
      "issuerName": "./packages/render-core/src/engine/scene/materials/MaterialUtils.ts",
      "failed": false,
      "errors": 0,
      "warnings": 0,
      "reasons": [
        {
          "moduleId": 17,
          "moduleIdentifier": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-core\\src\\engine\\scene\\materials\\MaterialUtils.ts",
          "module": "./packages/render-core/src/engine/scene/materials/MaterialUtils.ts",
          "moduleName": "./packages/render-core/src/engine/scene/materials/MaterialUtils.ts",
          "type": "cjs require",
          "userRequest": "./GlossyMaterial",
          "loc": "11:25-52"
        }
      ],
      "usedExports": true,
      "providedExports": null,
      "optimizationBailout": [],
      "depth": 4,
      "source": "\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst Material_1 = require(\"./Material\");\r\nconst Attenuation_1 = require(\"./Attenuation\");\r\nconst Material_2 = require(\"./Material\");\r\nclass GlossyMaterial extends Material_1.Material {\r\n    constructor(color, index, gloss) {\r\n        super(color, null, null, null, 1, 0, Attenuation_1.NoAttenuation, index, gloss, 0, false);\r\n        this.type = Material_2.MaterialType.GLOSSY;\r\n    }\r\n}\r\nexports.GlossyMaterial = GlossyMaterial;\r\n"
    },
    {
      "id": 49,
      "identifier": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-core\\src\\pointer\\src\\Pointer.ts",
      "name": "./packages/render-core/src/pointer/src/Pointer.ts",
      "index": 44,
      "index2": 41,
      "size": 1034,
      "cacheable": true,
      "built": false,
      "optional": false,
      "prefetched": false,
      "chunks": [
        0
      ],
      "assets": [],
      "issuer": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-core\\src\\engine\\scene\\SharedScene.ts",
      "issuerId": 25,
      "issuerName": "./packages/render-core/src/engine/scene/SharedScene.ts",
      "failed": false,
      "errors": 1,
      "warnings": 0,
      "reasons": [
        {
          "moduleId": 25,
          "moduleIdentifier": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-core\\src\\engine\\scene\\SharedScene.ts",
          "module": "./packages/render-core/src/engine/scene/SharedScene.ts",
          "moduleName": "./packages/render-core/src/engine/scene/SharedScene.ts",
          "type": "cjs require",
          "userRequest": "../../pointer/src/Pointer",
          "loc": "8:18-54"
        }
      ],
      "usedExports": true,
      "providedExports": null,
      "optimizationBailout": [],
      "depth": 3,
      "source": "\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst DirectMemory_1 = require(\"./DirectMemory\");\r\nclass Pointer {\r\n    constructor(reference) {\r\n        this.reference = reference;\r\n        if (!Pointer.heap) {\r\n            Pointer.init();\r\n        }\r\n        this.beginLocation = Pointer.offset;\r\n        this.currentLocation = Pointer.offset;\r\n        Pointer.offset = reference.write(Pointer.memory);\r\n    }\r\n    static init() {\r\n        if (Pointer.initialized) {\r\n            return;\r\n        }\r\n        var maxMemory = 64 * 1024 * 1024;\r\n        Pointer.heap = new Uint8Array(new SharedArrayBuffer(maxMemory));\r\n        Pointer.memory = new DirectMemory_1.DirectMemory(Pointer.heap.buffer);\r\n        Pointer.initialized = true;\r\n        return Pointer.memory;\r\n    }\r\n    read() {\r\n        Pointer.offset = this.reference.read(Pointer.memory);\r\n        return this.reference;\r\n    }\r\n}\r\nexports.Pointer = Pointer;\r\nfunction sizeof(ptr) {\r\n    return ptr.memorySize;\r\n}\r\nexports.sizeof = sizeof;\r\n"
    },
    {
      "id": 50,
      "identifier": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-core\\src\\engine\\renderer\\worker\\Thread.ts",
      "name": "./packages/render-core/src/engine/renderer/worker/Thread.ts",
      "index": 46,
      "index2": 44,
      "size": 2476,
      "cacheable": true,
      "built": false,
      "optional": false,
      "prefetched": false,
      "chunks": [
        0
      ],
      "assets": [],
      "issuer": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-core\\src\\engine\\renderer\\worker\\ThreadPool.ts",
      "issuerId": 31,
      "issuerName": "./packages/render-core/src/engine/renderer/worker/ThreadPool.ts",
      "failed": false,
      "errors": 0,
      "warnings": 0,
      "reasons": [
        {
          "moduleId": 31,
          "moduleIdentifier": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-core\\src\\engine\\renderer\\worker\\ThreadPool.ts",
          "module": "./packages/render-core/src/engine/renderer/worker/ThreadPool.ts",
          "moduleName": "./packages/render-core/src/engine/renderer/worker/ThreadPool.ts",
          "type": "cjs require",
          "userRequest": "./Thread",
          "loc": "3:17-36"
        }
      ],
      "usedExports": true,
      "providedExports": null,
      "optimizationBailout": [],
      "depth": 4,
      "source": "\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst TraceJob_1 = require(\"./TraceJob\");\r\nconst TraceJobManager_1 = require(\"./TraceJobManager\");\r\nclass Thread {\r\n    constructor(name, id) {\r\n        this.id = id;\r\n        console.log(\"Checkpoint #4.1\");\r\n        try {\r\n            this.instance = new Worker(Thread.workerUrl);\r\n        }\r\n        catch (e) {\r\n            console.log(e);\r\n        }\r\n        this.instance.onmessage = this.onMessageReceived.bind(this);\r\n    }\r\n    get isTracing() {\r\n        return this._isTracing;\r\n    }\r\n    onMessageReceived(event) {\r\n        if (event.data == TraceJob_1.TraceJob.INITED) {\r\n            this.initialized = true;\r\n            this._isTracing = false;\r\n            if (this.onInitComplete) {\r\n                this.onInitComplete(this);\r\n            }\r\n        }\r\n        if (event.data == TraceJob_1.TraceJob.TRACED) {\r\n            this._isTracing = false;\r\n            TraceJobManager_1.TraceJobManager.flags[3 + this.id] = 0;\r\n            if (this.onTraceComplete) {\r\n                this.onTraceComplete(this);\r\n            }\r\n        }\r\n        if (event.data == TraceJob_1.TraceJob.LOCKED) {\r\n            this._isTracing = false;\r\n            TraceJobManager_1.TraceJobManager.flags[3 + this.id] = 3;\r\n            if (this.onThreadLocked) {\r\n                this.onThreadLocked(this);\r\n            }\r\n        }\r\n    }\r\n    init(param, transferable, onInit) {\r\n        console.log(\"Initializing thread \" + this.id);\r\n        this.onInitComplete = onInit;\r\n        param.command = TraceJob_1.TraceJob.INIT;\r\n        param.id = this.id;\r\n        this.send(param, transferable);\r\n    }\r\n    trace(param, onComplete) {\r\n        if (TraceJobManager_1.TraceJobManager.flags[3 + this.id] == 2) {\r\n            this._isTracing = false;\r\n            TraceJobManager_1.TraceJobManager.flags[3 + this.id] = 3;\r\n            if (this.onThreadLocked) {\r\n                this.onThreadLocked(this);\r\n            }\r\n        }\r\n        else {\r\n            this._isTracing = true;\r\n            TraceJobManager_1.TraceJobManager.flags[3 + this.id] = 1;\r\n            this.onTraceComplete = onComplete;\r\n            param.command = TraceJob_1.TraceJob.TRACE;\r\n            this.send(param);\r\n        }\r\n    }\r\n    send(data, buffers) {\r\n        this.instance.postMessage(data, buffers);\r\n    }\r\n    terminate() {\r\n    }\r\n}\r\nThread.workerUrl = \"../workers/trace-worker-bootstrap.js\";\r\nexports.Thread = Thread;\r\n"
    },
    {
      "id": 51,
      "identifier": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-client\\src\\views\\ThreeJSView.ts",
      "name": "./packages/render-client/src/views/ThreeJSView.ts",
      "index": 51,
      "index2": 50,
      "size": 1558,
      "cacheable": true,
      "built": false,
      "optional": false,
      "prefetched": false,
      "chunks": [
        0
      ],
      "assets": [],
      "issuer": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-client\\index.ts",
      "issuerId": 36,
      "issuerName": "./packages/render-client/index.ts",
      "failed": false,
      "errors": 7,
      "warnings": 0,
      "reasons": [
        {
          "moduleId": 36,
          "moduleIdentifier": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-client\\index.ts",
          "module": "./packages/render-client/index.ts",
          "moduleName": "./packages/render-client/index.ts",
          "type": "cjs require",
          "userRequest": "./src/views/ThreeJSView",
          "loc": "11:9-43"
        }
      ],
      "usedExports": true,
      "providedExports": null,
      "optimizationBailout": [],
      "depth": 1,
      "source": "\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nclass ThreeJSView {\r\n    constructor(width, height, container, appContainer) {\r\n        this.width = width;\r\n        this.height = height;\r\n        this.container = container;\r\n        this.appContainer = appContainer;\r\n        this.camera = new THREE.PerspectiveCamera(45, this.width / this.height, 1, 20000);\r\n        this.camera.up = new THREE.Vector3(0, 1, 0);\r\n        this.camera.position.y = 10;\r\n        this.camera.position.z = 10;\r\n        this.camera.lookAt(new THREE.Vector3(0, 0, 0));\r\n        this.scene = new THREE.Scene();\r\n        this.scene.position.x = 0;\r\n        this.scene.position.y = 0;\r\n        this.renderer = new THREE.WebGLRenderer();\r\n        this.renderer.setPixelRatio(window.devicePixelRatio);\r\n        this.renderer.setSize(this.width, this.height);\r\n        this.renderer.shadowMap.enabled = true;\r\n        this.renderer.shadowMap.type = THREE.BasicShadowMap;\r\n        this.container.appendChild(this.renderer.domElement);\r\n        this.controls = new THREE[\"EditorControls\"](this.camera, this.appContainer);\r\n        this.controls.addEventListener('change', () => {\r\n            this.render();\r\n            if (this.onCameraChange) {\r\n                this.onCameraChange(this.camera);\r\n            }\r\n        });\r\n    }\r\n    animate() {\r\n        requestAnimationFrame(this.animate.bind(this));\r\n        this.render();\r\n    }\r\n    render() {\r\n        this.renderer.render(this.scene, this.camera);\r\n    }\r\n}\r\nexports.ThreeJSView = ThreeJSView;\r\n"
    },
    {
      "id": 52,
      "identifier": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-client\\src\\views\\GIJSView.ts",
      "name": "./packages/render-client/src/views/GIJSView.ts",
      "index": 52,
      "index2": 51,
      "size": 14130,
      "cacheable": true,
      "built": true,
      "optional": false,
      "prefetched": false,
      "chunks": [
        0
      ],
      "assets": [],
      "issuer": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-client\\index.ts",
      "issuerId": 36,
      "issuerName": "./packages/render-client/index.ts",
      "failed": false,
      "errors": 5,
      "warnings": 0,
      "reasons": [
        {
          "moduleId": 36,
          "moduleIdentifier": "C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\ts-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\node_modules\\tslint-loader\\index.js!C:\\Users\\01\\workspace\\x-ray.js\\packages\\render-client\\index.ts",
          "module": "./packages/render-client/index.ts",
          "moduleName": "./packages/render-client/index.ts",
          "type": "cjs require",
          "userRequest": "./src/views/GIJSView",
          "loc": "12:9-40"
        }
      ],
      "usedExports": true,
      "providedExports": null,
      "optimizationBailout": [],
      "depth": 1,
      "source": "\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst GIRenderBase_1 = require(\"../render/GIRenderBase\");\r\nconst Color_1 = require(\"../../../render-core/src/engine/math/Color\");\r\nconst Camera_1 = require(\"../../../render-core/src/engine/scene/Camera\");\r\nconst SharedScene_1 = require(\"../../../render-core/src/engine/scene/SharedScene\");\r\nconst Cube_1 = require(\"../../../render-core/src/engine/scene/shapes/Cube\");\r\nconst Vector3_1 = require(\"../../../render-core/src/engine/math/Vector3\");\r\nconst Sphere_1 = require(\"../../../render-core/src/engine/scene/shapes/Sphere\");\r\nconst LightMaterial_1 = require(\"../../../render-core/src/engine/scene/materials/LightMaterial\");\r\nconst ThreeObjects_1 = require(\"../objects/ThreeObjects\");\r\nconst Mesh_1 = require(\"../../../render-core/src/engine/scene/shapes/Mesh\");\r\nconst Triangle_1 = require(\"../../../render-core/src/engine/scene/shapes/Triangle\");\r\nconst Material_1 = require(\"../../../render-core/src/engine/scene/materials/Material\");\r\nconst TransformedShape_1 = require(\"../../../render-core/src/engine/scene/shapes/TransformedShape\");\r\nconst Attenuation_1 = require(\"../../../render-core/src/engine/scene/materials/Attenuation\");\r\nconst Attenuation_2 = require(\"../../../render-core/src/engine/scene/materials/Attenuation\");\r\nconst Matrix4_1 = require(\"../../../render-core/src/engine/math/Matrix4\");\r\nconst Texture_1 = require(\"../../../render-core/src/engine/scene/materials/Texture\");\r\nclass GIJSView extends GIRenderBase_1.GIRenderBase {\r\n    constructor(width, height, container) {\r\n        super(width, height, container);\r\n        this.width = width;\r\n        this.height = height;\r\n        this.container = container;\r\n        this.identityMatrix = new THREE.Matrix4().identity();\r\n        this.scene = new SharedScene_1.SharedScene(Color_1.Color.hexColor(0x262626));\r\n        this.camera = Camera_1.Camera.lookAt(new Vector3_1.Vector3(0, 0, 0), new Vector3_1.Vector3(0, 0, 0), new Vector3_1.Vector3(0, 1, 0), 45);\r\n        this.cameraSamples = -1;\r\n        this.hitSamples = 1;\r\n        this.bounces = 4;\r\n        this.iterations = 1000000;\r\n        this.blockIterations = 1;\r\n    }\r\n    setThreeJSScene(scene, onInit) {\r\n        this.loadChildren(scene);\r\n        this.render(onInit);\r\n    }\r\n    loadChildren(parent) {\r\n        var child;\r\n        for (var i = 0; i < parent.children.length; i++) {\r\n            child = parent.children[i];\r\n            var obj = this.buildSceneObject(child);\r\n            if (obj) {\r\n                this.scene.add(obj);\r\n            }\r\n            if (obj) {\r\n                if (!(obj.getMaterial(new Vector3_1.Vector3()) instanceof LightMaterial_1.LightMaterial) && child.children.length > 0) {\r\n                    this.loadChildren(child);\r\n                }\r\n            }\r\n            else {\r\n                if (child.children.length > 0) {\r\n                    this.loadChildren(child);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    buildSceneObject(src) {\r\n        switch (src.type) {\r\n            case ThreeObjects_1.ThreeObjects.Mesh:\r\n                var material = GIJSView.getMaterial(src.material);\r\n                var shape = this.buildGeometry(src.geometry, material, src.smooth);\r\n                var matrixWorld = src.matrixWorld;\r\n                if (matrixWorld.equals(this.identityMatrix)) {\r\n                    return shape;\r\n                }\r\n                else {\r\n                    var mat = Matrix4_1.Matrix4.fromTHREEJS(matrixWorld.elements);\r\n                    return TransformedShape_1.TransformedShape.newTransformedShape(shape, mat);\r\n                }\r\n            case ThreeObjects_1.ThreeObjects.PointLight:\r\n                return this.getLight(src);\r\n        }\r\n        return null;\r\n    }\r\n    buildGeometry(geometry, material, smooth = false) {\r\n        if (geometry[\"_bufferGeometry\"]) {\r\n            geometry = geometry[\"_bufferGeometry\"];\r\n        }\r\n        var triangles = [];\r\n        if (!geometry.attributes) {\r\n            var vertices = geometry.vertices;\r\n            var faces = geometry.faces;\r\n            if (vertices && faces) {\r\n                for (var i = 0; i < faces.length; i++) {\r\n                    var face = faces[i];\r\n                    var triangle = new Triangle_1.Triangle();\r\n                    triangle.material = material;\r\n                    triangle.v1 = new Vector3_1.Vector3(vertices[face.a].x, vertices[face.a].y, vertices[face.a].z);\r\n                    triangle.v2 = new Vector3_1.Vector3(vertices[face.b].x, vertices[face.b].y, vertices[face.b].z);\r\n                    triangle.v3 = new Vector3_1.Vector3(vertices[face.c].x, vertices[face.c].y, vertices[face.c].z);\r\n                    triangle.n1 = new Vector3_1.Vector3();\r\n                    triangle.n2 = new Vector3_1.Vector3();\r\n                    triangle.n3 = new Vector3_1.Vector3();\r\n                    triangle.updateBox();\r\n                    triangle.fixNormals();\r\n                    triangles.push(triangle);\r\n                }\r\n            }\r\n            else {\r\n                return null;\r\n            }\r\n        }\r\n        else {\r\n            var positions = geometry.attributes[\"position\"].array;\r\n            if (geometry.attributes[\"uv\"]) {\r\n                var uv = geometry.attributes[\"uv\"].array;\r\n            }\r\n            var normals;\r\n            if (geometry.attributes[\"normal\"]) {\r\n                normals = geometry.attributes[\"normal\"].array;\r\n            }\r\n            else {\r\n                normals = this.computeNormals(positions);\r\n            }\r\n            var triCount = 0;\r\n            var indexAttribute = geometry.getIndex();\r\n            if (indexAttribute) {\r\n                var indices = indexAttribute.array;\r\n                var uvIndex = 0;\r\n                for (var i = 0; i < indices.length; i = i + 3) {\r\n                    triCount++;\r\n                    var a;\r\n                    var b;\r\n                    var c;\r\n                    a = indices[i];\r\n                    b = indices[i + 1];\r\n                    c = indices[i + 2];\r\n                    if (triCount % 2 !== 0) {\r\n                        a = indices[i];\r\n                        b = indices[i + 1];\r\n                        c = indices[i + 2];\r\n                    }\r\n                    else {\r\n                        c = indices[i];\r\n                        b = indices[i + 1];\r\n                        a = indices[i + 2];\r\n                    }\r\n                    var ax = a * 3;\r\n                    var ay = (a * 3) + 1;\r\n                    var az = (a * 3) + 2;\r\n                    var bx = b * 3;\r\n                    var by = (b * 3) + 1;\r\n                    var bz = (b * 3) + 2;\r\n                    var cx = c * 3;\r\n                    var cy = (c * 3) + 1;\r\n                    var cz = (c * 3) + 2;\r\n                    var au = a * 2;\r\n                    var av = (a * 2) + 1;\r\n                    var bu = b * 2;\r\n                    var bv = (b * 2) + 1;\r\n                    var cu = c * 2;\r\n                    var cv = (c * 2) + 1;\r\n                    var triangle = new Triangle_1.Triangle();\r\n                    triangle.material = material;\r\n                    triangle.v1 = new Vector3_1.Vector3(positions[ax], positions[ay], positions[az]);\r\n                    triangle.v2 = new Vector3_1.Vector3(positions[bx], positions[by], positions[bz]);\r\n                    triangle.v3 = new Vector3_1.Vector3(positions[cx], positions[cy], positions[cz]);\r\n                    triangle.n1 = new Vector3_1.Vector3(normals[ax], normals[ay], normals[az]);\r\n                    triangle.n2 = new Vector3_1.Vector3(normals[bx], normals[by], normals[bz]);\r\n                    triangle.n3 = new Vector3_1.Vector3(normals[cx], normals[cy], normals[cz]);\r\n                    if (uv) {\r\n                        triangle.t1 = new Vector3_1.Vector3(uv[au], uv[av], 0);\r\n                        triangle.t2 = new Vector3_1.Vector3(uv[bu], uv[bv], 0);\r\n                        triangle.t3 = new Vector3_1.Vector3(uv[cu], uv[cv], 0);\r\n                    }\r\n                    triangle.fixNormals();\r\n                    triangle.updateBox();\r\n                    triangles.push(triangle);\r\n                    uvIndex += 2;\r\n                }\r\n            }\r\n            else {\r\n                uvIndex = 0;\r\n                for (var i = 0; i < positions.length; i = i + 9) {\r\n                    var triangle = new Triangle_1.Triangle();\r\n                    triangle.material = material;\r\n                    triangle.v1 = new Vector3_1.Vector3(positions[i], positions[i + 1], positions[i + 2]);\r\n                    triangle.v2 = new Vector3_1.Vector3(positions[i + 3], positions[i + 4], positions[i + 5]);\r\n                    triangle.v3 = new Vector3_1.Vector3(positions[i + 6], positions[i + 7], positions[i + 8]);\r\n                    triangle.n1 = new Vector3_1.Vector3(normals[i], normals[i + 1], normals[i + 2]);\r\n                    triangle.n2 = new Vector3_1.Vector3(normals[i + 3], normals[i + 4], normals[i + 5]);\r\n                    triangle.n3 = new Vector3_1.Vector3(normals[i + 6], normals[i + 7], normals[i + 8]);\r\n                    if (uv) {\r\n                        triangle.t1 = new Vector3_1.Vector3(uv[uvIndex], uv[uvIndex + 1], 0);\r\n                        triangle.t2 = new Vector3_1.Vector3(uv[uvIndex + 2], uv[uvIndex + 3], 0);\r\n                        triangle.t3 = new Vector3_1.Vector3(uv[uvIndex + 4], uv[uvIndex + 5], 0);\r\n                    }\r\n                    triangle.fixNormals();\r\n                    triangle.updateBox();\r\n                    triangles.push(triangle);\r\n                    uvIndex += 6;\r\n                }\r\n            }\r\n        }\r\n        var mesh = Mesh_1.Mesh.newMesh(triangles);\r\n        if (smooth) {\r\n            mesh.smoothNormals();\r\n        }\r\n        return mesh;\r\n    }\r\n    computeNormals(positions) {\r\n        return new Float32Array(positions.length);\r\n    }\r\n    updateCamera(camera) {\r\n        this.camera.p.setFromJson(camera.position);\r\n        this.camera.m = 1 / Math.tan(camera.fov * Math.PI / 360);\r\n        let e = camera.matrix.elements;\r\n        let x = [-e[0], -e[1], -e[2]];\r\n        let y = [e[4], e[5], e[6]];\r\n        let z = [-e[8], -e[9], -e[10]];\r\n        this.camera.u.setFromArray(x);\r\n        this.camera.v.setFromArray(y);\r\n        this.camera.w.setFromArray(z);\r\n        this.dirty = true;\r\n        if (this.renderer) {\r\n            this.renderer.traceManager.stop();\r\n        }\r\n    }\r\n    static getMaterial(srcMaterial) {\r\n        if (srcMaterial instanceof THREE.MultiMaterial) {\r\n            srcMaterial = srcMaterial.materials[0];\r\n        }\r\n        var material = new Material_1.Material(Color_1.Color.hexColor(srcMaterial.color.getHex()));\r\n        material.ior = srcMaterial.ior ? srcMaterial.ior : 1;\r\n        material.tint = srcMaterial.tint ? srcMaterial.tint : 0;\r\n        material.gloss = srcMaterial.gloss ? srcMaterial.gloss : 0;\r\n        material.emittance = srcMaterial.emittance ? srcMaterial.emittance : 0;\r\n        material.transparent = srcMaterial.transparent;\r\n        material.attenuation = Attenuation_1.Attenuation.fromJson(srcMaterial.attenuation);\r\n        if (srcMaterial.map) {\r\n            if (srcMaterial.map.image && srcMaterial.map.image.length == 0) {\r\n                var image = srcMaterial.map.mipmaps[0];\r\n                material.texture = new Texture_1.Texture();\r\n                material.texture.setImageData(image.width, image.height, image.data);\r\n                material.texture.sourceFile = srcMaterial.map.uuid;\r\n            }\r\n            else if (srcMaterial.map.image) {\r\n                material.texture = new Texture_1.Texture(srcMaterial.map.image);\r\n            }\r\n        }\r\n        if (srcMaterial.normalMap) {\r\n            if (srcMaterial.normalMap.image && srcMaterial.normalMap.image.length == 0) {\r\n                var image = srcMaterial.normalMap.mipmaps[0];\r\n                material.normalTexture = new Texture_1.Texture();\r\n                material.normalTexture.setImageData(image.width, image.height, image.data);\r\n                material.normalTexture.sourceFile = srcMaterial.normalMap.uuid;\r\n            }\r\n            else if (srcMaterial.normalMap.image) {\r\n                material.normalTexture = new Texture_1.Texture(srcMaterial.normalMap.image);\r\n            }\r\n        }\r\n        if (srcMaterial.bumpMap) {\r\n            if (srcMaterial.bumpMap.image && srcMaterial.bumpMap.image.length == 0) {\r\n                var image = srcMaterial.bumpMap.mipmaps[0];\r\n                material.bumpTexture = new Texture_1.Texture();\r\n                material.bumpTexture.setImageData(image.width, image.height, image.data);\r\n                material.bumpTexture.sourceFile = srcMaterial.bumpMap.uuid;\r\n            }\r\n            else if (srcMaterial.bumpMap.image) {\r\n                material.bumpTexture = new Texture_1.Texture(srcMaterial.bumpMap.image);\r\n            }\r\n        }\r\n        return material;\r\n    }\r\n    getLight(src) {\r\n        if (src.children.length > 0) {\r\n            var lightGeometry = src.children[0].geometry;\r\n            if (lightGeometry instanceof THREE.SphereGeometry) {\r\n                var _radius = lightGeometry.parameters.radius;\r\n            }\r\n            else if (lightGeometry instanceof THREE.PlaneGeometry) {\r\n                var width = lightGeometry.parameters.width;\r\n                var height = lightGeometry.parameters.height;\r\n            }\r\n        }\r\n        var material = new LightMaterial_1.LightMaterial(Color_1.Color.hexColor(src.color.getHex()), src.intensity, new Attenuation_2.LinearAttenuation(src.distance));\r\n        if (_radius) {\r\n            var shape = Sphere_1.Sphere.newSphere(new Vector3_1.Vector3(src.position.x, src.position.y, src.position.z), _radius, material);\r\n        }\r\n        else {\r\n            shape = Cube_1.Cube.newCube(new Vector3_1.Vector3(-width / 2, src.position.y, -height / 2), new Vector3_1.Vector3(width / 2, src.position.y + 1, height / 2), material);\r\n        }\r\n        return shape;\r\n    }\r\n}\r\nexports.GIJSView = GIJSView;\r\n"
    }
  ],
  "filteredModules": 0,
  "children": []
}